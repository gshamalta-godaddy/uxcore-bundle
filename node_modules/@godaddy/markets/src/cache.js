import LRU from 'lru-cache';

/**
 * Utility class to wrap LRU.
 *
 * @export
 * @class Cache
 */
export default class Cache {
  constructor() {
    this.cache = new LRU({
      max: 100,
      maxAge: 5 * 60 * 1000
    });
  }

  /**
   * Get by key.
   *
   * @param {String} key Key of value to get
   * @returns {Object} Cached value, or undefined
   * @memberOf Cache
   * @api public
   */
  get(key) {
    return this.cache.get(key);
  }

  /**
   * Set value at key.
   *
   * @param {String} key Key of value to set
   * @param {Object} value Value to set
   * @memberOf Cache
   * @api public
   */
  set(key, value) {
    this.cache.set(key, value);
  }

  /**
   * Callback type for wrap
   *
   * @callback wrapCallback
   * @param {Object} err Error object
   * @param {Object} value Cached value, whether fetched from cache or provider
   */
  /* eslint-disable valid-jsdoc */
  /**
   * Get by key. If not present, fetched via provider.
   *
   * @param {String} key Key of value to fetch
   * @param {Function} provider Function to provide fresh value
   * @param {wrapCallback} callback Callback to run after value is retrieved
   *
   * @readonly
   * @memberOf Cache
   * @api public
   */
  wrap(key, provider, callback) {
    const value = this.get(key);

    if (value) {
      return callback(null, value);
    }

    provider((error, freshValue) => {
      if (error) {
        return callback(error);
      }

      this.set(key, freshValue);

      callback(null, freshValue);
    });
  }
}
