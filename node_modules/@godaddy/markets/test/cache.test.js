import assume from 'assume';
import sinon from 'sinon';
import Cache from '../src/cache';

describe('Cache', function () {
  let cache;

  beforeEach(() => {
    cache = new Cache();
  });

  describe('get', () => {
    it('should miss', () => {
      assume(cache.get('key')).does.not.exist();
    });
  });

  describe('set', () => {
    it('should set and hit', () => {
      const key = 'key';
      const expected = 'value';

      cache.set(key, expected);

      assume(cache.get(key)).equals(expected);
    });
  });

  describe('wrap', () => {
    it('should provide error', () => {
      const key = 'key';
      const expected = 'oops';

      const provider = wrapCallback => {
        wrapCallback(expected);
      };

      cache.wrap(key, provider, error => {
        assume(error).equals(expected);
      });
    });

    it('should provide cached value', done => {
      const key = 'key';
      const expected = 'value';

      const provider = cb => cb();
      const providerSpy = sinon.spy(provider);

      cache.set(key, expected);

      cache.wrap(key, provider, (error, value) => {
        assume(error).does.not.exist();
        assume(value).equals(expected);
        assume(cache.get(key)).equals(expected);
        assume(providerSpy.called).is.false();

        done();
      });
    });

    it('should provide fresh value', done => {
      const key = 'key';
      const expected = 'value';

      const provider = cb => cb(null, expected);

      cache.wrap(key, provider, (error, value) => {
        assume(error).does.not.exist();
        assume(value).equals(expected);
        assume(cache.get(key)).equals(expected);

        done();
      });
    });
  });
});
