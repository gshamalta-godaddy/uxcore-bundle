import assume from 'assume';
import sinon from 'sinon';
import request from '@godaddy/request';
import getCurrencies from '../src/currencies';
import pcCurrencies from './fixtures/pcCurrencies.json';

describe('getCurrencies', function () {
  const privateLabelId = 1592; // Domains Priced Right
  const marketId = 'ru-RU';

  afterEach(() => {
    sinon.restore();
  });

  it('returns a list of currencies when called with market and private label ID parameters', function (done) {
    const stub = sinon.stub(request, 'get').yields(null, pcCurrencies);

    getCurrencies('guiUrl', marketId, privateLabelId, function (error, currencies) {
      assume(error).does.not.exist();
      assume(currencies).is.an('array');
      assume(stub.calledWithMatch(new RegExp(`\\?marketId=${marketId}&pl_id=${privateLabelId}$`)));

      done();
    });
  });

  it('returns a list of currencies when called with a market parameter', function (done) {
    const stub = sinon.stub(request, 'get').yields(null, pcCurrencies);

    getCurrencies('guiUrl', marketId, function (error, currencies) {
      assume(error).does.not.exist();
      assume(currencies).eqls(pcCurrencies);
      assume(stub.calledWithMatch(new RegExp(`\\?marketId=${marketId}&pl_id=1$`)));

      done();
    });
  });

  it('returns a list of currencies when called with no market or private label ID parameters', function (done) {
    const stub = sinon.stub(request, 'get').yields(null, pcCurrencies);

    getCurrencies('guiUrl', (error, currencies) => {
      assume(error).does.not.exist();
      assume(currencies).eqls(pcCurrencies);
      assume(stub.calledWithMatch(new RegExp(`\\?marketId=en-US&pl_id=1$`)));

      done();
    });
  });

  it('includes EGP for PLID=1', function (done) {
    sinon.stub(request, 'get').yields(null, pcCurrencies);

    getCurrencies('guiUrl', marketId, 1, function (error, currencies) {
      assume(error).does.not.exist();
      // eslint-disable-next-line max-nested-callbacks
      assume(currencies.find(c => c.currencytype === 'EGP')).exists();

      done();
    });
  });

  // RES-8466 re-enables the EGP currency. Skipping since PL currencies
  // currently match GoDaddy-supported currencies.
  it.skip('does not include EGP for PLID!=1', function (done) {
    sinon.stub(request, 'get').yields(null, pcCurrencies);

    getCurrencies('guiUrl', marketId, privateLabelId, function (error, currencies) {
      assume(error).does.not.exist();
      // eslint-disable-next-line max-nested-callbacks
      assume(currencies.find(c => c.currencytype === 'EGP')).does.not.exist();

      done();
    });
  });

  it('handles request errors appropriately', function (done) {
    const expected = { errorKey: 'errorValue' };

    sinon.stub(request, 'get').yields(expected);

    getCurrencies('guiUrl', error => {
      assume(error).eqls(expected);

      done();
    }, 'JPY');
  });
});
