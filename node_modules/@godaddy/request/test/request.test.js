'use strict';

import assume from 'assume';
import request from '../index.js';

describe('request', function () {
  this.timeout(5E3); // eslint-disable-line no-invalid-this

  function gui(error, data) {
    assume(error).to.be.falsy();
    assume(data).to.be.an('object');
    assume(data).to.have.property('shopperid');
    assume(data).to.have.property('status', 'public');
    assume(data).to.have.property('carttotal', 0);
  }

  it('can GET XHR request', function (done) {
    request.get('https://www.godaddy.com', function (error, data) {
      assume(error).to.be.falsy();
      assume(data).to.be.a('string');
      assume(data.length).to.be.gt(0);
      assume(data).to.include('GoDaddy');

      done();
    });
  });

  it('parses JSON responses to object', function (done) {
    request.get('https://gui.godaddy.com/pcjson/applicationheader/', function (error, data) {
      gui(error, data);
      done();
    });
  });

  it('can POST XHR request', function (done) {
    request.post('https://sso.godaddy.com/v1/', {
      password: 'test',
      name: 'test'
    }, function (error, data) {
      assume(error).to.be.falsy();
      assume(data).to.be.a('string');
      assume(data).to.include('uxcore2.min.js');

      done();
    });
  });

  it('can do JSONP requests', function (done) {
    request.get('https://gui.godaddy.com/pcjson/applicationheader/', {
      jsonp: true
    }, function (error, data) {
      gui(error, data);
      done();
    });
  });

  it('works without AbortController', function (done) {
    const abort = window.AbortController;
    delete window.AbortController;
    request.get('https://gui.godaddy.com/pcjson/applicationheader/', function (error, data) {
      gui(error, data);
      window.AbortController = abort; // restore AbortController
      done();
    });
  });

  it('can parse error response', function (done) {
    request.get('https://auction.api.godaddy.com/v1/aftermarket/domains/member/authorized', function (error, data) {
      assume(error.message).to.equal('Unauthorized');
      assume(error.status).to.equal(401);
      assume(data).to.be.falsy();
      done();
    });
  });

  it('can timeout requests', function (done) {
    request.get('https://godaddy.com/will/be/cancelled', {
      timeout: 50
    }, function (error, data) {
      assume(error).to.be.instanceof(Error);
      assume(error.message).to.equal('The user aborted a request.');
      assume(data).to.be.falsy();
      done();
    });
  });

  it('can provide controllers to abort requests', function (done) {
    const controller = new AbortController();

    request.get('https://godaddy.com/manual/cancel', { controller }, function (error, data) {
      assume(error).to.be.instanceof(Error);
      assume(error.message).to.equal('The user aborted a request.');
      assume(data).to.be.falsy();
      done();
    });

    setTimeout(controller.abort.bind(controller), 50);
  });

  it('can handle APIs that do not define content-type', function (done) {
    request.get('https://gui.dev-godaddy.com/preference/currency/set/BRL', function (error, data) {
      assume(error).to.be.falsy();
      assume(data).to.be.a('blob');
      assume(data).to.have.length(0);

      done();
    });
  });

  it('will provide legacy fallback for `credentials` and `mode`', function (done) {
    const { request: req } = request.get('https://gui.godaddy.com/pcjson/applicationheader/', function (error, data) {
      gui(error, data);
      assume(req.mode).to.equal('cors');
      assume(req.credentials).to.equal('include');

      const { request: req1 } = request.get('https://gui.godaddy.com/pcjson/applicationheader/', {
        mode: 'no-cors',
        credentials: 'omit'
      }, function () {
        assume(req1.mode).to.equal('no-cors');
        assume(req1.credentials).to.equal('omit');

        done();
      });
    });
  });
});
