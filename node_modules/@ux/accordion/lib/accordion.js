"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Base Componenet for Accordion
 *
 * @public
 * @constructor
 */
class Base extends _react.Component {
  constructor(props) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    super(props, ...args);
    this.state = {
      open: +this.props.open || -1
    };
  }

  componentDidUpdate(prevProps) {
    // If the `open` prop is changed, we need to make sure the internal `open`
    // state responds to that accordingly.
    if (prevProps.open !== this.props.open && this.props.open !== this.state.open) {
      this.setState({
        open: this.props.open
      });
    }
  }
  /**
   * Process the child elements so they can be orchestrated by the accordion
   * interface.
   *
   * @returns {Array} A set of children components that need to be rendered.
   * @param {Object} styles Optional Browser
   * @private
   */


  panels() {
    let styles = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    const open = this.state.open;
    const {
      children
    } = this.props;

    if (!children) {
      return;
    }

    return _react.Children.map(children, (child, index) => {
      if (!child || !child.props || !('title' in child.props)) return child;
      const onClick = child.props.onClick; //
      // Increase the index so it's no longer zero based. This makes
      // for a much more friendly developer interface.
      //

      index++;
      return /*#__PURE__*/_react.default.cloneElement(child, {
        key: index,
        tabIndex: 0,
        open: index === open,
        styles,
        onClick: e => {
          e.preventDefault();
          let toggle = true;

          if (typeof onClick === 'function') {
            toggle = onClick(e, index);
          }

          if (this.state.open === index) {
            index = -1;
          }

          if (toggle !== false) {
            this.setState({
              open: index
            });
          }
        }
      });
    });
  }

}
/**
 * Default properties
 * @type {Object}
 * @public
 */


exports.default = Base;
Base.defaultProps = {
  open: -1
};
/**
 * Property validation.
 *
 * @type {Object}
 * @public
 */

Base.propTypes = {
  /** Which panel should be open by default. */
  open: _propTypes.default.number,

  /** The actual collapsible panels. */
  children: _propTypes.default.node.isRequired,

  /** The title for the accordion. */
  title: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.element]),

  /** Developer indicates start index */
  startTabIndex: _propTypes.default.number
};