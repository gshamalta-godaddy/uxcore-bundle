"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transform = transform;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _text = _interopRequireDefault(require("@ux/text"));

const _excluded = ["title", "button", "actions"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

/**
 * Converts the legacy configuration object into props for <Dialog/>
 *
 * @param {Object} config - Configuration object
 * @param {String|Node} - Title of the alert
 * @param {Component} button - Legacy container for the alert
 * @param {Component} actions - New actions for the alert
 * @returns {Object} - A converted props object for <Dialog/>
 */
function transform(config) {
  const {
    title,
    button,
    actions
  } = config,
        rest = (0, _objectWithoutProperties2.default)(config, _excluded);
  warn(config);
  return _objectSpread({
    title: typeof title === 'string' ? /*#__PURE__*/_react.default.createElement(_text.default.h2, {
      text: title,
      as: "title"
    }) : title,
    actions: button || actions
  }, rest);
}

const warnings = new Set();
/**
 * Warns when the shim is used
 *
 * @param {Object} props - Configuration object
 * @param {Component} button - Legacy container for the alert
 */

function warn(props) {
  const {
    button
  } = props;

  if (button) {
    const warning = 'Prop `button` for <Alert/> will be removed in v2201, please replace with `actions`';
    !warnings.has(warning) && warnings.add(warning) && console.warn(warning);
  }
}