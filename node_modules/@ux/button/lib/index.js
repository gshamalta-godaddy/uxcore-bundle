"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _chevronDown = _interopRequireDefault(require("@ux/icon/chevron-down"));

var _linkArrow = _interopRequireDefault(require("@ux/icon/link-arrow"));

var _classes = _interopRequireDefault(require("@ux/text/classes"));

var _windowNew = _interopRequireDefault(require("@ux/icon/window-new"));

const _excluded = ["active", "as", "className", "children", "design", "download", "external", "hidden", "href", "icon", "size", "text", "type"];
const UX_BUTTON_CLASSNAME = 'ux-button';
const designs = ['critical', 'inline', 'primary', 'secondary', 'control', 'stateless'];

function warn(props) {
  const {
    children,
    icon,
    text
  } = props;
  if (process.env.NODE_ENV === 'production') return;

  if (children) {
    console.warn(`Warning: The use of children elements within @ux/button is deprecated.
      Please use the 'text' prop instead.`);
  }

  const missingText = !(text || children);
  const missingLabel = !(props['aria-label'] || props['aria-labelledby']);

  if (icon && missingText && missingLabel) {
    console.warn(`Warning: Buttons may not be accessible containing only an icon,
      consider adding the 'aria-label' or 'aria-labelledby' prop to the @ux/button.`);
  }
}

function getDecorations(as, href) {
  const prepareIcon = {
    className: `${UX_BUTTON_CLASSNAME}-accessory`,
    role: 'presentation'
  };
  const decorations = {};

  switch (as) {
    case 'cta':
      decorations.icon = /*#__PURE__*/_react.default.createElement(_linkArrow.default, prepareIcon);
      break;

    case 'external':
      decorations.icon = /*#__PURE__*/_react.default.createElement(_windowNew.default, prepareIcon);
      break;

    default:
      break;
  }

  if (href) {
    return decorations;
  }

  switch (as) {
    case 'select':
      decorations.icon = /*#__PURE__*/_react.default.createElement(_chevronDown.default, prepareIcon);
      decorations.ariaActiveAttr = 'aria-expanded';
      break;

    case 'toggle':
      decorations.ariaActiveAttr = 'aria-checked';
      decorations.role = 'switch';
      break;

    default:
      decorations.ariaActiveAttr = 'aria-selected';
  }

  return decorations;
}

const Button = /*#__PURE__*/_react.default.forwardRef(function Button(props, ref) {
  const _ref = props || {},
        {
    active,
    as,
    className,
    children,
    design,
    download,
    external,
    hidden,
    href,
    icon,
    size,
    text,
    type = 'button'
  } = _ref,
        rest = (0, _objectWithoutProperties2.default)(_ref, _excluded); // Style explicitly omitted, do not override


  delete rest.style;
  warn(props);
  const TagName = href ? 'a' : 'button';
  const content = children && !text ? children : text;
  const decorations = getDecorations(as, href);
  const uxTextClasses = (0, _classes.default)({
    as: design !== 'inline' ? 'action' : null,
    size: size === 'small' ? -1 : 0
  });
  let iconComponent;

  if (icon) {
    const iconClassName = (0, _classnames.default)(`${UX_BUTTON_CLASSNAME}-icon`, icon.props.className);
    iconComponent = /*#__PURE__*/_react.default.cloneElement(icon, {
      className: iconClassName,
      role: 'presentation'
    });
  }

  return /*#__PURE__*/_react.default.createElement(TagName, (0, _extends2.default)({}, typeof active === 'boolean' && {
    [decorations.ariaActiveAttr]: active
  }, {
    className: (0, _classnames.default)(UX_BUTTON_CLASSNAME, className, uxTextClasses, {
      [`${UX_BUTTON_CLASSNAME}-${design}`]: designs.includes(design),
      [`${UX_BUTTON_CLASSNAME}-square`]: !content
    }),
    download: href && download,
    "aria-hidden": hidden,
    href: href,
    role: decorations.role,
    target: href && external ? '_blank' : null,
    type: !href ? type : null,
    ref: ref
  }, rest), iconComponent, content && /*#__PURE__*/_react.default.createElement("span", {
    className: `${UX_BUTTON_CLASSNAME}-text`
  }, content), decorations.icon);
});

Button.designs = designs;
Button.propTypes = {
  /** DEPRECATED prop to render children elements */
  children: _propTypes.default.node,

  /** Boolean for a11y support */
  active: _propTypes.default.bool,

  /** Displays the button with different properties and a11y support */
  as: _propTypes.default.oneOf(['cta', 'select', 'toggle', 'external']),

  /** Classes applied to a button for positioning purposes */
  className: _propTypes.default.string,

  /** Visual style of the component */
  design: _propTypes.default.oneOf(Button.designs),

  /** Allows for link to be downloadable and take optional download file name */
  download: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.string]),

  /** Link opens in a new tab/page */
  external: _propTypes.default.bool,

  /** Determines if the button should be visually hidden */
  hidden: _propTypes.default.bool,

  /** Uri for where a button links to, which turns a button into an <a> tag */
  href: _propTypes.default.string,

  /** Optional icon from @ux/icon for the button, appears on the left */
  // eslint-disable-next-line valid-jsdoc
  icon: function isIcon(props, propName, componentName) {
    return componentName.endsWith('Icon');
  },

  /** Id applied to a button */

  /** Size of the button */
  size: _propTypes.default.oneOf(['small']),

  /** Contents of the button */
  text: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),

  /** Button type */
  type: _propTypes.default.oneOf(['button', 'reset', 'submit'])
};
var _default = Button;
exports.default = _default;