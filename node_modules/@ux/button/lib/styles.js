"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _linaria = require("linaria");

var _intentsConfig = _interopRequireDefault(require("./intents.config.js"));

var _default = "s2h4jrs";
exports.default = _default;

function createExpressionStyles(expression) {
  let {
    withBaseStyle,
    withInteraction
  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  const category = `uxButton${expression}`;
  const hovered = withInteraction ? `${category}Hovered` : category;
  const chosen = withInteraction ? `${category}Chosen` : category;
  return `
    ${withBaseStyle ? getDefaultStyles(category) : ''}
    ${getHoverStyles(hovered)}
    ${getChosenStyles(chosen)}
  `;
}

const baseValues = {
  backgroundColor: 'transparent',
  foregroundColor: 'inherit',
  borderColor: 'transparent'
};

function getDefaultStyles(category) {
  const {
    backgroundColor,
    foregroundColor,
    borderColor
  } = _intentsConfig.default[category] || baseValues;
  return `
    background-color: ${backgroundColor};
    color: ${foregroundColor};
    border-color: ${borderColor};
  `;
}

function getHoverStyles(hovered) {
  const {
    backgroundColor,
    foregroundColor,
    borderColor
  } = _intentsConfig.default[hovered] || baseValues;
  return `
    &:not([disabled]):hover {
      background-color: ${backgroundColor};
      color: ${foregroundColor};
      border-color: ${borderColor};
    }
  `;
}

function getChosenStyles(chosen) {
  const {
    backgroundColor,
    foregroundColor,
    borderColor
  } = _intentsConfig.default[chosen] || baseValues;
  return `
    &:not([disabled]):active,
    &:not([disabled])[aria-checked="true"],
    &:not([disabled])[aria-expanded="true"],
    &:not([disabled])[aria-selected="true"] {
      background-color: ${backgroundColor};
      color: ${foregroundColor};
      border-color: ${borderColor};
    }
  `;
}