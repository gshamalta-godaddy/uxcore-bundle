/* eslint-disable no-process-env, no-console */
import React from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import ChevronIcon from '@ux/icon/chevron-down';
import LinkArrowIcon from '@ux/icon/link-arrow';
import textClasses from '@ux/text/classes';
import WindowNewIcon from '@ux/icon/window-new';

const UX_BUTTON_CLASSNAME = 'ux-button';

const designs = [
  'critical',
  'inline',
  'primary',
  'secondary',
  'control',
  'stateless'
];

function warn(props) {
  const {
    children,
    icon,
    text
  } = props;

  if (process.env.NODE_ENV === 'production') return;

  if (children) {
    console.warn(`Warning: The use of children elements within @ux/button is deprecated.
      Please use the 'text' prop instead.`);
  }

  const missingText = !(text || children);
  const missingLabel = !(props['aria-label'] || props['aria-labelledby']);
  if (icon && missingText && missingLabel) {
    console.warn(`Warning: Buttons may not be accessible containing only an icon,
      consider adding the 'aria-label' or 'aria-labelledby' prop to the @ux/button.`);
  }
}

function getDecorations(as, href) {
  const prepareIcon = {
    className: `${UX_BUTTON_CLASSNAME}-accessory`,
    role: 'presentation'
  };

  const decorations = {};

  switch (as) {
    case 'cta':
      decorations.icon = <LinkArrowIcon { ...prepareIcon }/>;
      break;
    case 'external':
      decorations.icon = <WindowNewIcon { ...prepareIcon }/>;
      break;
    default:
      break;
  }

  if (href) {
    return decorations;
  }

  switch (as) {
    case 'select':
      decorations.icon = <ChevronIcon { ...prepareIcon }/>;
      decorations.ariaActiveAttr = 'aria-expanded';
      break;
    case 'toggle':
      decorations.ariaActiveAttr = 'aria-checked';
      decorations.role = 'switch';
      break;
    default:
      decorations.ariaActiveAttr = 'aria-selected';
  }
  return decorations;
}

const Button = React.forwardRef(function Button(props, ref) {

  const {
    active,
    as,
    className,
    children,
    design,
    download,
    external,
    hidden,
    href,
    icon,
    size,
    text,
    type = 'button',
    ...rest
  } = props || {};

  // Style explicitly omitted, do not override
  delete rest.style;

  warn(props);

  const TagName = href ? 'a' : 'button';

  const content = (children && !text) ? children : text;
  const decorations = getDecorations(as, href);
  const uxTextClasses = textClasses({ as: design !== 'inline' ? 'action' : null, size: size === 'small' ? -1 : 0 });

  let iconComponent;
  if (icon) {
    const iconClassName = classnames(`${UX_BUTTON_CLASSNAME}-icon`, icon.props.className);
    iconComponent = React.cloneElement(icon, { className: iconClassName, role: 'presentation' });
  }

  return <TagName
    { ...(typeof active === 'boolean' && { [decorations.ariaActiveAttr]: active }) }
    className={ classnames(UX_BUTTON_CLASSNAME, className, uxTextClasses, {
      [`${UX_BUTTON_CLASSNAME}-${design}`]: designs.includes(design),
      [`${UX_BUTTON_CLASSNAME}-square`]: !content
    }) }
    download={ href && download }
    aria-hidden={ hidden }
    href={ href }
    role={ decorations.role }
    target={ href && external ? '_blank' : null }
    type={ !href ? type : null }
    ref={ ref }
    { ...rest }>
    { iconComponent }
    { content && <span className={ `${UX_BUTTON_CLASSNAME}-text` }>{ content }</span> }
    { decorations.icon }
  </TagName>;

});

Button.designs = designs;

Button.propTypes = {
  /** DEPRECATED prop to render children elements */
  children: PropTypes.node,
  /** Boolean for a11y support */
  active: PropTypes.bool,
  /** Displays the button with different properties and a11y support */
  as: PropTypes.oneOf(['cta', 'select', 'toggle', 'external']),
  /** Classes applied to a button for positioning purposes */
  className: PropTypes.string,
  /** Visual style of the component */
  design: PropTypes.oneOf(Button.designs),
  /** Allows for link to be downloadable and take optional download file name */
  download: PropTypes.oneOfType([
    PropTypes.bool,
    PropTypes.string
  ]),
  /** Link opens in a new tab/page */
  external: PropTypes.bool,
  /** Determines if the button should be visually hidden */
  hidden: PropTypes.bool,
  /** Uri for where a button links to, which turns a button into an <a> tag */
  href: PropTypes.string,
  /** Optional icon from @ux/icon for the button, appears on the left */
  // eslint-disable-next-line valid-jsdoc
  icon: function isIcon(props, propName, componentName) { return componentName.endsWith('Icon'); },
  /** Id applied to a button */
  /** Size of the button */
  size: PropTypes.oneOf(['small']),
  /** Contents of the button */
  text: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.number
  ]),
  /** Button type */
  type: PropTypes.oneOf(['button', 'reset', 'submit'])
};

export default Button;
