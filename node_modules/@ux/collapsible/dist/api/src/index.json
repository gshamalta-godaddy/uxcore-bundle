[
  {
    "description": "A single collapsible panel.\n\n@displayName Collapsible (Web)\n@class Panel\n@public",
    "displayName": "Panel",
    "methods": [
      {
        "name": "id",
        "docblock": "Generate a generic id from the title.\n\n@returns {string} A generated id attribute.\n@private",
        "modifiers": [],
        "params": [],
        "returns": {
          "description": "A generated id attribute.",
          "type": {
            "name": "string"
          }
        },
        "description": "Generate a generic id from the title."
      },
      {
        "name": "onClick",
        "docblock": "Handle clicks on the title/button of the collapsible panel, this can be\nused to augment the default behavior if you want to have manual control\nover the open and closing of the panel.\n\n@param {Event} e Browser event.\n@private",
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "description": "Browser event.",
            "type": {
              "name": "Event"
            },
            "optional": false
          }
        ],
        "returns": null,
        "description": "Handle clicks on the title/button of the collapsible panel, this can be\nused to augment the default behavior if you want to have manual control\nover the open and closing of the panel."
      },
      {
        "name": "onKeyDown",
        "docblock": "Handle keyboard events for enter and space on the title/button of the\ncollapsible panel, this can be used to augment the default behavior if you\nwant to have manual control over the open and closing of the panel.\n\n@param {Event} e Browser event.\n@private",
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "description": "Browser event.",
            "type": {
              "name": "Event"
            },
            "optional": false
          }
        ],
        "returns": null,
        "description": "Handle keyboard events for enter and space on the title/button of the\ncollapsible panel, this can be used to augment the default behavior if you\nwant to have manual control over the open and closing of the panel."
      },
      {
        "name": "onEnter",
        "docblock": "We're about to start the open animation. Set the height to 0 so we can\ntrigger transition in the next phase.\n\n@param {HTMLElement} node DOM Node.\n@private",
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "description": "DOM Node.",
            "type": {
              "name": "HTMLElement"
            },
            "optional": false
          }
        ],
        "returns": null,
        "description": "We're about to start the open animation. Set the height to 0 so we can\ntrigger transition in the next phase."
      },
      {
        "name": "onEntering",
        "docblock": "Transition className has added, manipulate the height to trigger it.\n\n@param {HTMLElement} node DOM Node.\n@private",
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "description": "DOM Node.",
            "type": {
              "name": "HTMLElement"
            },
            "optional": false
          }
        ],
        "returns": null,
        "description": "Transition className has added, manipulate the height to trigger it."
      },
      {
        "name": "onEntered",
        "docblock": "Animation has ended, transition class was removed. Remove the height.\n\n@param {HTMLElement} node DOM Node.\n@private",
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "description": "DOM Node.",
            "type": {
              "name": "HTMLElement"
            },
            "optional": false
          }
        ],
        "returns": null,
        "description": "Animation has ended, transition class was removed. Remove the height."
      },
      {
        "name": "onExit",
        "docblock": "We're about to exit, start prepping element for transition.\n\n@param {HTMLElement} node DOM Node.\n@private",
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "description": "DOM Node.",
            "type": {
              "name": "HTMLElement"
            },
            "optional": false
          }
        ],
        "returns": null,
        "description": "We're about to exit, start prepping element for transition."
      },
      {
        "name": "onExiting",
        "docblock": "Transition className was added, manipulate height to trigger it.\n\n@param {HTMLElement} node DOM Node.\n@private",
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "description": "DOM Node.",
            "type": {
              "name": "HTMLElement"
            },
            "optional": false
          }
        ],
        "returns": null,
        "description": "Transition className was added, manipulate height to trigger it."
      },
      {
        "name": "reflow",
        "docblock": "Force the browser to reflow, so it causes a re-render of a given section.\n\n@param {HTMLElement} node A DOM element.\n@private",
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "description": "A DOM element.",
            "type": {
              "name": "HTMLElement"
            },
            "optional": false
          }
        ],
        "returns": null,
        "description": "Force the browser to reflow, so it causes a re-render of a given section."
      }
    ],
    "props": {
      "open": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Render the panel opened or closed."
      },
      "onClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Handler to run when the collapsible heading is clicked."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The element to show inside of the collapsible."
      },
      "title": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "element"
            }
          ]
        },
        "required": true,
        "description": "The title for the collapsible."
      },
      "onKeyDown": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Handler for keyDown events on the collapsible."
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Optional unique identifier for the collapsible, used for ARIA references."
      },
      "indicator": {
        "type": {
          "name": "shape",
          "value": {
            "icon": {
              "name": "elementType",
              "description": "Name of the icon to display.",
              "required": false
            },
            "background": {
              "name": "string",
              "description": "Background class to use.",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Props to pass down to the {@link Indicator} component. No indicator is shown when this prop is omitted."
      },
      "className": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "object"
            },
            {
              "name": "array"
            }
          ]
        },
        "required": false,
        "description": "Optional class name."
      }
    }
  }
]