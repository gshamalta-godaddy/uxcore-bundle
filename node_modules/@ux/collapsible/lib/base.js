"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = require("react");

var _propTypes = _interopRequireDefault(require("prop-types"));

/**
 * Panel base class.
 *
 * @public
 */
class Base extends _react.Component {
  constructor(props) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    super(props, ...args);
    this.state = {
      open: !!this.props.open
    };
    this.onClick = this.onClick.bind(this);
  }
  /**
   * When rendering the component as child of a different component, it can be
   * that this parent component wants to set a new open/close state on the
   * component. We need to correctly process these props and set the correct
   * open state again.
   *
   * @param {Object} prevProps THe previous props.
   * @private
   */


  componentDidUpdate(prevProps) {
    if (this.props.open !== prevProps.open) {
      this.setState({
        open: this.props.open
      });
    }
  }

}
/**
 * Property validation.
 *
 * @type {Object}
 * @public
 */


exports.default = Base;
Base.propTypes = {
  /** Render the panel opened or closed. */
  open: _propTypes.default.bool,

  /** Handler to run when the collapsible heading is clicked. */
  onClick: _propTypes.default.func,

  /** The element to show inside of the collapsible. */
  children: _propTypes.default.node,

  /** The title for the collapsible. */
  title: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.element]).isRequired,

  /** Optional visual status indicator. */
  indicator: _propTypes.default.object
};