"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactTransitionGroup = require("react-transition-group");

var _chevronDown = _interopRequireDefault(require("@ux/icon/chevron-down"));

var _indicator = _interopRequireDefault(require("./indicator"));

var _classNames = _interopRequireDefault(require("@ux/component-utilities/lib/classNames"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * A single collapsible panel.
 *
 * @displayName Collapsible (Web)
 * @class Panel
 * @public
 */
class Panel extends _react.Component {
  constructor(props) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    super(props, ...args);
    this.state = {
      open: !!this.props.open
    };
    this.elements = {};
    this.onClick = this.onClick.bind(this);
    this.onKeyDown = this.onKeyDown.bind(this);
  }
  /**
   * When rendering the component as child of a different component, it can be
   * that this parent component wants to set a new open/close state on the
   * component. We need to correctly process these props and set the correct
   * open state again.
   *
   * @param {Object} prevProps THe previous props.
   * @private
   */


  componentDidUpdate(prevProps) {
    if (this.props.open !== prevProps.open) {
      this.setState({
        open: this.props.open
      });
    }
  }
  /**
   * Generate a generic id from the title.
   *
   * @returns {string} A generated id attribute.
   * @private
   */


  id() {
    if (this.props.id) return this.props.id;
    return this.props.title.toLowerCase().replace(/[\s]/g, '-');
  }
  /**
   * Handle clicks on the title/button of the collapsible panel, this can be
   * used to augment the default behavior if you want to have manual control
   * over the open and closing of the panel.
   *
   * @param {Event} e Browser event.
   * @private
   */


  onClick(e) {
    e.preventDefault();
    const open = !this.state.open;

    if (typeof this.props.onClick === 'function') {
      if (this.props.onClick(e, open) !== false) {
        this.setState({
          open
        });
      }

      return;
    }

    this.setState({
      open
    });
  }
  /**
   * Handle keyboard events for enter and space on the title/button of the
   * collapsible panel, this can be used to augment the default behavior if you
   * want to have manual control over the open and closing of the panel.
   *
   * @param {Event} e Browser event.
   * @private
   */


  onKeyDown(e) {
    const code = e.key;

    if (e.type === 'keydown' && (code === 'Enter' || code === ' ')) {
      this.onClick(e);
    }
  }
  /**
   * We're about to start the open animation. Set the height to 0 so we can
   * trigger transition in the next phase.
   *
   * @param {HTMLElement} node DOM Node.
   * @private
   */


  onEnter(node) {
    node.style.height = 0;
  }
  /**
   * Transition className has added, manipulate the height to trigger it.
   *
   * @param {HTMLElement} node DOM Node.
   * @private
   */


  onEntering(node) {
    node.style.height = node.scrollHeight + 'px';
  }
  /**
   * Animation has ended, transition class was removed. Remove the height.
   *
   * @param {HTMLElement} node DOM Node.
   * @private
   */


  onEntered(node) {
    node.style.height = '';
  }
  /**
   * We're about to exit, start prepping element for transition.
   *
   * @param {HTMLElement} node DOM Node.
   * @private
   */


  onExit(node) {
    node.style.height = node.offsetHeight + 'px';
    this.reflow(node);
  }
  /**
   * Transition className was added, manipulate height to trigger it.
   *
   * @param {HTMLElement} node DOM Node.
   * @private
   */


  onExiting(node) {
    node.style.height = 0;
  }
  /**
   * Force the browser to reflow, so it causes a re-render of a given section.
   *
   * @param {HTMLElement} node A DOM element.
   * @private
   */


  reflow(node) {
    void node.offsetHeight;
  }
  /**
   * Render the collapsible panel.
   *
   * @returns {React.DOM} Panel div.
   * @private
   */


  render() {
    const id = this.id();
    const wrapper = (0, _classNames.default)(this.props.className, 'panel panel-default');
    const indicator = this.props.indicator && !!this.props.indicator.icon && !!this.props.indicator.background;
    const button = (0, _classNames.default)('panel-button', {
      'collapsed': !this.state.open,
      'panel-indicator-shown': indicator
    });
    return /*#__PURE__*/_react.default.createElement("div", {
      className: wrapper
    }, /*#__PURE__*/_react.default.createElement("button", {
      role: "tab",
      className: button,
      id: id,
      "aria-controls": id + '-collapse',
      ref: r => {
        this.elements.header = r;
      },
      onClick: this.onClick,
      onKeyDown: this.onKeyDown,
      "aria-expanded": this.state.open
    }, /*#__PURE__*/_react.default.createElement(_indicator.default, this.props.indicator), /*#__PURE__*/_react.default.createElement("div", {
      className: "panel-title ux-text ux-text-size2 ux-text-title"
    }, this.props.title), /*#__PURE__*/_react.default.createElement("span", {
      className: "panel-icon"
    }, /*#__PURE__*/_react.default.createElement(_chevronDown.default, {
      width: 24,
      height: 24
    }))), /*#__PURE__*/_react.default.createElement(_reactTransitionGroup.CSSTransition, {
      classNames: {
        exitDone: 'collapse',
        exitActive: 'collapsing',
        appear: 'collapse in',
        appearActive: 'collapsing'
      },
      timeout: 350,
      mountOnEnter: true,
      in: this.state.open,
      onExit: this.onExit.bind(this),
      onEnter: this.onEnter.bind(this),
      onEntering: this.onEntering.bind(this),
      onEntered: this.onEntered.bind(this),
      onExiting: this.onExiting.bind(this)
    }, /*#__PURE__*/_react.default.createElement("div", {
      id: id + '-collapse',
      ref: r => {
        this.elements.body = r;
      },
      className: "panel-collapse",
      "aria-labelledby": id,
      role: "tabpanel",
      "aria-hidden": !this.state.open
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "panel-content"
    }, this.props.children))));
  }

}
/**
 * Property validation.
 *
 * @type {Object}
 * @public
 */


exports.default = Panel;
Panel.propTypes = {
  /** Render the panel opened or closed. */
  open: _propTypes.default.bool,

  /** Handler to run when the collapsible heading is clicked. */
  onClick: _propTypes.default.func,

  /** The element to show inside of the collapsible. */
  children: _propTypes.default.node,

  /** The title for the collapsible. */
  title: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.element]).isRequired,

  /** Handler for keyDown events on the collapsible. */
  onKeyDown: _propTypes.default.func,

  /** Optional unique identifier for the collapsible, used for ARIA references. */
  id: _propTypes.default.string,

  /** Props to pass down to the {@link Indicator} component. No indicator is shown when this prop is omitted. */
  indicator: _propTypes.default.shape({
    /** Name of the icon to display. */
    icon: _propTypes.default.elementType,

    /** Background class to use. */
    background: _propTypes.default.string
  }),

  /** Optional class name. */
  className: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object, _propTypes.default.array])
};