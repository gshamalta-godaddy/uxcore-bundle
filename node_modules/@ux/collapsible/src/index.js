import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { CSSTransition } from 'react-transition-group';
import Chev from '@ux/icon/chevron-down';
import Indicator from './indicator';
import classNames from '@ux/component-utilities/lib/classNames';

/**
 * A single collapsible panel.
 *
 * @displayName Collapsible (Web)
 * @class Panel
 * @public
 */
export default class Panel extends Component {
  constructor(props, ...args) {
    super(props, ...args);

    this.state = {
      open: !!this.props.open
    };
    this.elements = {};

    this.onClick = this.onClick.bind(this);
    this.onKeyDown = this.onKeyDown.bind(this);
  }

  /**
   * When rendering the component as child of a different component, it can be
   * that this parent component wants to set a new open/close state on the
   * component. We need to correctly process these props and set the correct
   * open state again.
   *
   * @param {Object} prevProps THe previous props.
   * @private
   */
  componentDidUpdate(prevProps) {
    if (this.props.open !== prevProps.open) {
      this.setState({ open: this.props.open });
    }
  }

  /**
   * Generate a generic id from the title.
   *
   * @returns {string} A generated id attribute.
   * @private
   */
  id() {
    if (this.props.id) return this.props.id;

    return this.props.title.toLowerCase().replace(/[\s]/g, '-');
  }

  /**
   * Handle clicks on the title/button of the collapsible panel, this can be
   * used to augment the default behavior if you want to have manual control
   * over the open and closing of the panel.
   *
   * @param {Event} e Browser event.
   * @private
   */
  onClick(e) {
    e.preventDefault();

    const open = !this.state.open;

    if (typeof this.props.onClick === 'function') {
      if (this.props.onClick(e, open) !== false) {
        this.setState({ open });
      }

      return;
    }

    this.setState({ open });
  }

  /**
   * Handle keyboard events for enter and space on the title/button of the
   * collapsible panel, this can be used to augment the default behavior if you
   * want to have manual control over the open and closing of the panel.
   *
   * @param {Event} e Browser event.
   * @private
   */
  onKeyDown(e) {
    const code = e.key;

    if (e.type === 'keydown' && (code === 'Enter' || code === ' ')) {
      this.onClick(e);
    }
  }

  /**
   * We're about to start the open animation. Set the height to 0 so we can
   * trigger transition in the next phase.
   *
   * @param {HTMLElement} node DOM Node.
   * @private
   */
  onEnter(node) {
    node.style.height = 0;
  }

  /**
   * Transition className has added, manipulate the height to trigger it.
   *
   * @param {HTMLElement} node DOM Node.
   * @private
   */
  onEntering(node) {
    node.style.height = node.scrollHeight + 'px';
  }

  /**
   * Animation has ended, transition class was removed. Remove the height.
   *
   * @param {HTMLElement} node DOM Node.
   * @private
   */
  onEntered(node) {
    node.style.height = '';
  }

  /**
   * We're about to exit, start prepping element for transition.
   *
   * @param {HTMLElement} node DOM Node.
   * @private
   */
  onExit(node) {
    node.style.height = node.offsetHeight + 'px';
    this.reflow(node);
  }

  /**
   * Transition className was added, manipulate height to trigger it.
   *
   * @param {HTMLElement} node DOM Node.
   * @private
   */
  onExiting(node) {
    node.style.height = 0;
  }

  /**
   * Force the browser to reflow, so it causes a re-render of a given section.
   *
   * @param {HTMLElement} node A DOM element.
   * @private
   */
  reflow(node) {
    void node.offsetHeight;
  }

  /**
   * Render the collapsible panel.
   *
   * @returns {React.DOM} Panel div.
   * @private
   */
  render() {
    const id = this.id();
    const wrapper = classNames(this.props.className, 'panel panel-default');
    const indicator = this.props.indicator && !!this.props.indicator.icon && !!this.props.indicator.background;
    const button = classNames('panel-button', {
      'collapsed': !this.state.open,
      'panel-indicator-shown': indicator
    });

    return (
      <div className={ wrapper }>
        <button role='tab'
          className={ button }
          id={ id }
          aria-controls={ id + '-collapse' }
          ref={ r => { this.elements.header = r; } }
          onClick={ this.onClick }
          onKeyDown={ this.onKeyDown }
          aria-expanded={ this.state.open }>
          <Indicator { ...this.props.indicator } />
          <div className='panel-title ux-text ux-text-size2 ux-text-title'>{ this.props.title }</div>
          <span className='panel-icon'>
            <Chev width={ 24 } height={ 24 } />
          </span>
        </button>

        <CSSTransition
          classNames={{
            exitDone: 'collapse',
            exitActive: 'collapsing',
            appear: 'collapse in',
            appearActive: 'collapsing'
          }}
          timeout={ 350 }
          mountOnEnter={ true }
          in={ this.state.open }
          onExit={ this.onExit.bind(this) }
          onEnter={ this.onEnter.bind(this) }
          onEntering={ this.onEntering.bind(this) }
          onEntered={ this.onEntered.bind(this) }
          onExiting={ this.onExiting.bind(this) }>
          <div id={ id + '-collapse' }
            ref={ r => { this.elements.body = r; } }
            className='panel-collapse'
            aria-labelledby={ id }
            role='tabpanel'
            aria-hidden={ !this.state.open }>
            <div className='panel-content'>
              { this.props.children }
            </div>
          </div>
        </CSSTransition>
      </div>
    );
  }
}

/**
 * Property validation.
 *
 * @type {Object}
 * @public
 */
Panel.propTypes = {
  /** Render the panel opened or closed. */
  open: PropTypes.bool,
  /** Handler to run when the collapsible heading is clicked. */
  onClick: PropTypes.func,
  /** The element to show inside of the collapsible. */
  children: PropTypes.node,
  /** The title for the collapsible. */
  title: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.element
  ]).isRequired,
  /** Handler for keyDown events on the collapsible. */
  onKeyDown: PropTypes.func,
  /** Optional unique identifier for the collapsible, used for ARIA references. */
  id: PropTypes.string,
  /** Props to pass down to the {@link Indicator} component. No indicator is shown when this prop is omitted. */
  indicator: PropTypes.shape({
    /** Name of the icon to display. */
    icon: PropTypes.elementType,
    /** Background class to use. */
    background: PropTypes.string
  }),
  /** Optional class name. */
  className: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.object,
    PropTypes.array
  ])
};
