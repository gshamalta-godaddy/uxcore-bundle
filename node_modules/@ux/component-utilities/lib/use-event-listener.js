"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = require("react");

// based on https://github.com/donavon/use-event-listener
const useEventListener = function (eventName, handler, element) {
  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  const savedHandler = (0, _react.useRef)();
  const {
    capture,
    passive,
    once
  } = options; // Use element if passed, or default to window in the browser

  element = element || typeof window !== 'undefined' && window; // Update ref.current value if handler changes.
  // This allows our effect below to always get latest handler ...
  // ... without us needing to pass it in effect deps array ...
  // ... and potentially cause effect to re-run every render.

  (0, _react.useEffect)(() => {
    savedHandler.current = handler;
  }, [handler]);
  (0, _react.useEffect)(() => {
    // Make sure element supports addEventListener
    const isSupported = element && element.addEventListener; // Safety check for SSR - hook becomes noop if addEventListener not on element

    if (!isSupported) {
      return;
    } // Create event listener that calls handler function stored in ref


    const eventListener = event => savedHandler.current(event); // Additional options to support capture, passive, once


    const opts = {
      capture,
      passive,
      once
    }; // Add listener

    element.addEventListener(eventName, eventListener, opts);
    return () => {
      // Remove event listener on cleanup
      element.removeEventListener(eventName, eventListener, opts);
    };
  }, [eventName, element, capture, passive, once]);
};

var _default = useEventListener;
exports.default = _default;