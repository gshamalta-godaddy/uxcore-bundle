import name from 'fn.name';

/**
  * Generate a persistent id so it will be same every single time so it can
  * still be used to link to certain parts in the form. If there is already an
  * `id` provided it will fallback to that.
  *
  * We want to follow the HTML4 specification here to ensure that we generate
  * valid id attributes for every single doc type. HTML5 is less strict about
  * this as it only disallows spaces to be present in the attribute.
  *
  * @param {String} key Fallback key to retrieve from props.
  * @param {ReactElement} context react component from which this function is called
  * @returns {String} The persistent, but semi-unique id.
  * @public
  */
export default function id(key, context) {
  if (typeof context === 'undefined') {
    context = key;
    // eslint-disable-next-line no-undefined
    key = undefined;
  }
  const props = context.props;
  const _name = name(context).toLowerCase();
  let value = (props.id || props[key] || _name).toString().trim();

  // If there are non-ASCII characters, use encodeURIComponent to deterministically replace them
  // eslint-disable-next-line no-control-regex
  value = value.replace(/[^\x00-\x7F]/g, char => {
    return encodeURIComponent(char).replace('%', ':');
  });

  //
  // An id attribute must start with A-Za-z char. If this is not the case
  // we're going to prefix it. Just for clarity we prefix it with the word
  // `id-`
  //
  if (!/^[A-Za-z]/.test(value)) value = 'id-' + value;

  // eslint-disable-next-line no-useless-escape
  return value.replace(/[^A-Za-z\:\;\-\_0-9\.]+/g, '-');
}
