import { useEffect  } from 'react';
import isBrowser from './is-browser';

/**
 * Assign an new event listener to the body element that only triggers if the
 * event target is outside the provided reference DOM Node.
 * Code is referenced from https://usehooks.com/useOnClickOutside/
 *
 * @param {Node|ReactElement} ref Reference to a DOM Node or React Element.
 * @param {Function} handler Completion callback function.
 * @public
 */
export default function useOnClickOutside(ref, handler) {

  /**
   * Trigger the listener if the clicked target does not contain the
   * HTML/Component reference.
   * @private
   */
  useEffect(
    () => {
      if (!isBrowser) return;
      const listener = event => {
        // Do nothing if clicking ref's element or descendent elements
        const composedPath = typeof event.composedPath === 'function' && !Array.from(event.composedPath()).includes(ref.current);
        if (!composedPath || !ref.current || ref.current.contains(event.target)) {
          return;
        }

        handler(event);
      };

      document.addEventListener('mousedown', listener);
      document.addEventListener('touchstart', listener);

      return () => {
        document.removeEventListener('mousedown', listener);
        document.removeEventListener('touchstart', listener);
      };
    },
    [ref, handler]
  );
}
