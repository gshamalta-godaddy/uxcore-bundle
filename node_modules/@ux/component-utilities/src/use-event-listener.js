// based on https://github.com/donavon/use-event-listener

import { useRef, useEffect } from 'react';

const useEventListener = (
  eventName,
  handler,
  element,
  options = {}
) => {
  const savedHandler = useRef();
  const { capture, passive, once } = options;

  // Use element if passed, or default to window in the browser
  element = element || typeof window !== 'undefined' && window;

  // Update ref.current value if handler changes.
  // This allows our effect below to always get latest handler ...
  // ... without us needing to pass it in effect deps array ...
  // ... and potentially cause effect to re-run every render.
  useEffect(() => {
    savedHandler.current = handler;
  }, [handler]);

  useEffect(() => {
    // Make sure element supports addEventListener
    const isSupported = element && element.addEventListener;
    // Safety check for SSR - hook becomes noop if addEventListener not on element
    if (!isSupported) {
      return;
    }

    // Create event listener that calls handler function stored in ref
    const eventListener = (event) => savedHandler.current(event);
    // Additional options to support capture, passive, once
    const opts = { capture, passive, once };

    // Add listener
    element.addEventListener(eventName, eventListener, opts);
    return () => {
      // Remove event listener on cleanup
      element.removeEventListener(eventName, eventListener, opts);
    };
  }, [eventName, element, capture, passive, once]);
};

export default useEventListener;
