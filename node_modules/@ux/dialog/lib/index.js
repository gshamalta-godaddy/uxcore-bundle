"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _classes = _interopRequireDefault(require("@ux/text/classes"));

var _button = _interopRequireDefault(require("@ux/button"));

var _siblingSet = _interopRequireDefault(require("@ux/sibling-set"));

var _x = _interopRequireDefault(require("@ux/icon/x"));

var _accessories = require("./accessories");

const _excluded = ["actions", "ariaLabels", "children", "contrast", "className", "emphasis", "icon", "id", "onClose", "stretch", "title"];
const UX_DIALOG_CLASSNAME = 'ux-dialog';
/**
 * Returns a close button
 *
 * @param {Object} props - Component props
 * @param {Object} [props.ariaLabels] - ARIA label configuration object
 * @param {Function} [props.onClose] - Callback to fire when a user interacts with the button
 * @returns {Button} - Provides the close button
 */

function getCloseButton(_ref) {
  let {
    ariaLabels,
    onClose
  } = _ref;
  if (typeof onClose !== 'function') return null;
  return /*#__PURE__*/_react.default.createElement("span", {
    className: `${UX_DIALOG_CLASSNAME}-float`
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    "aria-label": ariaLabels && ariaLabels.close || 'Close',
    icon: /*#__PURE__*/_react.default.createElement(_x.default, null),
    className: `${UX_DIALOG_CLASSNAME}-close`,
    design: "stateless",
    onClick: onClose
  }));
}
/**
 * Determines the icon based on emphasis
 *
 * @param {String} emphasis - One of several possible emphasis types
 * @returns {Component} - An icon based on given emphasis type
 */


function getEmphasisIcon(emphasis) {
  if (emphasis && _accessories.ACCESSORIES[emphasis]) {
    const Accessory = _accessories.ACCESSORIES[emphasis];
    return /*#__PURE__*/_react.default.createElement(Accessory, {
      className: `${UX_DIALOG_CLASSNAME}-accessory--${emphasis}`,
      role: "presentation"
    });
  }

  return null;
}
/**
 * Prepares the icon for the dialog
 *
 * @param {Object} props - Component props
 * @param {Boolean} [props.emphasis] - Provide emphasis for the component
 * @param {Component} [props.icon] - Adds icon component
 * @returns {Component} - <Icon/> component
 */


function Icon(props) {
  const {
    emphasis,
    icon
  } = props || {};
  const className = `${UX_DIALOG_CLASSNAME}-icon`;
  if (emphasis) return /*#__PURE__*/_react.default.createElement("div", {
    className: className
  }, getEmphasisIcon(emphasis));
  if (icon) return /*#__PURE__*/_react.default.createElement("div", {
    className: className
  }, /*#__PURE__*/_react.default.cloneElement(icon, {
    role: 'presentation'
  }));
  return null;
}
/**
 * Creates a Dialog component
 *
 * @param {Object} props - Component props
 * @param {Components} [props.actions] - Actions as @ux/button components
 * @param {Object} [props.ariaLabels] - ARIA label configuration object
 * @param {Elements} props.children - Content for the component
 * @param {String} [props.className] - Adds a className
 * @param {Boolean} [props.contrast] - Provides a contrast overlay to the component
 * @param {Boolean} [props.emphasis] - Provide emphasis for the component
 * @param {Component} [props.icon] - Adds icon component
 * @param {String} props.id - Assigns title to component for a11y
 * @param {Function} [props.onClose] - Callback to fire when a user interacts with the button
 * @param {Boolean|Number} [props.padding] - Adds padding to container
 * @param {Boolean} [props.stretch] - Stretches full width of container
 * @param {Component} props.title - Title of the component, using @ux/text
 * @returns {Component} - <Dialog/> component
 */


function Dialog(props) {
  const {
    actions,
    ariaLabels,
    children,
    contrast,
    className,
    emphasis,
    icon,
    id,
    onClose,
    stretch,
    title
  } = props,
        rest = (0, _objectWithoutProperties2.default)(props, _excluded);
  delete rest.style;
  return /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({
    className: (0, _classnames.default)(`${UX_DIALOG_CLASSNAME}-shell`, className, (0, _classes.default)(), {
      [`${UX_DIALOG_CLASSNAME}--contrast`]: contrast,
      [`${UX_DIALOG_CLASSNAME}--stretch`]: stretch
    }),
    "aria-labelledby": id
  }, rest), /*#__PURE__*/_react.default.createElement(Icon, {
    emphasis: emphasis,
    icon: icon
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: `${UX_DIALOG_CLASSNAME}-details`
  }, getCloseButton({
    onClose,
    ariaLabels
  }), title && /*#__PURE__*/_react.default.createElement("div", {
    id: id,
    className: `${UX_DIALOG_CLASSNAME}-title`
  }, title), /*#__PURE__*/_react.default.createElement("div", {
    className: `${UX_DIALOG_CLASSNAME}-content`
  }, children), actions && /*#__PURE__*/_react.default.createElement(_siblingSet.default, {
    gap: "md",
    orientation: "horizontal",
    className: `${UX_DIALOG_CLASSNAME}-actions`
  }, actions)));
}

Dialog.ACCESSORIES = _accessories.ACCESSORIES;
Dialog.propTypes = {
  /** Adds actions */
  actions: _propTypes.default.node,

  /** Screenreader labels for sub-elements */
  ariaLabels: _propTypes.default.shape({
    /** Screen reader label for close button */
    close: _propTypes.default.string
  }),

  /** Provides a contrast overlay to the component */
  contrast: _propTypes.default.bool,

  /** Class name applied to component */
  className: _propTypes.default.string,

  /** Additional detail content */
  children: _propTypes.default.node,

  /** Describes the importance of the message */
  emphasis: _propTypes.default.oneOf(Object.keys(_accessories.ACCESSORIES)),

  /** Adds icon to the title */
  // eslint-disable-next-line valid-jsdoc
  icon: function isIcon(props, propName, componentName) {
    return componentName.endsWith('Icon');
  },

  /** Assigns title to component for a11y */
  id: _propTypes.default.string,

  /** Callback function when component is closed */
  onClose: _propTypes.default.func,

  /** Stretches full width of container */
  stretch: _propTypes.default.bool,

  /** Adds title with @ux/text */
  title: _propTypes.default.node
};
var _default = Dialog;
exports.default = _default;