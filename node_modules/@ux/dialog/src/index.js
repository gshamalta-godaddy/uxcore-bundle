import React from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import textClasses from '@ux/text/classes';
import Button from '@ux/button';
import SiblingSet from '@ux/sibling-set';
import XIcon from '@ux/icon/x';
import { ACCESSORIES } from './accessories';

const UX_DIALOG_CLASSNAME = 'ux-dialog';

/**
 * Returns a close button
 *
 * @param {Object} props - Component props
 * @param {Object} [props.ariaLabels] - ARIA label configuration object
 * @param {Function} [props.onClose] - Callback to fire when a user interacts with the button
 * @returns {Button} - Provides the close button
 */
function getCloseButton({ ariaLabels, onClose }) {
  if (typeof onClose !== 'function') return null;
  return <span className={ `${UX_DIALOG_CLASSNAME}-float` }>
    <Button
      aria-label={ (ariaLabels && ariaLabels.close) || 'Close' }
      icon={ <XIcon/> }
      className={ `${UX_DIALOG_CLASSNAME}-close` }
      design='stateless'
      onClick={ onClose } />
  </span>;
}

/**
 * Determines the icon based on emphasis
 *
 * @param {String} emphasis - One of several possible emphasis types
 * @returns {Component} - An icon based on given emphasis type
 */
function getEmphasisIcon(emphasis) {
  if (emphasis && ACCESSORIES[emphasis]) {
    const Accessory = ACCESSORIES[emphasis];
    return <Accessory className={ `${UX_DIALOG_CLASSNAME}-accessory--${emphasis}` } role='presentation' />;
  }
  return null;
}

/**
 * Prepares the icon for the dialog
 *
 * @param {Object} props - Component props
 * @param {Boolean} [props.emphasis] - Provide emphasis for the component
 * @param {Component} [props.icon] - Adds icon component
 * @returns {Component} - <Icon/> component
 */
function Icon(props) {
  const { emphasis, icon } = props || {};
  const className = `${UX_DIALOG_CLASSNAME}-icon`;
  if (emphasis) return <div className={ className }>{ getEmphasisIcon(emphasis) }</div>;
  if (icon) return <div className={ className }>{ React.cloneElement(icon, { role: 'presentation' }) }</div>;
  return null;
}

/**
 * Creates a Dialog component
 *
 * @param {Object} props - Component props
 * @param {Components} [props.actions] - Actions as @ux/button components
 * @param {Object} [props.ariaLabels] - ARIA label configuration object
 * @param {Elements} props.children - Content for the component
 * @param {String} [props.className] - Adds a className
 * @param {Boolean} [props.contrast] - Provides a contrast overlay to the component
 * @param {Boolean} [props.emphasis] - Provide emphasis for the component
 * @param {Component} [props.icon] - Adds icon component
 * @param {String} props.id - Assigns title to component for a11y
 * @param {Function} [props.onClose] - Callback to fire when a user interacts with the button
 * @param {Boolean|Number} [props.padding] - Adds padding to container
 * @param {Boolean} [props.stretch] - Stretches full width of container
 * @param {Component} props.title - Title of the component, using @ux/text
 * @returns {Component} - <Dialog/> component
 */
function Dialog(props) {
  const {
    actions,
    ariaLabels,
    children,
    contrast,
    className,
    emphasis,
    icon,
    id,
    onClose,
    stretch,
    title,
    ...rest
  } = props;

  delete rest.style;

  return (
    <div
      className={ classnames(`${UX_DIALOG_CLASSNAME}-shell`, className, textClasses(), {
        [`${UX_DIALOG_CLASSNAME}--contrast`]: contrast,
        [`${UX_DIALOG_CLASSNAME}--stretch`]: stretch
      }) }
      aria-labelledby={ id }
      { ...rest }>

      <Icon emphasis={ emphasis } icon={ icon } />

      <div className={ `${UX_DIALOG_CLASSNAME}-details` }>
        { getCloseButton({ onClose, ariaLabels }) }
        { title && <div id={ id } className={ `${UX_DIALOG_CLASSNAME}-title` }>{ title }</div> }

        <div className={ `${UX_DIALOG_CLASSNAME}-content` }>{ children }</div>

        { actions && <SiblingSet gap='md' orientation='horizontal' className={ `${UX_DIALOG_CLASSNAME}-actions` }>
          { actions }
        </SiblingSet> }
      </div>
    </div>
  );

}

Dialog.ACCESSORIES = ACCESSORIES;

Dialog.propTypes = {
  /** Adds actions */
  actions: PropTypes.node,
  /** Screenreader labels for sub-elements */
  ariaLabels: PropTypes.shape({
    /** Screen reader label for close button */
    close: PropTypes.string
  }),
  /** Provides a contrast overlay to the component */
  contrast: PropTypes.bool,
  /** Class name applied to component */
  className: PropTypes.string,
  /** Additional detail content */
  children: PropTypes.node,
  /** Describes the importance of the message */
  emphasis: PropTypes.oneOf(Object.keys(ACCESSORIES)),
  /** Adds icon to the title */
  // eslint-disable-next-line valid-jsdoc
  icon: function isIcon(props, propName, componentName) { return componentName.endsWith('Icon'); },
  /** Assigns title to component for a11y */
  id: PropTypes.string,
  /** Callback function when component is closed */
  onClose: PropTypes.func,
  /** Stretches full width of container */
  stretch: PropTypes.bool,
  /** Adds title with @ux/text */
  title: PropTypes.node
};

export default Dialog;
