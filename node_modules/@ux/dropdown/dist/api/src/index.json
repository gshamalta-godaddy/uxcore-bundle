[
  {
    "description": "Display a Dropdown that works standalone button, as select or multiselect.\n\n@displayName Dropdown (Web)\n@class Dropdown\n@extends React.Component\n@public",
    "displayName": "DropdownComponent",
    "methods": [
      {
        "name": "focusDropdown",
        "docblock": "Added this to force focus to the dropdown when the label is clicked.\n\n@private",
        "modifiers": [],
        "params": [],
        "returns": null,
        "description": "Added this to force focus to the dropdown when the label is clicked."
      },
      {
        "name": "getElementBounds",
        "docblock": "Fetches all element bounds to necessary calculations of display\n@private\n@returns {object} element bounds",
        "modifiers": [],
        "params": [],
        "returns": {
          "description": "element bounds",
          "type": {
            "name": "object"
          }
        },
        "description": "Fetches all element bounds to necessary calculations of display"
      },
      {
        "name": "getVerticalRender",
        "docblock": "Compute vertical spacing for menu and determine whether to show above or below the dropdown control.\n\n@param {object} bounds - Object containing element bounds calculated in getElementBounds()\n@returns {obbject} Temporary updated state object\n@private",
        "modifiers": [],
        "params": [
          {
            "name": "bounds",
            "description": "Object containing element bounds calculated in getElementBounds()",
            "type": {
              "name": "object"
            },
            "optional": false
          }
        ],
        "returns": {
          "description": "Temporary updated state object",
          "type": {
            "name": "obbject"
          }
        },
        "description": "Compute vertical spacing for menu and determine whether to show above or below the dropdown control."
      },
      {
        "name": "getHorizontalRender",
        "docblock": "Compute horizontal spacing for menu and determine whether to show aligned left or right to the dropdown control.\n\n@param {object} bounds - Object containing menu bounds calculated in getElementBounds()\n@returns {object} Temporary updated state object\n@private",
        "modifiers": [],
        "params": [
          {
            "name": "bounds",
            "description": "Object containing menu bounds calculated in getElementBounds()",
            "type": {
              "name": "object"
            },
            "optional": false
          }
        ],
        "returns": {
          "description": "Temporary updated state object",
          "type": {
            "name": "object"
          }
        },
        "description": "Compute horizontal spacing for menu and determine whether to show aligned left or right to the dropdown control."
      },
      {
        "name": "toggleBackground",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "isOpen",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "control",
        "docblock": "Extract DropdownControl from all children.\n\n@param {React.Element[]} children - React elements.\n@returns {React.Element} DropdownControl with children.\n@private",
        "modifiers": [],
        "params": [
          {
            "name": "children",
            "description": "React elements.",
            "type": {
              "name": "Array",
              "elements": [
                {
                  "name": "React.Element"
                }
              ]
            },
            "optional": false
          }
        ],
        "returns": {
          "description": "DropdownControl with children.",
          "type": {
            "name": "React.Element"
          }
        },
        "description": "Extract DropdownControl from all children."
      },
      {
        "name": "items",
        "docblock": "Returns all children that are not of type DropdownControl.\n\n@param {React.Element[]} children - React elements.\n@returns {React.Element[]} React elements.\n@private",
        "modifiers": [],
        "params": [
          {
            "name": "children",
            "description": "React elements.",
            "type": {
              "name": "Array",
              "elements": [
                {
                  "name": "React.Element"
                }
              ]
            },
            "optional": false
          }
        ],
        "returns": {
          "description": "React elements.",
          "type": {
            "name": "Array",
            "elements": [
              {
                "name": "React.Element"
              }
            ]
          }
        },
        "description": "Returns all children that are not of type DropdownControl."
      },
      {
        "name": "DropdownDivider",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [],
        "returns": null
      },
      {
        "name": "DropdownHeader",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "{ children }",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "children": {
        "type": {
          "name": "custom",
          "raw": "validateComponents([\n  DropdownControl,\n  DropdownItem,\n  DropdownDivider,\n  DropdownHeader\n])"
        },
        "required": false,
        "description": "Children components of a dropdown. Can be a DropdownControl,\n DropdownDivider, DropdownHeader, or DropdownItem"
      },
      "open": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": ""
      },
      "show": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      },
      "hide": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      },
      "required": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "node"
            },
            {
              "name": "bool"
            }
          ]
        },
        "required": false,
        "description": "Error message to show if the dropdown is required"
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "onToggle": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "type": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": "types"
        },
        "required": false,
        "description": "Type of the dropdown",
        "defaultValue": {
          "value": "'button'",
          "computed": false
        }
      },
      "content": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "element"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": ""
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "placeholder": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": ""
      },
      "label": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": ""
      },
      "toggleIcon": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'clock'",
              "computed": false
            },
            {
              "value": "'dropdown'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": ""
      },
      "selected": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "array"
            }
          ]
        },
        "required": false,
        "description": ""
      },
      "defaultSelected": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "array"
            }
          ]
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "ID attribute for the dropdown container"
      },
      "contextmenu": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": ""
      },
      "tabIndex": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "-1",
              "computed": true
            },
            {
              "value": "0",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Developer indicates tabIndex"
      },
      "elementType": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Wrapper element type for the dropdown",
        "defaultValue": {
          "value": "'div'",
          "computed": false
        }
      },
      "alignment": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": "alignmentValues"
        },
        "required": false,
        "description": "Alignment of the dropdown menu"
      },
      "enableFullscreen": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Boolean whether the dropdown menu is fullscreen (mobile only)",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "ariaLabels": {
        "type": {
          "name": "shape",
          "value": {
            "close": {
              "name": "string",
              "description": "Label for mobile-view menu close button",
              "required": false
            },
            "menu": {
              "name": "string",
              "description": "Label for dropdown-menu that contains the selectable items",
              "required": false
            },
            "label": {
              "name": "string",
              "description": "Label for .ux-dropdown-menu which is the outer container of dropdown",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Screenreader labels for sub-elements",
        "defaultValue": {
          "value": "{\n  close: 'Close',\n  menu: 'Menu Options',\n  label: 'Menu'\n}",
          "computed": false
        }
      }
    }
  },
  {
    "description": "",
    "methods": []
  },
  {
    "description": "Create divider which visually seperates DropdownItems.\n\n@function DropdownDivider\n@returns {React.ReactComponent} DropdownDivider\n@displayName DropdownDivider (Web)\n@public",
    "displayName": "DropdownDivider",
    "methods": []
  },
  {
    "description": "Create a header which can highlight a set of DropdownItems.\n\n@class DropdownHeader\n@displayName DropdownHeader (Web)\n@public",
    "displayName": "DropdownHeader",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "Contents of a dropdown header"
      }
    }
  },
  {
    "description": "Create an item, which receive a checkbox element if the type is multiselect.\n\n@class DropdownItem\n@displayName DropdownItem (Web)\n@public",
    "displayName": "DropdownItem",
    "methods": [
      {
        "name": "getRef",
        "docblock": "Get reference to the dropdown item (either DropdownItem or CheckboxItem)\n@returns {Object} Dropdown Item reference",
        "modifiers": [],
        "params": [],
        "returns": {
          "description": "Dropdown Item reference",
          "type": {
            "name": "Object"
          }
        },
        "description": "Get reference to the dropdown item (either DropdownItem or CheckboxItem)"
      }
    ],
    "props": {
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Boolean for whether dropdown item is disabled"
      },
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Boolean for whether dropdown item is active"
      },
      "type": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Type of dropdown item"
      },
      "href": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Url for dropdown item when clicked"
      },
      "isSelected": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Boolean for whether dropdown item is selected"
      },
      "tabIndex": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "-1",
              "computed": true
            },
            {
              "value": "0",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Developer indicates tabIndex, default is 0",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      }
    }
  }
]