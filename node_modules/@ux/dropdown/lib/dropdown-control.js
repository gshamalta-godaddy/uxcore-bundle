"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _chevronDown = _interopRequireDefault(require("@ux/icon/chevron-down"));

var _ellipsis = _interopRequireDefault(require("@ux/icon/ellipsis"));

var _react = _interopRequireWildcard(require("react"));

var _classNames = _interopRequireDefault(require("@ux/component-utilities/lib/classNames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _clock = _interopRequireDefault(require("@ux/icon/clock"));

var _button = _interopRequireDefault(require("@ux/button"));

var _ripOut = _interopRequireDefault(require("rip-out"));

const _excluded = ["type", "toggle", "ariaLabels", "aria-controls", "id"],
      _excluded2 = ["type", "className", "toggle", "split", "id", "ariaLabels", "forwardedRef"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

/**
 * Create a triple dot icon.
 *
 * @function TripleDot
 * @returns {React.ReactElement} tripledot element
 * @private
 */
function TripleDot() {
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "tripledot"
  }, /*#__PURE__*/_react.default.createElement(_ellipsis.default, {
    width: 20,
    height: 20
  }));
}
/**
 * Create two buttons rendered as split dropdown.
 *
 * @function DropdownSplit
 * @returns {React.ReactElement} split button element
 * @private
 */


function DropdownSplit(_ref) {
  let {
    type,
    toggle,
    ariaLabels,
    'aria-controls': ariaControls,
    id
  } = _ref,
      other = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "btn-group"
  }, /*#__PURE__*/_react.default.createElement(_button.default, (0, _extends2.default)({}, other, {
    design: _button.default.designs.includes(type) ? type : null,
    className: "dropdown-split"
  })), /*#__PURE__*/_react.default.createElement(_button.default, {
    id: id,
    "aria-haspopup": "listbox",
    "aria-controls": ariaControls,
    design: _button.default.designs.includes(type) ? type : null,
    onClick: toggle,
    className: "dropdown-toggle dropdown-toggle-split btn-dropdown",
    as: "select",
    "aria-label": ariaLabels.dropdownButton
  }));
}
/**
 * Type property of split dropdown.
 *
 * @enum {Object} propTypes
 * @public
 */


DropdownSplit.propTypes = {
  'toggle': _propTypes.default.func,
  'type': _propTypes.default.string,
  'aria-controls': _propTypes.default.string,
  'ariaLabels': _propTypes.default.shape({
    dropdownButton: _propTypes.default.string
  }),
  'id': _propTypes.default.string
};
/**
 * Create button control that optionally renders split buttons.
 *
 * @class DropdownButton
 * @private
 */

class DropdownButton extends _react.Component {
  render() {
    const props = (0, _ripOut.default)(this.props, 'toggleIcon', 'hasPlaceholder');
    const {
      type,
      className,
      toggle,
      split,
      id,
      ariaLabels,
      forwardedRef
    } = props,
          other = (0, _objectWithoutProperties2.default)(props, _excluded2);

    if (split) {
      return /*#__PURE__*/_react.default.createElement(DropdownSplit, (0, _extends2.default)({
        type: type,
        toggle: toggle,
        id: id,
        ariaLabels: ariaLabels
      }, other));
    }

    return /*#__PURE__*/_react.default.createElement(_button.default, (0, _extends2.default)({
      id: id,
      "aria-haspopup": "listbox",
      "aria-controls": props['aria-controls'],
      active: props.open
    }, other, {
      design: _button.default.designs.includes(type) ? type : null,
      onClick: toggle,
      as: "select",
      className: (0, _classNames.default)(className, 'dropdown-toggle btn-dropdown')
    }), props.children);
  }

}
/**
 * Toggle and split properties of the button.
 *
 * @enum {Object} propTypes
 * @public
 */


DropdownButton.propTypes = {
  'toggle': _propTypes.default.func,
  'aria-controls': _propTypes.default.string,
  'split': _propTypes.default.bool,
  'disabled': _propTypes.default.bool,
  'hasPlaceholder': _propTypes.default.bool
};
/**
 * Create select control.
 *
 * @class DropdownSelect
 * @private
 */

class DropdownSelect extends _react.Component {
  constructor() {
    super(...arguments);
    this.onKeyDown = this.onKeyDown.bind(this);
    this.keycodes = {
      Space: function (type) {
        return type !== 'multiselect';
      },
      Enter: 'toggle',
      Escape: 'keydown',
      ArrowUp: 'keydown',
      ArrowDown: 'keydown'
    };
  }
  /**
   * Triggers toggle on keypress of enter or spacebar
   *
   * @param {SyntheticEvent} e React Keyboard event.
   * @private
   */


  onKeyDown(e) {
    //
    // IE11 does not include "code" and provides a different value for "key"
    // than other browsers. e.g.:
    //
    //   - IE11:    { "key": "Spacebar", "keyCode": 32, "which": 32 }
    //   - Chrome:  { "code": "Space", "key": " ", "keyCode": 32, "which": 32 }
    //   - Firefox: { "code": "Space", "key": " ", "keyCode": 32, "which": 32 }
    //   - Safari:  { "keyCode": 32, "which": 32 }
    //
    // Thankfully React normalizes these into `e.key` in their SyntheticEvent
    // See: https://facebook.github.io/react/docs/events.html#keyboard-events
    //
    const key = e.key;
    const accepts = this.keycodes[key];

    if (accepts) {
      e.preventDefault();
      this.props.onKeyDown(e);

      if (accepts === 'toggle' || typeof accepts === 'function' && accepts(this.props.type)) {
        this.props.toggle(e);
      }
    }
  }

  render() {
    const props = this.props;
    let eventHandlers = {};

    if (!props.disabled) {
      eventHandlers = {
        onClick: props.toggle,
        onKeyDown: this.onKeyDown
      };
    }

    const {
      forwardedRef
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({
      ref: forwardedRef,
      "aria-disabled": props.disabled,
      "aria-labelledby": props['aria-labelledby'],
      "aria-label": props.ariaLabels.menu,
      "aria-controls": props['aria-controls'],
      "aria-haspopup": "listbox",
      "aria-expanded": props.open,
      role: 'button'
    }, eventHandlers, {
      tabIndex: props.tabIndex,
      id: props.id ? `${props.id}-menu` : '',
      className: (0, _classNames.default)('form-control', {
        'form-control-lg': props.size === 'large',
        'form-control-sm': props.size === 'small',
        'form-control-merch': props.merch,
        'placeholder': props.hasPlaceholder
      })
    }), props.type !== 'tripledot' && props.type !== 'custom' && props.toggleIcon !== 'clock' && /*#__PURE__*/_react.default.createElement("div", {
      className: 'dropdown-toggle',
      role: 'button',
      "aria-hidden": 'true'
    }, /*#__PURE__*/_react.default.createElement(_chevronDown.default, null)), props.type === 'select' && props.toggleIcon === 'clock' && /*#__PURE__*/_react.default.createElement("div", {
      className: "timepicker"
    }, /*#__PURE__*/_react.default.createElement(_clock.default, null)), /*#__PURE__*/_react.default.createElement("div", {
      className: "dropdown-text"
    }, props.children));
  }

}

DropdownSelect.defaultProps = {
  tabIndex: 0
};
/**
 * Toggle property of the control.
 *
 * @enum {Object} propTypes
 * @public
 */

DropdownSelect.propTypes = {
  'tabIndex': _propTypes.default.oneOf([-1, 0]),
  'toggle': _propTypes.default.func,
  'disabled': _propTypes.default.bool,
  'onKeyDown': _propTypes.default.func,
  'toggleIcon': _propTypes.default.oneOf(['clock', 'dropdown']),
  'hasPlaceholder': _propTypes.default.bool,
  'size': _propTypes.default.oneOf(['large', 'small', 'default']),
  'children': _propTypes.default.node,
  'type': _propTypes.default.string,
  'aria-labelledby': _propTypes.default.string,
  'ariaLabels': _propTypes.default.object,
  'id': _propTypes.default.string,
  'aria-controls': _propTypes.default.string,
  'merch': _propTypes.default.bool,
  'open': _propTypes.default.bool,
  'forwardedRef': _propTypes.default.any
};

const DropdownSelectForwarded = /*#__PURE__*/_react.default.forwardRef((localProps, ref) => /*#__PURE__*/_react.default.createElement(DropdownSelect, (0, _extends2.default)({
  forwardedRef: ref
}, localProps)));
/**
 * DropdownControl creates a select or button dropdown. Each control gets different
 * properties.
 *
 * @class DropdownControl
 * @displayName DropdownControl (Web)
 * @public
 */


class DropdownControl extends _react.Component {
  constructor() {
    super(...arguments);
    this.ariaLabels = _objectSpread(_objectSpread({}, DropdownControl.defaultProps.ariaLabels), this.props.ariaLabels);
  }

  render() {
    const props = _objectSpread(_objectSpread({}, this.props), {}, {
      ariaLabels: this.ariaLabels
    });

    switch (props.type) {
      case 'select':
      case 'multiselect':
        return /*#__PURE__*/_react.default.createElement(DropdownSelectForwarded, (0, _extends2.default)({
          ref: props.forwardedRef
        }, props));

      case 'tripledot':
        return /*#__PURE__*/_react.default.createElement(DropdownSelectForwarded, (0, _extends2.default)({
          ref: props.forwardedRef
        }, props), /*#__PURE__*/_react.default.createElement(TripleDot, null));

      case 'custom':
        return /*#__PURE__*/_react.default.createElement(DropdownSelectForwarded, (0, _extends2.default)({
          ref: props.forwardedRef
        }, props), props.content);

      case 'button':
      default:
        return /*#__PURE__*/_react.default.createElement(DropdownButton, props);
    }
  }

}
/**
 * Do not split the button by default.
 *
 * @enum {Object} defaultProps
 * @public
 */


DropdownControl.defaultProps = {
  type: 'button',
  split: false,
  ariaLabels: {
    dropdownButton: 'Open menu',
    menu: 'Menu',
    open: 'Opened dropdown',
    close: 'Closed dropdown'
  }
};
/**
 * Type and split properties of the control.
 *
 * @enum {Object} propTypes
 * @public
 */

DropdownControl.propTypes = {
  /** Type of dropdown control */
  'type': _propTypes.default.string,

  /** Boolean whether the dropdown button is split */
  'split': _propTypes.default.bool,

  /** Boolean whether the dropdown button is disabled */
  'disabled': _propTypes.default.bool,

  /** Icon shown for toggling */
  'toggleIcon': _propTypes.default.oneOf(['clock', 'dropdown']),

  /** Boolean whether the placeholder text is provided */
  'hasPlaceholder': _propTypes.default.bool,

  /** Boolean whether merchandising styles should apply */
  'merch': _propTypes.default.bool,

  /** String the element that labels this control */
  'aria-labelledby': _propTypes.default.string,

  /** String element that labels the aria-controls */
  'aria-controls': _propTypes.default.string,

  /** Content to be displayed */
  'content': _propTypes.default.node,

  /** Editable tabIndex of DropdownSelect, defaults to 0. */
  'tabIndex': _propTypes.default.oneOf([-1, 0]),

  /** Editable aria-label attribute */
  'ariaLabels': _propTypes.default.shape({
    dropdownButton: _propTypes.default.string,
    menu: _propTypes.default.string,
    open: _propTypes.default.string,
    close: _propTypes.default.string
  }),

  /** ID attribute for the dropdown */
  'id': _propTypes.default.string,
  'forwardedRef': _propTypes.default.any
};

var _default = /*#__PURE__*/_react.default.forwardRef((localProps, ref) => /*#__PURE__*/_react.default.createElement(DropdownControl, (0, _extends2.default)({
  forwardedRef: ref
}, localProps)));

exports.default = _default;