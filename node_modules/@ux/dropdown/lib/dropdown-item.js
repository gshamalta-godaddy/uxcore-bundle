"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _ripOut = _interopRequireDefault(require("rip-out"));

var _classNames = _interopRequireDefault(require("@ux/component-utilities/lib/classNames"));

const _excluded = ["isSelected", "type", "disabled", "tabIndex"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

/**
 * Create input checkbox element, which is used for the multiselect.
 *
 * @class CheckboxItem
 * @displayName CheckboxItem (Web)
 * @public
 */
class CheckboxItem extends _react.PureComponent {
  /**
  * Handles when the spacebar is pressed to change the selection
  *
  * @param {React.KeyboardEvent} event - Event object from handler
  */
  onKeyDown(event) {
    if (~this.tabIndex && event.key === ' ') {
      event.preventDefault();
      typeof this.props.onChange === 'function' && this.props.onChange();
    }
  }

  render() {
    const props = this.props;
    return /*#__PURE__*/_react.default.createElement("label", {
      role: "option",
      className: props.className,
      onChange: props.onChange,
      tabIndex: props.tabIndex,
      onKeyDown: this.onKeyDown,
      "aria-selected": props.isSelected,
      ref: r => {
        this.componentRef = r;
      }
    }, /*#__PURE__*/_react.default.createElement("input", {
      onChange: function () {},
      role: "menuitemcheckbox",
      type: "checkbox",
      tabIndex: "-1",
      name: props.name,
      value: props.value,
      checked: props.isSelected,
      "aria-checked": props.isSelected
    }), ' ', props.children);
  }

}
/**
 * PropType validation for CheckboxItem.
 *
 * @enum {Object} propTypes
 * @public
 */


CheckboxItem.propTypes = {
  /** String className for the checkbox label */
  className: _propTypes.default.string,

  /** Contents of checkbox item */
  children: _propTypes.default.node,

  /** Boolean for whether dropdown item is selected */
  isSelected: _propTypes.default.bool,

  /** Name of the checkbox control */
  name: _propTypes.default.string,

  /** Value of the checkbox control */
  value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),

  /** onChange event handler */
  onChange: _propTypes.default.func,

  /** Index for the dropdown item */
  itemIndex: _propTypes.default.number,

  /** Developer indicates tabIndex */
  tabIndex: _propTypes.default.oneOf([-1, 0])
};
/**
 * Create an item, which receive a checkbox element if the type is multiselect.
 *
 * @class DropdownItem
 * @displayName DropdownItem (Web)
 * @public
 */

class DropdownItem extends _react.Component {
  /**
   * Get reference to the dropdown item (either DropdownItem or CheckboxItem)
   * @returns {Object} Dropdown Item reference
   */
  getRef() {
    if (this.componentRef instanceof CheckboxItem) {
      return this.componentRef.componentRef;
    }

    return this.componentRef;
  }

  render() {
    const props = this.props;
    const {
      isSelected,
      type,
      disabled,
      tabIndex
    } = props,
          other = (0, _objectWithoutProperties2.default)(props, _excluded);
    const className = (0, _classNames.default)(other.className, 'dropdown-item', {
      active: props.active,
      disabled
    });

    if (type === 'multiselect') {
      return /*#__PURE__*/_react.default.createElement(CheckboxItem, (0, _extends2.default)({}, props, {
        isSelected: isSelected,
        ref: r => {
          this.componentRef = r;
        },
        className: className
      }));
    }

    const itemProps = (0, _ripOut.default)(other, 'active', 'isSelected');
    return /*#__PURE__*/_react.default.createElement(itemProps.href ? 'a' : 'span', _objectSpread(_objectSpread({}, itemProps), {}, {
      disabled,
      className,
      'ref': r => {
        this.componentRef = r;
      },

      /* eslint-disable-line quote-props */
      'role': 'option',
      'aria-selected': isSelected,
      'tabIndex': tabIndex,
      'aria-disabled': disabled
    }));
  }

}

DropdownItem.defaultProps = {
  tabIndex: 0
};
/**
 * PropType validation for DropdownItem.
 *
 * @enum {Object} propTypes
 * @public
 */

DropdownItem.propTypes = {
  /** Boolean for whether dropdown item is disabled */
  disabled: _propTypes.default.bool,

  /** Boolean for whether dropdown item is active */
  active: _propTypes.default.bool,

  /** Type of dropdown item */
  type: _propTypes.default.string,

  /** Url for dropdown item when clicked */
  href: _propTypes.default.string,

  /** Boolean for whether dropdown item is selected */
  isSelected: _propTypes.default.bool,

  /** Developer indicates tabIndex, default is 0 */
  tabIndex: _propTypes.default.oneOf([-1, 0])
};
var _default = DropdownItem;
exports.default = _default;