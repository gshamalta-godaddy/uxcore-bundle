"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.menuAlignmentPropType = exports.default = exports.autoAlignments = exports.alignmentTypes = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classNames = _interopRequireDefault(require("@ux/component-utilities/lib/classNames"));

var _dropdownDivider = _interopRequireDefault(require("./dropdown-divider"));

var _dropdownHeader = _interopRequireDefault(require("./dropdown-header"));

var _selectableItem = _interopRequireDefault(require("./selectable-item"));

var _button = _interopRequireDefault(require("@ux/button"));

var _x = _interopRequireDefault(require("@ux/icon/x"));

const _excluded = ["menuAlignment", "alignmentOverride", "enableFullscreen", "ariaLabels", "id"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const alignLeft = 'dropdown-menu-left';
const alignRight = 'dropdown-menu-right';
const alignmentTypes = {
  left: 'left',
  right: 'right',
  preferLeft: 'preferLeft',
  preferRight: 'preferRight'
};
exports.alignmentTypes = alignmentTypes;
const autoAlignments = {
  [alignmentTypes.preferLeft]: true,
  [alignmentTypes.preferRight]: true
};
exports.autoAlignments = autoAlignments;
const defaultAlignmentClassName = {
  [alignmentTypes.left]: alignLeft,
  [alignmentTypes.right]: alignRight,
  [alignmentTypes.preferLeft]: alignLeft,
  [alignmentTypes.preferRight]: alignRight
};
const alignmentValues = Object.keys(alignmentTypes).map(key => alignmentTypes[key]);

const menuAlignmentPropType = _propTypes.default.oneOf(alignmentValues);
/**
 * DropdownMenu renders a wrapping div to handle menu alignment (left or right)
 * and wires up all children by cloning them with additional properties.
 *
 * @class DropdownMenu
 * @displayName DropdownMenu (Web)
 * @private
 */


exports.menuAlignmentPropType = menuAlignmentPropType;

class DropdownMenu extends _react.Component {
  constructor() {
    super(...arguments);
    this.onKeyDown = this.onKeyDown.bind(this);
  }
  /**
   * Return DropdownItems of the menu. Dividers and Headers will be ignored. If the
   * dropdown is of type (multi)selected the DropdownItem will be enhanced with
   * additional properties and event handlers.
   *
   * @returns {Array} React elements.
   * @private
   */


  children() {
    const props = this.props;
    let items = 0;
    return _react.default.Children.map(props.children, item => {
      return item.type !== _dropdownDivider.default && item.type !== _dropdownHeader.default ? (0, _selectableItem.default)(this, item, items++) : item;
    });
  }

  onKeyDown(e) {
    if (e.key && (e.key === 'Escape' || e.key === 'Esc' || e.key === 'Enter' || e.key === 'Return')) {
      this.props.toggle();
    }
  }
  /**
   * Render Dropdown menu.
   *
   * @returns {ReactElement} div element with DropdownItems.
   * @private
   */


  render() {
    const _this$props = this.props,
          {
      menuAlignment = alignmentTypes.left,
      alignmentOverride,
      enableFullscreen,
      ariaLabels,
      id
    } = _this$props,
          props = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
    const alignMenuClass = defaultAlignmentClassName[alignmentOverride] || defaultAlignmentClassName[menuAlignment] || alignLeft;
    const autoAlign = autoAlignments[menuAlignment] ? 'dropdown-menu-autoalign' : null;
    const mobileFullscreen = enableFullscreen ? 'full-screen' : null;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classNames.default)('dropdown-menu', alignMenuClass, autoAlign, mobileFullscreen)
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "dropdown-overlay",
      onClick: props.toggle,
      onKeyDown: props.toggle,
      role: "button",
      tabIndex: -1
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "dropdown-menu-background",
      ref: r => this.wrapper = r,
      role: "listbox",
      "aria-label": ariaLabels.menu,
      id: id ? `${id}-menu` : undefined
      /* eslint-disable-line no-undefined */
      ,
      "aria-multiselectable": props.type === 'multiselect' ? true : null
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      className: "dropdown-close",
      design: 'inline',
      onClick: props.toggle,
      "aria-label": ariaLabels.close,
      icon: /*#__PURE__*/_react.default.createElement(_x.default, null)
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "dropdown-list"
    }, this.children())));
  }

}
/**
 * PropType validation
 *
 * @type {Object}
 * @public
 */


DropdownMenu.propTypes = {
  /** Force alignment of dropdown menu */
  alignmentOverride: _propTypes.default.oneOf([alignmentTypes.left, alignmentTypes.right]),

  /** Specify alignment of dropdown menu (when possible) */
  menuAlignment: menuAlignmentPropType,

  /** Boolean whether the dropdown menu is full screen for mobile devices */
  enableFullscreen: _propTypes.default.bool,

  /** onChange event handler */
  onChange: _propTypes.default.func,

  /** onKeyDown event handler */
  onKeyDown: _propTypes.default.func,

  /** Array of selected dropdown item indexes */
  selected: _propTypes.default.array,

  /** Function that toggles the menu open and closed */
  toggle: _propTypes.default.func,

  /** Screenreader labels for sub-elements */
  ariaLabels: _propTypes.default.shape({
    /** Label for mobile-view menu close button */
    close: _propTypes.default.string,

    /** Label for dropdown-menu */
    menu: _propTypes.default.string
  }),

  /** Type of dropdown items in the menu */
  type: _propTypes.default.string,

  /** children to be rendered */
  children: _propTypes.default.node,

  /** ID attribute for the dropdown */
  id: _propTypes.default.string
};
/**
 * Default props for DropdownMenu.
 *
 * @enum {Object} defaultProps
 * @public
 */

DropdownMenu.defaultProps = {
  menuAlignment: alignmentTypes.left,
  toggle: () => {},
  ariaLabels: {
    close: 'Close',
    menu: 'Menu items'
  },
  selected: [],
  type: 'button'
};
var _default = DropdownMenu;
exports.default = _default;