"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _intents = _interopRequireWildcard(require("@ux/intents"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// eslint-disable-next-line max-statements
var _default = function () {
  const intents = new _intents.default();
  intents.create('@ux/dropdown', {
    // basic .dropdown-menu
    styleProperties: [_intents.enums.properties.FONT_FAMILY, _intents.enums.properties.FONT_SIZE, _intents.enums.properties.LINE_HEIGHT, _intents.enums.properties.FOREGROUND_COLOR, _intents.enums.properties.BACKGROUND_COLOR, _intents.enums.properties.BORDER_COLOR, _intents.enums.properties.BORDER_RADIUS],
    expressions: [_intents.enums.expressions.CHOSEN],
    features: {
      // .dropdown-item
      [_intents.enums.features.ITEM]: {
        styleProperties: [_intents.enums.properties.FONT_FAMILY, _intents.enums.properties.FONT_SIZE, _intents.enums.properties.FONT_WEIGHT, _intents.enums.properties.LINE_HEIGHT, _intents.enums.properties.FOREGROUND_COLOR, _intents.enums.properties.BACKGROUND_COLOR],
        interactions: [_intents.enums.interactions.HOVERED]
      },
      [_intents.enums.features.INDICATOR]: {
        styleProperties: [_intents.enums.properties.BORDER_COLOR]
      },
      // .dropdown-header in dropdowns
      [_intents.enums.features.TITLE]: {
        styleProperties: [_intents.enums.properties.FONT_FAMILY, _intents.enums.properties.FONT_SIZE, _intents.enums.properties.FONT_WEIGHT, _intents.enums.properties.LINE_HEIGHT, _intents.enums.properties.FOREGROUND_COLOR, _intents.enums.properties.BACKGROUND_COLOR]
      },
      [_intents.enums.features.BACKDROP]: {
        styleProperties: [_intents.enums.properties.BACKGROUND_COLOR]
      },
      formControl: {
        styleProperties: [_intents.enums.properties.BORDER_COLOR],
        expressions: [_intents.enums.expressions.CRITICAL]
      },
      placeholder: {
        styleProperties: [_intents.enums.properties.FOREGROUND_COLOR]
      },
      tripleDotOpen: {
        styleproperties: [_intents.enums.properties.FOREGROUND_COLOR, _intents.enums.properties.BACKGROUND_COLOR]
      }
    }
  }); // .dropdown-menu styles

  intents.uxDropdown.fontFamily = intents.ux.text.fontFamily;
  intents.uxDropdown.fontSize = intents.ux.text.fontSize;
  intents.uxDropdown.lineHeight = intents.ux.text.lineHeight;
  intents.uxDropdown.foregroundColor = intents.ux.box.foregroundColor;
  intents.uxDropdown.backgroundColor = intents.ux.box.backgroundColor;
  intents.uxDropdown.borderColor = intents.ux.control.outlineColor; // Expected to show as "focused"

  intents.uxDropdown.borderRadius = intents.ux.box.borderRadius; // Backdrop for mobile

  intents.uxDropdown.backdrop.backgroundColor = intents.ux.boxHighContrastOverlay.backgroundColor; // .tripledot things

  intents.uxDropdownChosen.foregroundColor = intents.ux.feedback.onFeedbackColor;
  intents.uxDropdownChosen.backgroundColor = intents.ux.feedback.feedbackColor; // .dropdown-item

  intents.uxDropdown.item.fontFamily = intents.ux.textAction.fontFamily;
  intents.uxDropdown.item.fontSize = intents.ux.textAction.fontSize;
  intents.uxDropdown.item.fontWeight = intents.ux.textAction.fontWeight;
  intents.uxDropdown.item.lineHeight = intents.ux.textAction.lineHeight;
  intents.uxDropdown.item.foregroundColor = intents.ux.action.foregroundColor;
  intents.uxDropdown.item.backgroundColor = intents.ux.action.backgroundColor; // .dropdown-item hover

  intents.uxDropdown.itemHovered.foregroundColor = intents.ux.actionHovered.foregroundColor;
  intents.uxDropdown.itemHovered.backgroundColor = intents.ux.actionHovered.backgroundColor; // .dropdown-divider border color

  intents.uxDropdown.indicator.borderColor = intents.ux.box.borderColor; // .dropdown-menu .form-control

  intents.uxDropdown.formControl.borderColor = intents.ux.control.borderColor;
  intents.uxDropdown.formControlCritical.borderColor = intents.ux.feedbackHighContrastCritical.feedbackColor; // .dropdown placeholder

  intents.uxDropdown.placeholder.foregroundColor = intents.ux.controlVoid.foregroundColor; // .dropdown-header

  intents.uxDropdown.title.fontFamily = intents.ux.textLabel.fontFamily;
  intents.uxDropdown.title.fontSize = intents.ux.textLabel.fontSize;
  intents.uxDropdown.title.fontWeight = intents.ux.textLabel.fontWeight;
  intents.uxDropdown.title.lineHeight = intents.ux.textLabel.lineHeight;
  intents.uxDropdown.title.foregroundColor = intents.ux.box.foregroundColor;
  intents.uxDropdown.title.backgroundColor = intents.ux.box.backgroundColor;
  return intents;
}();

exports.default = _default;