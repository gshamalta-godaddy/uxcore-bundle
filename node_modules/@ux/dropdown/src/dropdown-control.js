import Chev from '@ux/icon/chevron-down';
import Ellipsis from '@ux/icon/ellipsis';
import React, { Component } from 'react';
import classNames from '@ux/component-utilities/lib/classNames';
import PropTypes from 'prop-types';
import Clock from '@ux/icon/clock';
import Button from '@ux/button';
import rip from 'rip-out';

/**
 * Create a triple dot icon.
 *
 * @function TripleDot
 * @returns {React.ReactElement} tripledot element
 * @private
 */
function TripleDot() {
  return (
    <div className='tripledot'>
      <Ellipsis width={ 20 } height={ 20 } />
    </div>
  );
}

/**
 * Create two buttons rendered as split dropdown.
 *
 * @function DropdownSplit
 * @returns {React.ReactElement} split button element
 * @private
 */
function DropdownSplit({ type, toggle, ariaLabels, 'aria-controls': ariaControls, id, ...other }) {
  return (<div className='btn-group'>
    <Button
      { ...other }
      design={ Button.designs.includes(type) ? type : null }
      className='dropdown-split'
    />
    <Button
      id={ id }
      aria-haspopup='listbox'
      aria-controls={ ariaControls }
      design={ Button.designs.includes(type) ? type : null }
      onClick={ toggle }
      className='dropdown-toggle dropdown-toggle-split btn-dropdown'
      as='select'
      aria-label={ ariaLabels.dropdownButton }>
    </Button>
  </div>
  );
}

/**
 * Type property of split dropdown.
 *
 * @enum {Object} propTypes
 * @public
 */
DropdownSplit.propTypes = {
  'toggle': PropTypes.func,
  'type': PropTypes.string,
  'aria-controls': PropTypes.string,
  'ariaLabels': PropTypes.shape({
    dropdownButton: PropTypes.string
  }),
  'id': PropTypes.string
};

/**
 * Create button control that optionally renders split buttons.
 *
 * @class DropdownButton
 * @private
 */
class DropdownButton extends Component {
  render() {
    const props = rip(this.props, 'toggleIcon', 'hasPlaceholder');
    const {
      type,
      className,
      toggle,
      split,
      id,
      ariaLabels,
      forwardedRef, // eslint-disable-line no-unused-vars
      ...other
    } = props;

    if (split) {
      return <DropdownSplit type={ type } toggle={ toggle } id={ id } ariaLabels={ ariaLabels } { ...other } />;
    }

    return (
      <Button
        id={ id }
        aria-haspopup='listbox'
        aria-controls={ props['aria-controls'] }
        active={ props.open }
        { ...other }
        design={ Button.designs.includes(type) ? type : null }
        onClick={ toggle }
        as='select'
        className={ classNames(className, 'dropdown-toggle btn-dropdown') }>
        {props.children}
      </Button>
    );
  }
}

/**
 * Toggle and split properties of the button.
 *
 * @enum {Object} propTypes
 * @public
 */
DropdownButton.propTypes = {
  'toggle': PropTypes.func,
  'aria-controls': PropTypes.string,
  'split': PropTypes.bool,
  'disabled': PropTypes.bool,
  'hasPlaceholder': PropTypes.bool
};

/**
 * Create select control.
 *
 * @class DropdownSelect
 * @private
 */
class DropdownSelect extends Component {
  constructor() {
    super(...arguments);

    this.onKeyDown = this.onKeyDown.bind(this);
    this.keycodes = {
      Space: function (type) {
        return type !== 'multiselect';
      },

      Enter: 'toggle',
      Escape: 'keydown',
      ArrowUp: 'keydown',
      ArrowDown: 'keydown'
    };
  }

  /**
   * Triggers toggle on keypress of enter or spacebar
   *
   * @param {SyntheticEvent} e React Keyboard event.
   * @private
   */
  onKeyDown(e) {
    //
    // IE11 does not include "code" and provides a different value for "key"
    // than other browsers. e.g.:
    //
    //   - IE11:    { "key": "Spacebar", "keyCode": 32, "which": 32 }
    //   - Chrome:  { "code": "Space", "key": " ", "keyCode": 32, "which": 32 }
    //   - Firefox: { "code": "Space", "key": " ", "keyCode": 32, "which": 32 }
    //   - Safari:  { "keyCode": 32, "which": 32 }
    //
    // Thankfully React normalizes these into `e.key` in their SyntheticEvent
    // See: https://facebook.github.io/react/docs/events.html#keyboard-events
    //
    const key = e.key;
    const accepts = this.keycodes[key];
    if (accepts) {
      e.preventDefault();
      this.props.onKeyDown(e);

      if (
        accepts === 'toggle' ||
        (typeof accepts === 'function' && accepts(this.props.type))
      ) {
        this.props.toggle(e);
      }
    }
  }

  render() {
    const props = this.props;
    let eventHandlers = {};
    if (!props.disabled) {
      eventHandlers = {
        onClick: props.toggle,
        onKeyDown: this.onKeyDown
      };
    }
    const { forwardedRef } = this.props;

    return (
      <div
        ref={ forwardedRef }
        aria-disabled={ props.disabled }
        aria-labelledby={ props['aria-labelledby'] }
        aria-label={ props.ariaLabels.menu }
        aria-controls={ props['aria-controls'] }
        aria-haspopup='listbox'
        aria-expanded={ props.open }
        role={ 'button' }
        { ...eventHandlers }
        tabIndex={ props.tabIndex }
        id={ props.id ? `${props.id}-menu` : '' }
        className={ classNames(
          'form-control',
          {
            'form-control-lg': props.size === 'large',
            'form-control-sm': props.size === 'small',
            'form-control-merch': props.merch,
            'placeholder': props.hasPlaceholder
          }
        ) }>
        {props.type !== 'tripledot' &&
          props.type !== 'custom' &&
          props.toggleIcon !== 'clock' && (
          <div className={ 'dropdown-toggle' } role={ 'button' } aria-hidden={ 'true' }>
            <Chev />
          </div>
        )}
        {props.type === 'select' && props.toggleIcon === 'clock' && (
          <div className='timepicker'>
            <Clock />
          </div>
        )}
        <div className='dropdown-text'>{props.children}</div>
      </div>
    );
  }
}

DropdownSelect.defaultProps = {
  tabIndex: 0
};

/**
 * Toggle property of the control.
 *
 * @enum {Object} propTypes
 * @public
 */
DropdownSelect.propTypes = {
  'tabIndex': PropTypes.oneOf([-1, 0]),
  'toggle': PropTypes.func,
  'disabled': PropTypes.bool,
  'onKeyDown': PropTypes.func,
  'toggleIcon': PropTypes.oneOf(['clock', 'dropdown']),
  'hasPlaceholder': PropTypes.bool,
  'size': PropTypes.oneOf(['large', 'small', 'default']),
  'children': PropTypes.node,
  'type': PropTypes.string,
  'aria-labelledby': PropTypes.string,
  'ariaLabels': PropTypes.object,
  'id': PropTypes.string,
  'aria-controls': PropTypes.string,
  'merch': PropTypes.bool,
  'open': PropTypes.bool,
  'forwardedRef': PropTypes.any
};

const DropdownSelectForwarded = React.forwardRef((localProps, ref) => <DropdownSelect forwardedRef={ ref } { ...localProps } />);

/**
 * DropdownControl creates a select or button dropdown. Each control gets different
 * properties.
 *
 * @class DropdownControl
 * @displayName DropdownControl (Web)
 * @public
 */
class DropdownControl extends Component {
  constructor() {
    super(...arguments);
    this.ariaLabels = { ...DropdownControl.defaultProps.ariaLabels, ...this.props.ariaLabels };
  }

  render() {
    const props = { ...this.props, ariaLabels: this.ariaLabels };
    switch (props.type) {
      case 'select':
      case 'multiselect':
        return <DropdownSelectForwarded ref={ props.forwardedRef } { ...props } />;
      case 'tripledot':
        return (
          <DropdownSelectForwarded ref={ props.forwardedRef } { ...props }>
            <TripleDot />
          </DropdownSelectForwarded>
        );
      case 'custom':
        return <DropdownSelectForwarded ref={ props.forwardedRef } { ...props }>{props.content}</DropdownSelectForwarded>;
      case 'button':
      default:
        return <DropdownButton { ...props } />;
    }
  }
}

/**
 * Do not split the button by default.
 *
 * @enum {Object} defaultProps
 * @public
 */
DropdownControl.defaultProps = {
  type: 'button',
  split: false,
  ariaLabels: {
    dropdownButton: 'Open menu',
    menu: 'Menu',
    open: 'Opened dropdown',
    close: 'Closed dropdown'
  }
};

/**
 * Type and split properties of the control.
 *
 * @enum {Object} propTypes
 * @public
 */
DropdownControl.propTypes = {
  /** Type of dropdown control */
  'type': PropTypes.string,
  /** Boolean whether the dropdown button is split */
  'split': PropTypes.bool,
  /** Boolean whether the dropdown button is disabled */
  'disabled': PropTypes.bool,
  /** Icon shown for toggling */
  'toggleIcon': PropTypes.oneOf(['clock', 'dropdown']),
  /** Boolean whether the placeholder text is provided */
  'hasPlaceholder': PropTypes.bool,
  /** Boolean whether merchandising styles should apply */
  'merch': PropTypes.bool,
  /** String the element that labels this control */
  'aria-labelledby': PropTypes.string,
  /** String element that labels the aria-controls */
  'aria-controls': PropTypes.string,
  /** Content to be displayed */
  'content': PropTypes.node,
  /** Editable tabIndex of DropdownSelect, defaults to 0. */
  'tabIndex': PropTypes.oneOf([-1, 0]),
  /** Editable aria-label attribute */
  'ariaLabels': PropTypes.shape({
    dropdownButton: PropTypes.string,
    menu: PropTypes.string,
    open: PropTypes.string,
    close: PropTypes.string
  }),
  /** ID attribute for the dropdown */
  'id': PropTypes.string,
  'forwardedRef': PropTypes.any
};

export default React.forwardRef((localProps, ref) => <DropdownControl forwardedRef={ ref } { ...localProps } />);
