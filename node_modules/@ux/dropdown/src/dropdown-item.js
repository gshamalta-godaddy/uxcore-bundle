/* eslint-disable jsx-a11y/no-noninteractive-element-to-interactive-role */
import React, { PureComponent, Component } from 'react';
import PropTypes from 'prop-types';
import rip from 'rip-out';
import classNames from '@ux/component-utilities/lib/classNames';

/**
 * Create input checkbox element, which is used for the multiselect.
 *
 * @class CheckboxItem
 * @displayName CheckboxItem (Web)
 * @public
 */
class CheckboxItem extends PureComponent {

  /**
 * Handles when the spacebar is pressed to change the selection
 *
 * @param {React.KeyboardEvent} event - Event object from handler
 */
  onKeyDown(event) {
    if (~this.tabIndex && event.key === ' ') {
      event.preventDefault();
      typeof this.props.onChange === 'function' && this.props.onChange();
    }
  }

  render() {
    const props = this.props;

    return (
      <label
        role='option'
        className={ props.className }
        onChange={ props.onChange }
        tabIndex={ props.tabIndex }
        onKeyDown={ this.onKeyDown }
        aria-selected={ props.isSelected }
        ref={ r => {
          this.componentRef = r;
        } }>
        <input
          onChange={ function () {} }
          role='menuitemcheckbox'
          type='checkbox'
          tabIndex='-1'
          name={ props.name }
          value={ props.value }
          checked={ props.isSelected }
          aria-checked={ props.isSelected }
        />{' '}
        {props.children}
      </label>
    );
  }
}

/**
 * PropType validation for CheckboxItem.
 *
 * @enum {Object} propTypes
 * @public
 */
CheckboxItem.propTypes = {
  /** String className for the checkbox label */
  className: PropTypes.string,
  /** Contents of checkbox item */
  children: PropTypes.node,
  /** Boolean for whether dropdown item is selected */
  isSelected: PropTypes.bool,
  /** Name of the checkbox control */
  name: PropTypes.string,
  /** Value of the checkbox control */
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  /** onChange event handler */
  onChange: PropTypes.func,
  /** Index for the dropdown item */
  itemIndex: PropTypes.number,
  /** Developer indicates tabIndex */
  tabIndex: PropTypes.oneOf([-1, 0])
};

/**
 * Create an item, which receive a checkbox element if the type is multiselect.
 *
 * @class DropdownItem
 * @displayName DropdownItem (Web)
 * @public
 */
class DropdownItem extends Component {
  /**
   * Get reference to the dropdown item (either DropdownItem or CheckboxItem)
   * @returns {Object} Dropdown Item reference
   */
  getRef() {
    if (this.componentRef instanceof CheckboxItem) {
      return this.componentRef.componentRef;
    }
    return this.componentRef;
  }

  render() {
    const props = this.props;
    const { isSelected, type, disabled, tabIndex, ...other } = props;
    const className = classNames(
      other.className,
      'dropdown-item', {
        active: props.active,
        disabled
      }
    );

    if (type === 'multiselect') {
      return (
        <CheckboxItem
          { ...props }
          isSelected={ isSelected }
          ref={ r => {
            this.componentRef = r;
          } }
          className={ className }
        />
      );
    }

    const itemProps = rip(other, 'active', 'isSelected');

    return React.createElement(itemProps.href ? 'a' : 'span', {
      ...itemProps,
      disabled,
      className,

      'ref': r => {
        this.componentRef = r;
      },

      /* eslint-disable-line quote-props */
      'role': 'option',
      'aria-selected': isSelected,
      'tabIndex': tabIndex,
      'aria-disabled': disabled
    });
  }
}

DropdownItem.defaultProps = {
  tabIndex: 0
};

/**
 * PropType validation for DropdownItem.
 *
 * @enum {Object} propTypes
 * @public
 */
DropdownItem.propTypes = {
  /** Boolean for whether dropdown item is disabled */
  disabled: PropTypes.bool,
  /** Boolean for whether dropdown item is active */
  active: PropTypes.bool,
  /** Type of dropdown item */
  type: PropTypes.string,
  /** Url for dropdown item when clicked */
  href: PropTypes.string,
  /** Boolean for whether dropdown item is selected */
  isSelected: PropTypes.bool,
  /** Developer indicates tabIndex, default is 0 */
  tabIndex: PropTypes.oneOf([-1, 0])
};

export default DropdownItem;
