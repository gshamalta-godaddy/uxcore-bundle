import { css } from 'linaria';
import intents from './intents.config.js';

import { mixins } from '@ux/stylevars';

import '@ux/button/src/styles';

const {
  mediaBreakpointDown,
  mediaBreakpointUp
} = mixins;

export default css`
:global() {
  @import "~@ux/icon/ellipsis/index.css";
  @import "~@ux/icon/clock/index.css";
  @import "~@ux/icon/chevron-down/index.css";
  @import "~@ux/icon/x/index.css";

  body.dropdown-open {
    ${mediaBreakpointDown('xs', `overflow: hidden;`)}
  }

  /* The dropdown wrapper ('<div>') */
  .dropup,
  .dropright,
  .dropdown,
  .dropleft {
    position: relative;
  }

  /* The dropdown menu */
  .dropdown-menu {
    box-shadow: none;
    border-bottom-left-radius: ${intents.uxDropdown.borderRadius};
    border-bottom-right-radius: ${intents.uxDropdown.borderRadius};
    font-family: ${intents.uxDropdown.fontFamily};
    font-size: ${intents.uxDropdown.fontSize}; /* Redeclare because nesting can cause inheritance issues */
    line-height: ${intents.uxDropdown.lineHeight};
    color: ${intents.uxDropdown.foregroundColor};
    background-color: ${intents.uxDropdown.backgroundColor};
    border: 1px solid ${intents.uxDropdown.borderColor};
    border-top: 0;
    position: absolute;
    top: 100%;
    left: 0;
    z-index: 1000;
    display: none; /* none by default, but block on "open" of the menu */
    float: left;
    min-width: 100%;
    padding: 0;
    margin: 0;
    text-align: left; /* Ensures proper alignment if parent has it changed (e.g., modal footer) */
    text-transform: none;
    list-style: none;
    background-clip: padding-box;

    &.full-screen {
      /* Not mobile first because it is only on XS */
      ${mediaBreakpointDown('sm', `
        border: 0;
        background-color: transparent; /* This should always be transparent no need for intents */
        position: fixed;
        display: block;
        visibility: hidden;
        top: 0;
        left: 0;
        bottom: 0;
        right: 0;
        z-index: 1000010; /* Has to be insanely high due to the checkout 'Complete Purchase' button */

        & > .dropdown-overlay {
          background: ${intents.uxDropdown.backdrop.backgroundColor};
          width: 100vw;
          height: 100vh;
          z-index: 1005;
          display: block;
          opacity: 0;
          position: relative;
          transition: all .6s;
        }

        & > .dropdown-menu-background {
          box-shadow: 0 6px 8px rgba(17, 17, 17, 0.07);
          background: ${intents.uxDropdown.backgroundColor};
          color: ${intents.uxDropdown.foregroundColor};
          transform: translateY(120%);
          position: fixed;
          z-index: 1010;
          transition: all .6s;
          display: flex;
          flex-direction: column;
          align-items: stretch;
          max-height: 95vh;
          bottom: 0 !important;
          left: 0 !important;
          width: 100vw !important;
          padding-bottom: 2vh;
          border-radius: ${intents.uxDropdown.borderRadius} ${intents.uxDropdown.borderRadius} 0 0;

          .dropdown-list {
            max-height: 85vh;
            overflow: auto;
            align-self: stretch;
            min-height: 3rem;
          }

          .dropdown-item {
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: normal;
            cursor: pointer;
          }

          & > .dropdown-close {
            color: inherit;
            display: block;
            font-size: 1.5rem;
            padding: calc(${intents.ux.box.density} * 2);
            align-self: flex-end;
            cursor: pointer;
          }
        }
      `)}
    }

    .dropdown-menu.show {
      display: block;
    }

    /* for full screen */
    & > .dropdown-menu-background > .dropdown-close {
      display: none;
    }

    /* They need to be rendered but hidden so that they can be measured, */
    /* so we can determine if they should be right or left aligned */
    &.dropdown-menu-autoalign {
      opacity: 0;
      display: block;
      visibility: hidden;
    }
  }

  .dropdown:not(.ux-select-dropdown) {
    display: inline-block;
  }

  .dropdown-menu-right {
    right: 0;
    left: auto;
  }

  .dropdown,
  .dropup {
    &.full-screen {
      ${mediaBreakpointDown('xs', `position: unset;`)}
    }
    .form-control {
      padding-top: calc(${intents.ux.box.density} * 2);
      padding-bottom: calc(${intents.ux.box.density} * 1.5);
    }
    &.dropdown-disabled {
      cursor: not-allowed;
      .form-control,
      .form-control:focus {
        opacity: .4;
        box-shadow: none;
      }
    }
  }

  .dropdown.open {

    & > .btn-dropdown + .dropdown-menu,
    & > .btn-group + .dropdown-menu {
      margin-top: calc(${intents.ux.box.density} * 1);
      border-top: 1px solid ${intents.uxDropdown.borderColor};
    }

    /* Show the menu */
    > .form-control {
      border-bottom-left-radius: 0;
      border-bottom-right-radius: 0;
      border-color: ${intents.uxDropdown.formControl.borderColor};
      position: relative;
      z-index: 1001;

      /* Allow bottom border of dropdown to cover up top border of menu */
      ${mediaBreakpointDown('xs', `
        position: relative;
        border-color: ${intents.uxDropdown.formControl.borderColor};
      `)}

      .dropdown-toggle svg {
        transform: rotate(180deg);
        padding-top: 0;
      }

      /* For time picker only */
      .timepicker {
        right: 7px;
        top: 9px;
      }
    }

    > .dropdown-menu {
      box-shadow: 0 6px 8px rgba(17, 17, 17, 0.07);
      display: block;
      border-width: 1px;
      margin-top: -1px;
      width: 100%;
      max-height: 315px;
      overflow-y: auto;
      top: 100%;
      bottom: auto;

      ${mediaBreakpointUp('xs', `width: auto;`)}

      &.full-screen {
        ${mediaBreakpointDown('sm', `
          border-radius: 0;
          visibility: visible;
          top: 0;
          left: 0;
          bottom: 0;
          right: 0;
          max-height: none;
          > .form-control {
            border-width: ${1}px;
          }
          & > .dropdown-overlay {
            opacity: .5;
          }
          & > .dropdown-menu-background {
            transform: translateY(0%);
          }
        `)}

        &.dropdown-menu-autoalign {
          opacity: 1;
          visibility: visible;
        }
      }
    }

    /* more intents for this */
    &.menu-up {
      > .form-control {
        border-radius: 0;
        border-color: ${intents.uxDropdown.borderColor};
        border-width: 1px;
      }

      > .dropdown-menu {
        border-radius: 0;
        top: auto;
        bottom: calc(100% + .75rem);
        border-width: 1px;
      }
      &.has-label > .dropdown-menu {
        bottom: calc(60% + .75rem);
      }

      > .btn-dropdown + .dropdown-menu {
        bottom: calc(100% + .25rem);
      }
    }
  }

  /* Dividers (basically an '<hr>') within the dropdown */
  .dropdown-divider {
    height: 1px;
    background-color: ${intents.uxDropdown.indicator.borderColor};
    overflow: hidden;
    border: 0;
    margin: 0;
  }

  label.dropdown-item {
    margin: 0;
    input[type=checkbox] {
      margin-right: calc(${intents.ux.box.density} * 2);
      margin-top: -3px;
    }
  }

  .dropdown-item,
  a.dropdown-item {
    /* intents */
    font-family: ${intents.uxDropdown.item.fontFamily};
    font-size: ${intents.uxDropdown.item.fontSize};
    font-weight: ${intents.uxDropdown.item.fontWeight};
    line-height: ${intents.uxDropdown.item.lineHeight};
    color: ${intents.uxDropdown.item.foregroundColor};
    background-color: ${intents.uxDropdown.item.backgroundColor};

    display: flex;
    flex-grow: 1;
    clear: both;
    align-items: center;
    min-height: 2.75rem;
    padding: 0 calc(${intents.ux.box.density} * 4);
    text-decoration: none;
    text-align: inherit;
    margin-bottom: 0;
    white-space: nowrap;
    cursor: pointer;

    border: 0;

    &:hover {
      background-color: ${intents.uxDropdown.itemHovered.backgroundColor};
      color: ${intents.uxDropdown.itemHovered.foregroundColor};
      border-bottom: 0;
      text-decoration: none;
    }

    &:focus {
      color: ${intents.uxDropdown.item.foregroundColor};
      background: none;
      text-decoration: none;
    }

    &.disabled,
    &:disabled {
      opacity: .4;
    }

    &.disabled:focus {
      outline: 0;
    }

    &.active,
    &:active {
      &,
      &:focus,
      &:hover {
        background-color: ${intents.uxDropdown.itemHovered.backgroundColor};
        color: ${intents.uxDropdown.itemHovered.foregroundColor};
        text-decoration: none;
        outline: 0;
      }
    }
  }

  /* Allow for dropdowns to go bottom up (aka, dropup-menu)
  Just add .dropup after the standard .dropdown class and you're set. */
  .dropup {
    .dropdown-menu {
      top: auto;
      bottom: 100%;
      margin-top: 0;
      margin-bottom: 0;
    }
    .dropdown-toggle {
      &:after {
        border: 0;
      }
    }
  }

  /* Might be able to be deprecated && || deleted since we don't support left or right menus */
  .dropright {
    .dropdown-menu {
      top: 0;
      right: auto;
      left: 100%;
      margin-top: 0;
      margin-left: calc(${intents.ux.box.density} * .5);
    }
  }

  .dropleft {
    .dropdown-menu {
      top: 0;
      right: 100%;
      left: auto;
      margin-top: 0;
      margin-right: calc(${intents.ux.box.density} * .5);
    }
  }

  /* When enabled Popper.js, reset basic dropdown position
   stylelint-disable no-duplicate-selectors */
  .dropdown-menu {
    &[x-placement^="top"],
    &[x-placement^="right"],
    &[x-placement^="bottom"],
    &[x-placement^="left"] {
      right: auto;
      bottom: auto;
    }
  }

  .dropdown-header {
    position: relative;
    font-family: ${intents.uxDropdown.title.fontFamily};
    font-size: ${intents.uxDropdown.title.fontSize};
    font-weight: ${intents.uxDropdown.title.fontWeight};
    line-height: ${intents.uxDropdown.title.lineHeight};
    color: ${intents.uxDropdown.title.backgroundColor};
    background-color: ${intents.uxDropdown.title.backgroundColor};
    display: flex;
    min-height: 2rem;
    align-items: center;
    flex-grow: 1;
    padding: calc(${intents.ux.box.density} * 4);
    margin: 0;
    white-space: nowrap; /* as with > li > a */
    &.title {
      margin-bottom: 0;
    }
  }

  /* Bringing back .dropdown-split as change doesn't work for input-group */

  .dropdown-split {
    min-width: 0;
  }

  .dropdown-split + .dropdown-toggle,
  .btn + .dropdown-toggle-split {
    width: auto;
    min-width: 0;
    max-width: none;
    padding-right: calc(${intents.ux.box.density} * 4);
    padding-left: calc(${intents.ux.box.density} * 4);
    border-left: 1px solid;
    &:after {
      margin: 0;
    }
  }

  /* Tripledot Dropdown */
  .triple-dot-dropdown {
    cursor: pointer;
    padding: 0;
    .tripledot {
      padding: 10px 12px;
      line-height: .6rem;
    }
    &:active,
    &:focus {
      outline: 0;
    }
    &.open {
      .tripledot {
        color: ${intents.uxDropdownChosen.foregroundColor } !important;
        background-color: ${intents.uxDropdownChosen.backgroundColor} !important;
      }
      & > .dropdown-menu {
        margin-top: 5px;
        right: 0;
        left: auto;
        border-top: 1px solid ${intents.uxDropdown.borderColor};
        &.dropdown-menu-left {
          right: auto;
          left: 0;
        }
      }
    }

    &> .form-control {
      padding: 0 !important;
      box-shadow: none !important;
      border: 0 !important;
      background-color: transparent !important;
    }
  }

  div[class^="col-"].dropdown .dropdown-menu-left {
    left: calc(${intents.ux.box.density} * 2);
  }

  div[class^="col-"].dropdown .dropdown-menu-right {
    right: calc(${intents.ux.box.density} * 2);
  }

  /* UX select dropdown */
  .ux-select-dropdown {
    cursor: pointer;
    .form-control,
    .form-control-lg {
      min-height: 2.75rem;
      height: auto;
      display: flex;
      flex-direction: row-reverse;
      align-items: center;

      .dropdown-text {
        justify-content: flex-start;
        flex-grow: 1;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
      }

      &.form-control-sm {
        min-height: 2rem;
        .dropdown-text {
          line-height: 1.125rem;
          height: 1.125rem;
        }
      }

      &.placeholder {
        color: ${intents.uxDropdown.placeholder.foregroundColor};
      }

      .dropdown-toggle {
        display: inline-flex;
        flex-grow: 0;
      }

      &.form-control-merch {
        height: 3.25rem;
        &.form-control-lg {
          height: 4rem;
          .dropdown-toggle:after {
            font-size: 1.375rem;
          }
        }
        &.form-control-sm {
          height: 2.5rem;
        }
      }
    }

    .timepicker { /* specific to timepicker */
      position: absolute;
      right: .5rem;
      top: .625rem;
    }

    &.error {
      .form-control {
        border-color: ${intents.uxDropdown.formControlCritical.borderColor};
      }
    }

    /* Time picker only styles */
    &:hover {
      .timepicker {
        color: inherit;
      }
    }
  }
}
`;
