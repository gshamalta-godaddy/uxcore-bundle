import React from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';

const UX_FIELD_FRAME_CLASSNAME = 'ux-field-frame';

/**
 * Field frame functional component
 * @param {Object} props - Information for the props can be found in the PropTypes below and in TextEntry propTypes
 * @param {React.Element} props.children - Children for component, only allowing <Button/>, <TextEntry/> and <hr/> elements
 * @param {String} [props.className] - Optional class name
 * @param {Boolean} [props.disabled] - Sets component as disabled
 * @param {Boolean} [props.invalid] - Sets component as invalid
 * @param {String} [props.flyoutPlacement] - Specifically used with flyout, identifies what side the flyout is on
 * @param {Boolean} [props.stretch] - Sets component to parent's full width
 * @param {Object} ref - Forwarded ref to TextEntry
 * @returns {React.Component} FieldFrame component
 */
const FieldFrame = React.forwardRef(function fieldFrame(props, ref)  {
  const {
    children,
    className,
    disabled,
    invalid,
    flyoutPlacement,
    stretch = true,
    ...rest
  } = props;

  delete rest.style;

  return (
    <div
      className={ classnames(UX_FIELD_FRAME_CLASSNAME, className, {
        [`${UX_FIELD_FRAME_CLASSNAME}--invalid`]: invalid,
        [`${UX_FIELD_FRAME_CLASSNAME}--stretch`]: stretch
      }) }
      disabled={ disabled }
      data-flyout={ flyoutPlacement }
      ref={ ref }
      { ...rest }>
      { children }
    </div>
  );
});

FieldFrame.propTypes = {
  /** Verify children as Button, TextEntry or hr element */
  children: PropTypes.node,
  /** Optional classname for positioning */
  className: PropTypes.string,
  /** Sets as disabled */
  disabled: PropTypes.bool,
  /** Sets as invalid  */
  invalid: PropTypes.bool,
  /** Specifically used with flyout, identifies what side the flyout is on */
  flyoutPlacement: PropTypes.string,
  /** Stretches the width of the container */
  stretch: PropTypes.bool
};

export default FieldFrame;
