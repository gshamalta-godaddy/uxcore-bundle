import { css } from 'linaria';
import intents from './intents.config.js';

function flyout(placement) {
  // Placement can be defined as location{-start|end}
  const [location] = placement.split('-');

  return `
    &[data-flyout*="${location}"] {
      border-${location}-left-radius: 0;
      border-${location}-right-radius: 0;
    }

    &[data-flyout] > .ux-flyout[data-placement*="${location}"] {
      border-radius: 0;
      border-${location}-left-radius: ${intents.uxFieldFrame.borderRadius};
      border-${location}-right-radius: ${intents.uxFieldFrame.borderRadius};
      border-width: 0;
      border-left-width: inherit;
      border-right-width: inherit;
      border-${location}: inherit;
      overflow-x: hidden;
      overflow-y: auto;
    }
  `;
}

export default css`
  :global() {
    .ux-field-frame {
      display: flex;
      border: ${intents.uxFieldFrame.borderWidth} solid ${intents.uxFieldFrame.borderColor};
      border-radius: ${intents.uxFieldFrame.borderRadius};
      background-color: ${intents.uxFieldFrame.backgroundColor};

      &:not(.ux-field-frame--stretch) {
        display: inline-flex;
        align-self: flex-start;
      }

      &[disabled] {
        opacity: .4;
        cursor: not-allowed;

        [disabled] {
          /** If children are also disabled, we don't want to compound the opacity */
          opacity: 1;
        }
      }

      > hr {
        border: inherit;
        border-color: ${intents.uxFieldFrame.borderColor};
        border-top: 0;
        border-left: 0;
      }

      /** The following styles are used to control the child elements
       *    that may appear within the frame
       *  Order of styles matters
       *  The !important is used because child styles may be very specific to their components' state
       */
      > :not(:first-child, .ux-flyout) {
        border-top-right-radius: 0 !important;
        border-bottom-right-radius: 0 !important;
      }

      > :not(:last-child, .ux-flyout) {
        border-top-left-radius: 0 !important;
        border-bottom-left-radius: 0 !important;
      }

      > :first-child:not(.ux-flyout) {
        border-top-left-radius: inherit !important;
        border-bottom-left-radius: inherit !important;
      }

      > :last-child:not(.ux-flyout) {
        border-top-right-radius: inherit !important;
        border-bottom-right-radius: inherit !important;
      }

      &.ux-field-frame--invalid {
        border-color: ${intents.uxFieldFrameCritical.borderColor};
      }

      ${flyout('top')}
      ${flyout('bottom')}

    }
  }
`;
