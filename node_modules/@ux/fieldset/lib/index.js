"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Fieldset = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _fieldset = _interopRequireDefault(require("./fieldset"));

var _react = _interopRequireDefault(require("react"));

var _classNames = _interopRequireDefault(require("@ux/component-utilities/lib/classNames"));

const _excluded = ["children", "classNames"],
      _excluded2 = ["className", "children"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

const FieldSetWithRef = /*#__PURE__*/_react.default.forwardRef((_ref, ref) => {
  let {
    children,
    classNames
  } = _ref,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  return /*#__PURE__*/_react.default.createElement("fieldset", (0, _extends2.default)({
    ref: ref,
    className: classNames
  }, props), children);
});
/**
 * PropType validation
 *
 * @type {Object}
 * @private
 */


FieldSetWithRef.propTypes = _objectSpread(_objectSpread({}, _fieldset.default.propTypes), {}, {
  /** Classes applied to a fieldset */
  classNames: _propTypes.default.string
});
/**
 * Render a field set.
 *
 * @class Fieldset
 * @displayName Fieldset (Web)
 * @public
 */

class Fieldset extends _fieldset.default {
  /**
   * Render a plain div when proxy with multiple child elements.
   *
   * @returns {React.DOM} View element.
   * @private
   */
  get proxy() {
    return /*#__PURE__*/_react.default.createElement("div", null, this.props.children);
  }
  /**
   * Render the Fieldset, with or without error messages.
   *
   * @returns {React.DOM} Fieldset element.
   * @private
   */


  get view() {
    const _this$props = this.props,
          {
      className,
      children
    } = _this$props,
          props = (0, _objectWithoutProperties2.default)(_this$props, _excluded2); //
    // This property should not be spread onto the fieldset
    //

    delete props.proxy; //
    // Preserve class ordering (form-group, props.className, rest)
    //

    const classNames = (0, _classNames.default)('form-group', className, (0, _classNames.default)({
      'has-danger': this.invalid()
    }));
    return /*#__PURE__*/_react.default.createElement(FieldSetWithRef, (0, _extends2.default)({
      classNames: classNames
    }, props), children);
  }

  render() {
    return super.render();
  }

}
/**
 * PropType validation
 *
 * @type {Object}
 * @private
 */


exports.Fieldset = Fieldset;
Fieldset.propTypes = _objectSpread(_objectSpread({}, _fieldset.default.propTypes), {}, {
  /** Classes applied to a fieldset */
  className: _propTypes.default.string
});
var _default = Fieldset;
exports.default = _default;