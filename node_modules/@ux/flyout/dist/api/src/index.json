[
  {
    "description": "Creates a Flyout component\n\n@param {Object} props - Properties for the Flyout element\n@param {Element} props.anchorRef - Reference to a DOM element where the flyout should be visually attached.\n@param {Boolean} props.arrow - Boolean which determines if an arrow should be included on the flyout\n@param {Node|Array<Node>} props.chilren - Children to render inside the flyout\n@param {String} props.className - Optional classname for positioning\n@param {String} props.id - Id to set on the flyout for accessibilty\n@param {String} props.placement - Configuration for setting the placement of the flyout relative to the anchor.anchorRef\n@param {String} props.strategy - Sets the strategy for @floating-ui (absolute/fixed)\n@param {Element} props.portalElm - Optional releact element to create a react portal from\n@param {String} props.role - Role to set on the flyout for accessibility\n@param {Function} props.onClose - Fires when the user attempts to escape the flyout\n@param {Function} props.onPlacement - Fires when the placement of the flyout changes\n@param {Boolean} props.stretch - Stretches the flyout to the nearest relative ancestor\n@returns {Component} - Flyout element",
    "displayName": "Flyout",
    "methods": [],
    "props": {
      "anchorRef": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "func"
            },
            {
              "name": "shape",
              "value": {
                "current": {
                  "name": "object",
                  "required": false
                }
              }
            }
          ]
        },
        "required": false,
        "description": "Reference to a DOM element where the flyout should be visually attached. The flyout will not render without this"
      },
      "arrow": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "Determines if an arrow should be included on the flyout, if a string is provided, set the size of the arrow"
      },
      "children": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "arrayOf",
              "value": {
                "name": "node"
              }
            },
            {
              "name": "node"
            }
          ]
        },
        "required": false,
        "description": "Children to render within the flyout"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Id for the flyout, used for accessibility"
      },
      "placement": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'bottom-end'",
              "computed": false
            },
            {
              "value": "'bottom-start'",
              "computed": false
            },
            {
              "value": "'bottom'",
              "computed": false
            },
            {
              "value": "'left-end'",
              "computed": false
            },
            {
              "value": "'left-start'",
              "computed": false
            },
            {
              "value": "'left'",
              "computed": false
            },
            {
              "value": "'right-end'",
              "computed": false
            },
            {
              "value": "'right-start'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            },
            {
              "value": "'top-end'",
              "computed": false
            },
            {
              "value": "'top-start'",
              "computed": false
            },
            {
              "value": "'top'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Placement, for more details see https://floating-ui.com/"
      },
      "strategy": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'absolute'",
              "computed": false
            },
            {
              "value": "'fixed'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Sets the strategy for @floating-ui (absolute/fixed)"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Role for the flyout, used for accessibility"
      },
      "onClose": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Fires when the user attempts to escape from the flyout"
      },
      "onPlacement": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Fires when the flyout position changes"
      },
      "stretch": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Stretches the flyout to the nearest relative ancestor"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Optional class name for positioning"
      },
      "portalElem": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Optional releact element to create a react portal from"
      }
    }
  }
]