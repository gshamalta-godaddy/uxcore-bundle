"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getArrowSize = getArrowSize;
exports.getFlyoutAttributes = getFlyoutAttributes;
exports.getFlyoutStyle = getFlyoutStyle;
exports.outsideListeners = outsideListeners;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

const _excluded = ["x", "y", "strategy", "arrowSize"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

/**
 * Determine the arrow size given the input
 *
 * @param {Mixed} arrow - Value passed in from the props
 * @returns {String} - Final value to assign to the arrow size
 */
function getArrowSize(arrow) {
  switch (typeof arrow) {
    case 'boolean':
      return arrow ? '1rem' : 0;

    case 'number':
      return `${arrow}px`;

    default:
      return arrow;
  }
}
/**
 * Determine if the event occurred outside of the targets' contexts
 *
 * @param {Object} ev - Original event object
 * @param {Array<Element>} targets - Elements to check against
 * @returns {Boolean} - Event occurred outside
 */


function isEventOutside(ev, targets) {
  const includedTargets = ev.composedPath().filter(elem => targets.includes(elem));
  return !includedTargets.length;
}
/**
 * Creates data-attributes for flyout metadata
 *
 * @param {Object} config - Configuration object
 * @param {Object} config.hide - Values returned from the hide() middleware
 * @param {String} config.placement - Value describing the placement set as a result of the @floating-ui library
 * @returns {Object} - Attributes to spread onto the flyout component
 */


function getFlyoutAttributes(_ref) {
  let {
    hide,
    placement
  } = _ref;
  const {
    escaped,
    referenceHidden
  } = hide || {};
  return {
    'data-placement': placement,
    'data-escaped': escaped,
    'data-refhidden': referenceHidden
  };
}
/**
 * Prepares the styles to apply to the flyout
 *
 * @param {Object} config - Configuration object
 * @param {Number} config.x - Horizontal position
 * @param {Number} config.y - Vertical position
 * @param {String} config.strategy - Positioning strategy
 * @param {String} config.arrowSize - Arrow size
 * @returns {Object} - Styles to apply to the flyout
 */


function getFlyoutStyle(_ref2) {
  let {
    x: left,
    y: top,
    strategy: position,
    arrowSize
  } = _ref2,
      styles = (0, _objectWithoutProperties2.default)(_ref2, _excluded);
  return _objectSpread({
    position,
    top,
    left,
    '--ux-flyout-arrow-size': arrowSize || 0
  }, styles);
}
/**
 * Setup for the useEffect for the document listeners
 *
 * @param {Array<Element>} targets - Elements to check against
 * @param {Function} callback - Function to execute when an event occurs outside
 * @returns {Function} - Teardown function
 */


function outsideListeners(targets, callback) {
  function outsideEvent(ev) {
    isEventOutside(ev, targets) && callback(ev);
  }

  function escKey(ev) {
    ev.key === 'Escape' && callback(ev);
  }

  if (typeof callback === 'function') {
    document.addEventListener('click', outsideEvent);
    document.addEventListener('focus', outsideEvent, true);
    document.addEventListener('keydown', escKey);
  }

  return () => {
    document.removeEventListener('click', outsideEvent);
    document.removeEventListener('focus', outsideEvent, true);
    document.removeEventListener('keydown', escKey);
  };
}