import React, { useRef, useEffect, useLayoutEffect } from 'react';
import ReactDOM from 'react-dom';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import {
  arrow,
  flip,
  hide,
  shift,
  useFloating,
  autoUpdate
} from '@floating-ui/react-dom';
import {
  getArrowSize,
  getFlyoutStyle,
  getFlyoutAttributes,
  outsideListeners
} from './utils';

const UX_FLYOUT_CLASSNAME = 'ux-flyout';

export const UX_FLYOUT_PLACEMENTS = [
  'bottom-end',
  'bottom-start',
  'bottom',
  'left-end',
  'left-start',
  'left',
  'right-end',
  'right-start',
  'right',
  'top-end',
  'top-start',
  'top'
];

/**
 * Distance away from the edges that the arrow can travel.
 * This _should_ be the border-radius of the flyout however,
 * that value is themable so we assume the value wont be too big.
 */
const ARROW_EDGE_OFFSET_INT = 4;

/**
 * Prepares the middleware for the flyout
 *
 * @param {Object} config - Configuration object
 * @param {Element} config.arrowRef - The reference to the arrow element
 * @returns {Array} - Collection of middleware
 */
function getMiddleware({ arrowRef: element }) {
  return [shift(), flip(), hide(), arrow({ element, padding: ARROW_EDGE_OFFSET_INT })];
}

/**
 * Creates an arrow for the flyout
 *
 * @param {Object} props - Props for the component
 * @param {Object} props.arrow - Configuration for placing the arrow
 * @param {Object} ref - The reference to the component element
 * @returns {Component} - Arrow component
 */
const Arrow = React.forwardRef((props, ref) => {
  const { x: left, y: top } = props.arrow || {};
  return (
    <div
      className={ `${UX_FLYOUT_CLASSNAME}-arrow` }
      ref={ ref }
      style={{ top, left }} />
  );
});

Arrow.propTypes = {
  /** Provides placement for the arrow */
  arrow: PropTypes.shape({ x: PropTypes.number, y: PropTypes.number })
};

/**
 * Creates a Flyout component
 *
 * @param {Object} props - Properties for the Flyout element
 * @param {Element} props.anchorRef - Reference to a DOM element where the flyout should be visually attached.
 * @param {Boolean} props.arrow - Boolean which determines if an arrow should be included on the flyout
 * @param {Node|Array<Node>} props.chilren - Children to render inside the flyout
 * @param {String} props.className - Optional classname for positioning
 * @param {String} props.id - Id to set on the flyout for accessibilty
 * @param {String} props.placement - Configuration for setting the placement of the flyout relative to the anchor.anchorRef
 * @param {String} props.strategy - Sets the strategy for @floating-ui (absolute/fixed)
 * @param {Element} props.portalElm - Optional releact element to create a react portal from
 * @param {String} props.role - Role to set on the flyout for accessibility
 * @param {Function} props.onClose - Fires when the user attempts to escape the flyout
 * @param {Function} props.onPlacement - Fires when the placement of the flyout changes
 * @param {Boolean} props.stretch - Stretches the flyout to the nearest relative ancestor
 * @returns {Component} - Flyout element
 */
function Flyout(props) {
  const {
    anchorRef,
    arrow: arrowConfig,
    children,
    className,
    id,
    placement,
    strategy,
    portalElem,
    role,
    onClose = Function.prototype,
    onPlacement = Function.prototype,
    stretch
  } = props;

  const arrowRef = useRef(null);
  const arrowSize = getArrowSize(arrowConfig);

  const {
    // middlewareData contains information returned from the middleware, used for additional attributes
    middlewareData,
    // reference is a function which get the computed position of the anchorRef
    reference,
    // floating is the ref function to assign to the flyout
    floating,
    // refs of the elements in the DOM
    refs,
    // floatingData contains data which allows the flyout to be positioned
    ...floatingData
  } = useFloating({
    // https://floating-ui.com/docs/react-dom#updating
    whileElementsMounted: (...args) => {
      try {
        return autoUpdate(...args, { animationFrame: true });
      } catch (err) { return Function.prototype; }
    },
    placement,
    strategy,
    middleware: getMiddleware({ arrowRef })
  });

  // Using a virtual element approach for positioning to avoid rendering a reference element inside the component
  // https://floating-ui.com/docs/react-dom#virtual-element
  useLayoutEffect(() => {
    if (!anchorRef?.current?.getBoundingClientRect) return;
    reference(anchorRef.current);
  }, [reference, anchorRef, children]);

  // Handle events that occur outside of the flyout context
  useEffect(() => {
    if (!anchorRef?.current?.getBoundingClientRect || !refs.floating.current) return;
    return outsideListeners([anchorRef.current, refs.floating.current], onClose);
  }, [anchorRef, refs.floating, onClose]);

  // Fire event if the placement changes
  useLayoutEffect(() => {
    onPlacement(floatingData.placement);
  }, [floatingData.placement, onPlacement]);

  // Do not render if no anchorRef or children
  if (!anchorRef || !children) {
    return null;
  }

  // If stretch, set the minimum width of the flyout to the reference offset width
  const minWidth = stretch ? refs.reference?.current?.offsetWidth : null;

  const flyout = (
    <div
      className={ classnames(UX_FLYOUT_CLASSNAME, className) }
      id={ id }
      role={ role }
      ref={ floating }
      style={ getFlyoutStyle({ arrowSize, minWidth, ...floatingData }) }
      { ...getFlyoutAttributes({ ...middlewareData, ...floatingData }) }>
      { children }
      { arrowConfig && <Arrow ref={ arrowRef } { ...middlewareData } /> }
    </div>
  );

  return portalElem ? ReactDOM.createPortal(flyout, portalElem) : flyout;
}

Flyout.propTypes = {
  /** Reference to a DOM element where the flyout should be visually attached. The flyout will not render without this */
  anchorRef: PropTypes.oneOfType([
    PropTypes.func,
    PropTypes.shape({ current: PropTypes.object })
  ]),
  /** Determines if an arrow should be included on the flyout, if a string is provided, set the size of the arrow */
  arrow: PropTypes.oneOfType([
    PropTypes.bool,
    PropTypes.string
  ]),
  /** Children to render within the flyout */
  children: PropTypes.oneOfType([
    PropTypes.arrayOf(PropTypes.node),
    PropTypes.node
  ]),
  /** Id for the flyout, used for accessibility */
  id: PropTypes.string,
  /** Placement, for more details see https://floating-ui.com/ */
  placement: PropTypes.oneOf(UX_FLYOUT_PLACEMENTS),
  /** Sets the strategy for @floating-ui (absolute/fixed) */
  strategy: PropTypes.oneOf(['absolute', 'fixed']),
  /** Role for the flyout, used for accessibility */
  role: PropTypes.string,
  /** Fires when the user attempts to escape from the flyout */
  onClose: PropTypes.func,
  /** Fires when the flyout position changes */
  onPlacement: PropTypes.func,
  /** Stretches the flyout to the nearest relative ancestor */
  stretch: PropTypes.bool,
  /** Optional class name for positioning */
  className: PropTypes.string,
  /** Optional releact element to create a react portal from  */
  portalElem: PropTypes.object
};

Flyout.displayName = 'Flyout';

export default Flyout;
