import { css } from 'linaria';

function setPlacement(location, rotation) {
  const translate = ['top', 'bottom'].includes(location) ? 'translateY' : 'translateX';
  const flip = ['top', 'left'].includes(location) ? -1 : 1;
  const adjusment = flip * Math.SQRT2 / 2;

  return `&[data-placement*='${location}'] {
    transform: ${translate}(calc(var(--ux-flyout-arrow-size, 0) * ${adjusment}));
    .ux-flyout-arrow {
      ${location}: calc(100% - var(--ux-flyout-arrow-size, 0) / 2);
      transform: rotate(${rotation});
    }
  }`;
}

export default css`
  :global() {
    .ux-flyout {
      background-color: inherit;
      color: inherit;
      border-width: inherit;
      border-style: inherit;
      border-color: inherit;
      border-radius: inherit;
      filter: drop-shadow(0 2px 2px rgba(128, 128, 128, .4));
      box-sizing: border-box;

      &[data-escaped] {
        opacity: 1;
        transition: opacity .218s ease;
      }

      &[data-escaped='true'] {
        opacity: 0;
        pointer-events: none;
      }

      ${setPlacement('top', '45deg')}
      ${setPlacement('right', '135deg')}
      ${setPlacement('bottom', '-135deg')}
      ${setPlacement('left', '-45deg')}
    }

    .ux-flyout-arrow {
      --ux-flyout-arrow-clip: calc(50% - 1px);
      height: var(--ux-flyout-arrow-size, 0);
      width: var(--ux-flyout-arrow-size, 0);
      position: absolute;
      background: inherit;
      border: inherit;
      box-sizing: border-box;
      border-top-color: transparent;
      border-left-color: transparent;
      transform-origin: center center;
      clip-path: polygon(
        var(--ux-flyout-arrow-clip) var(--ux-flyout-arrow-clip),
        100% 0,
        100% 100%,
        0 100%
      );
    }
  }
`;
