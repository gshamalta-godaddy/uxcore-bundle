/**
 * Determine the arrow size given the input
 *
 * @param {Mixed} arrow - Value passed in from the props
 * @returns {String} - Final value to assign to the arrow size
 */
export function getArrowSize(arrow) {
  switch (typeof arrow) {
    case 'boolean':
      return arrow ? '1rem' : 0;
    case 'number':
      return `${arrow}px`;
    default:
      return arrow;
  }
}

/**
 * Determine if the event occurred outside of the targets' contexts
 *
 * @param {Object} ev - Original event object
 * @param {Array<Element>} targets - Elements to check against
 * @returns {Boolean} - Event occurred outside
 */
function isEventOutside(ev, targets) {
  const includedTargets = ev.composedPath().filter((elem) => targets.includes(elem));
  return !includedTargets.length;
}

/**
 * Creates data-attributes for flyout metadata
 *
 * @param {Object} config - Configuration object
 * @param {Object} config.hide - Values returned from the hide() middleware
 * @param {String} config.placement - Value describing the placement set as a result of the @floating-ui library
 * @returns {Object} - Attributes to spread onto the flyout component
 */
export function getFlyoutAttributes({ hide, placement }) {
  const { escaped, referenceHidden } = hide || {};
  return {
    'data-placement': placement,
    'data-escaped': escaped,
    'data-refhidden': referenceHidden
  };
}

/**
 * Prepares the styles to apply to the flyout
 *
 * @param {Object} config - Configuration object
 * @param {Number} config.x - Horizontal position
 * @param {Number} config.y - Vertical position
 * @param {String} config.strategy - Positioning strategy
 * @param {String} config.arrowSize - Arrow size
 * @returns {Object} - Styles to apply to the flyout
 */
export function getFlyoutStyle({ x: left, y: top, strategy: position, arrowSize, ...styles }) {
  return { position, top, left, '--ux-flyout-arrow-size': arrowSize || 0, ...styles };
}

/**
 * Setup for the useEffect for the document listeners
 *
 * @param {Array<Element>} targets - Elements to check against
 * @param {Function} callback - Function to execute when an event occurs outside
 * @returns {Function} - Teardown function
 */
export function outsideListeners(targets, callback) {
  function outsideEvent(ev) { isEventOutside(ev, targets) && callback(ev); }
  function escKey(ev) { ev.key === 'Escape' && callback(ev); }

  if (typeof callback === 'function') {
    document.addEventListener('click', outsideEvent);
    document.addEventListener('focus', outsideEvent, true);
    document.addEventListener('keydown', escKey);
  }
  return () => {
    document.removeEventListener('click', outsideEvent);
    document.removeEventListener('focus', outsideEvent, true);
    document.removeEventListener('keydown', escKey);
  };
}
