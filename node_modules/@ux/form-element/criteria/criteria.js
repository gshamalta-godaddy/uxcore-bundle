"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classNames = _interopRequireDefault(require("@ux/component-utilities/lib/classNames"));

var _reactTransitionGroup = require("react-transition-group");

var _reactValidationContext = require("react-validation-context");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * The primary criteria component.
 *
 * @displayName Criteria
 *
 * @class Criteria
 * @public
 */
class Criteria extends _react.Component {
  constructor() {
    super(...arguments);
    this.state = {
      validates: false
    };
    this.onValidChange = this.onValidChange.bind(this);
    this.setupRules = this.setupRules.bind(this);
  }
  /**
   * Validates the criteria by making sure every child is valid.
   *
   * @param {Object} valids The map of childs to their validities.
   * @returns {Boolean} Whether or not every child is valid.
   */


  validate(valids) {
    return Object.keys(valids).every(k => valids[k]);
  }
  /**
   * Wires up Rule child components.
   *
   * @returns {Array} The resulting children with wired up Rules.
   * @private
   */


  setupRules() {
    const {
      children,
      value,
      iconDesign
    } = this.props;
    let name = this.props.name;
    let key = 0;
    return _react.default.Children.map(children, c => {
      if (c.type.isRule !== true) {
        return c;
      }

      name = c.props.name || `${name} rule ${key}`;

      const w = /*#__PURE__*/_react.default.cloneElement(c, {
        key,
        name,
        value,
        iconDesign
      });

      key++;
      return w;
    });
  }
  /**
   * Wrap the onValidChange handler to set this.state.validates
   *
   * @param {string} name The criteria name
   * @param {boolean} isValid Whether the rule is valid
   * @param {boolean} wasValid Whether the rule used to be valid
   * @private
   */


  onValidChange(name, isValid, wasValid) {
    if (this.props.onValidChange) {
      this.props.onValidChange(name, isValid, wasValid);
    }

    this.setState({
      validates: isValid
    });
  }
  /**
   * Renders the component
   *
   * @returns {React.DOM} The rendered component
   */


  render() {
    const {
      visible,
      name,
      standalone,
      enableModern
    } = this.props;
    const {
      validates
    } = this.state;
    const display = visible ? 'block' : 'none';

    if (enableModern) {
      return /*#__PURE__*/_react.default.createElement(_reactValidationContext.Validate, {
        name: name || '',
        validate: this.validate,
        onValidChange: this.onValidChange
      }, /*#__PURE__*/_react.default.createElement(_reactTransitionGroup.CSSTransition, {
        classNames: "ux-criteria",
        in: standalone || visible && !validates,
        timeout: 400
      }, /*#__PURE__*/_react.default.createElement("div", {
        role: "alert",
        className: (0, _classNames.default)('ux-criteria', {
          standalone: standalone,
          valid: validates
        })
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: (0, _classNames.default)('ux-criteria-content', {
          'fade-in': visible && !validates,
          'fade-out': !visible || validates
        })
      }, this.setupRules()))));
    }

    return /*#__PURE__*/_react.default.createElement(_reactValidationContext.Validate, {
      name: name || '',
      validate: this.validate,
      onValidChange: this.onValidChange
    }, /*#__PURE__*/_react.default.createElement("div", {
      role: "alert",
      style: {
        display
      },
      className: (0, _classNames.default)('ux-criteria ux-criteria-relative', {
        standalone: standalone
      })
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "ux-criteria-content"
    }, this.setupRules())));
  }

}
/**
 * PropType validation.
 *
 * @type {Object}
 * @private
 */


exports.default = Criteria;
Criteria.propTypes = {
  /** The value of the data to which to apply the criteria */
  value: _propTypes.default.any,

  /** The name of the criteria */
  name: _propTypes.default.string,

  /** Called when the validation state changes */
  onValidChange: _propTypes.default.func,

  /** Whether the element is visible */
  visible: _propTypes.default.bool,

  /** The child elements */
  children: _propTypes.default.node,

  /** Specifies if the criteria is a standalone control or if it's
  tied to a form field */
  standalone: _propTypes.default.bool,

  /** Enable control animations and absolute positioning.
   * This should be avoided unless your app/site is experiencing
   * major issues as this will be removed shortly.  */
  enableModern: _propTypes.default.bool,

  /** Use custom criteria checkmark design for Criteria.Rules */
  iconDesign: _propTypes.default.any
};
/**
 * PropType defaults.
 *
 * @type {Object}
 * @private
 */

Criteria.defaultProps = {
  visible: true,
  name: '',
  standalone: true,
  enableModern: true
};