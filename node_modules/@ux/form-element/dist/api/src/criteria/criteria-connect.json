[
  {
    "description": "Component used to wire up Criteria to components which inherit from FormElement.\n\n@displayName Connect\n\n@class Connect\n@public",
    "displayName": "Connect",
    "methods": [
      {
        "name": "_onValidationHandler",
        "docblock": "Callback used when FormElement input value is updated.\n\n@param {any} value Value to validate against.\n@private",
        "modifiers": [],
        "params": [
          {
            "name": "value",
            "description": "Value to validate against.",
            "type": {
              "name": "any"
            },
            "optional": false
          }
        ],
        "returns": null,
        "description": "Callback used when FormElement input value is updated."
      },
      {
        "name": "_onChangeHandler",
        "docblock": "Callback used when FormElement input value changes.\n\n@param {Object} evt Change event.\n@private",
        "modifiers": [],
        "params": [
          {
            "name": "evt",
            "description": "Change event.",
            "type": {
              "name": "Object"
            },
            "optional": false
          }
        ],
        "returns": null,
        "description": "Callback used when FormElement input value changes."
      },
      {
        "name": "_onFocusHandler",
        "docblock": "Callback used when FormElement gains focus.\n\n@private",
        "modifiers": [],
        "params": [],
        "returns": null,
        "description": "Callback used when FormElement gains focus."
      },
      {
        "name": "_onBlurHandler",
        "docblock": "Callback used when FormElement loses focus.\n\n@private",
        "modifiers": [],
        "params": [],
        "returns": null,
        "description": "Callback used when FormElement loses focus."
      },
      {
        "name": "_onValidChangeHandler",
        "docblock": "Callback used when Criteria changes valid state.\n\n@param {Boolean} name Name of the Criteria.\n@param {Boolean} isValid Valid state of Criteria.\n@private",
        "modifiers": [],
        "params": [
          {
            "name": "name",
            "description": "Name of the Criteria.",
            "type": {
              "name": "Boolean"
            },
            "optional": false
          },
          {
            "name": "isValid",
            "description": "Valid state of Criteria.",
            "type": {
              "name": "Boolean"
            },
            "optional": false
          }
        ],
        "returns": null,
        "description": "Callback used when Criteria changes valid state."
      },
      {
        "name": "_setupInput",
        "docblock": "Wires up callbacks to the FormElement.\n\n@param {ReactElement} element FormElement.\n@returns {ReactElement} wired up FormElement.\n@private",
        "modifiers": [],
        "params": [
          {
            "name": "element",
            "description": "FormElement.",
            "type": {
              "name": "ReactElement"
            },
            "optional": false
          }
        ],
        "returns": {
          "description": "wired up FormElement.",
          "type": {
            "name": "ReactElement"
          }
        },
        "description": "Wires up callbacks to the FormElement."
      },
      {
        "name": "_setupCriteria",
        "docblock": "Wires up callbacks to the Criteria component.\n\n@param {ReactElement} element Criteria element.\n@returns {ReactElement} wired up Criteria.\n@private",
        "modifiers": [],
        "params": [
          {
            "name": "element",
            "description": "Criteria element.",
            "type": {
              "name": "ReactElement"
            },
            "optional": false
          }
        ],
        "returns": {
          "description": "wired up Criteria.",
          "type": {
            "name": "ReactElement"
          }
        },
        "description": "Wires up callbacks to the Criteria component."
      },
      {
        "name": "childrenPropTypes",
        "docblock": "PropType check that make sure child components are correct type and order.\n\n@param {Array} props Props\n@param {String} propName Name of prop\n@param {String} componentName Name of component\n@returns {*} null or Error if invalid children\n@private",
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "props",
            "description": "Props",
            "type": {
              "name": "Array"
            },
            "optional": false
          },
          {
            "name": "propName",
            "description": "Name of prop",
            "type": {
              "name": "String"
            },
            "optional": false
          },
          {
            "name": "componentName",
            "description": "Name of component",
            "type": {
              "name": "String"
            },
            "optional": false
          }
        ],
        "returns": {
          "description": "null or Error if invalid children",
          "type": {
            "name": "mixed"
          }
        },
        "description": "PropType check that make sure child components are correct type and order."
      }
    ],
    "props": {
      "children": {
        "type": {
          "name": "custom",
          "raw": "(props, propName, componentName) {\n  const _children = React.Children.toArray(props[propName]);\n  if (_children.length !== 2) {\n    return new Error(\n      `${componentName} may only have 2 child components`\n    );\n  }\n\n  const input = _children[0];\n  const criteria = _children[1];\n  if (!input.props.label && !input.props.placeholder) {\n    return new Error(\n      `${componentName} must have a FormElement component as the first child`\n    );\n  }\n\n  if (!isElementOfComponentType(criteria, Criteria)) {\n    return new Error(\n      `${componentName} must have a Criteria component as second child`\n    );\n  }\n\n  return null;\n}"
        },
        "required": false,
        "description": "The child elements"
      },
      "forceValidation": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether validation should be performed on initial mount"
      },
      "enableModern": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Enable control animations and absolute positioning.\nThis should be avoided unless your app/site is experiencing\nmajor issues as this will be removed shortly.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      }
    }
  }
]