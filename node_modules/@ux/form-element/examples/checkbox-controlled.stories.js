import React from 'react';
import PropTypes from 'prop-types';
import { Checkbox, Form } from '@ux/uxcore2';

const values = ['foo', 'bar', 'baz', 'quux'];

const messages = {
  on: 'On',
  off: 'Off'
};

function Message({ id }) {
  return <span>{messages[id]}</span>;
}

Message.propTypes = {
  id: PropTypes.string
};

export default class CheckboxControlled extends React.Component {
  constructor() {
    super(...arguments);
    this.state = this.state || {};
    this.onCheckboxChange = this.onCheckboxChange.bind(this);
  }

  onCheckboxChange(e) {
    const { value, checked } = e.target;
    this.setState({ [value]: checked });
  }

  render() {
    const { onCheckboxChange } = this;
    const selected = [];
    const checkboxes = values.map(value => {
      const checked = !!this.state[value];
      if (checked) {
        selected.push(value);
      }

      // For sake of demonstration, we are using a silly `Message` component that has an `id` prop that will **NOT** be unique
      // across the checkboxes. As a result, we specify a unique `id` on each checkbox instead.
      const label = <Message id={ checked ? 'on' : 'off' } />;
      const id = `controlled-${value}`;

      return <div className='form-test' key={ value }>
        { value }:
        <br />
        <Checkbox
          name='controlled'
          value={ value }
          id={ id }
          label={ label }
          checked={ checked }
          onChange={ onCheckboxChange }
        />
      </div>;
    });

    const selectedText = selected.length
      ? selected.join(', ')
      : '(none)';

    return <Form>
      {checkboxes}
      <output>Selected: {selectedText}</output>
    </Form>;
  }
}
