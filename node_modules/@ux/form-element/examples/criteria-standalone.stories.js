import { FormElement, Button, Criteria } from '@ux/uxcore2';
import React from 'react';

export default class CriteriaStandaloneExample extends React.Component {
  constructor() {
    super();

    this.state = {
      inputValue: '',
      inputValid: false
    };

    this.onChangeHandler = this.onChangeHandler.bind(this);
    this.onValidChangeHandler = this.onValidChangeHandler.bind(this);
  }

  onChangeHandler(evt) {
    this.setState({
      inputValue: evt.target.value
    });
  }

  onValidChangeHandler(name, isValid) {
    this.setState({
      inputValid: isValid
    });
  }

  render() {
    // Setting validates to null will put FormElement style back to a 'pristine' state
    const validates = this.state.inputValue !== '' ? this.state.inputValid : null;

    return (
      <div>
        <FormElement
          label='Simple Input'
          placeholder='Type Something'
          validates={ validates }
          value={ this.state.inputValue }
          onChange={ this.onChangeHandler } />

        <Criteria value={ this.state.inputValue } onValidChange={ this.onValidChangeHandler }>
          <Criteria.Header>Your password must</Criteria.Header>

          <Criteria.Rule validate={ (v) => v.length >= 9 }>
            Be at least 9 characters. This is an example of a long rule description in order
            to demonstrate word-wrapping text.
          </Criteria.Rule>

          <Criteria.Rule validate={ (v) => /\d/.test(v) }>
            Include a number
          </Criteria.Rule>

          <Criteria.Rule validate={ (v) => /[A-Z]/.test(v) }>
            Include an uppercase letter
          </Criteria.Rule>

          <Criteria.Rule validate={ (v) => /[a-z]/.test(v) }>
            Include an lowercase letter
          </Criteria.Rule>
        </Criteria>

        <Button disabled={ !this.state.inputValid }>Go!</Button>
      </div>
    );
  }
}
