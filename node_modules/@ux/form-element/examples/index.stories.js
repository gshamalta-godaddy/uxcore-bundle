/* eslint-disable react/no-unescaped-entities*/

import React, { Component } from 'react';
import { ComponentRenderer } from '@ux/gxsys-page';
import packageJson from '../package.json';

export default class SandboxFormElement extends Component {

  introduction() {
    return (
      <p>
        The <code>form-element</code> component is the core layer of all input
        elements. It provides features that are needed to correctly display inputs
        in various of layouts.
      </p>
    );
  }

  designDocs() {
    return 'https://github.com/gdcorp-uxp/uxcore2/blob/main/packages/components/form-element/examples/design/README.md';
  }

  packageInfo() {
    return {
      source: {
        name: packageJson.name,
        link: packageJson.homepage
      },
      version: packageJson.version,
      installCmd: `npm install ${packageJson.name}`,
      platformSupport: {
        android: true,
        ios: true,
        web: true
      },
      license: packageJson.license || 'Proprietary',
      relatedComponents: [
        'Checkbox',
        'Radio',
        'Form Group',
        'Checkbox Group',
        'Radio Group'
      ]
    };
  }

  apiDocs() {
    return [
      require('./api/src/element.json'),
      require('./api/src/flip.json'),
      require('./api/src/textual.json')
    ];
  }

  a11y() {
    return (
      <ul>
        <li>Added <code>eslint-plugin-jsx-a11y</code> for a11y linting.</li>
        <li>Added auto generating <code>id</code> that will connect it the the correct input using <code>aria-labelledby</code>.</li>
        <li>Added <code>aria-labelledby</code> to the inputs to connect them to their corresponding <code>label</code>.</li>
        <li>Added <code>aria-label='required'</code> to the asterisk that denotes that the input is required.</li>
        <li>Added <code>aria-disabled</code> that dynamically informs the user if the input is disabled or not.</li>
        <li>Added <code>aria-label='form_input_instructions'</code> to inform the user that there are instructions on inputs.</li>
        <li>Added <code>role='alert'</code> to the form error to alert the user that there is an error in the input.</li>
        <li>Changed the clear element to a <code>button</code> from an <code>a</code> tag.</li>
        <li>Added <code>aria-label='clear_field'</code> to inform the user that there is a clear element for the input.</li>
        <li>Added <code>aria-hidden='true'</code> to the clear input field icon as it would not be read well by the screen reader.</li>
      </ul>
    );
  }

  examples() {
    return [{
      jsx: require('!!raw-loader!./default'),
      Component: require('./default'),
      id: 'default-form-element',
      name: 'Default',
      description: (
        <p>
          This is the most basic rendering of the form-element. The only required
          property is the label (besides all default required values like name etc).
        </p>
      ),
      design: {
        general: (
          <div>
            <div className='row'>
              <div className='col-xs-12 col-sm-6'>
                <h3 className='subheadline-primary'>Default</h3>
                <img className='img-fluid' src='/images/inputDefault.png' alt='default input' />
              </div>
              <div className='col-xs-12 col-sm-6'>
                <h3 className='subheadline-primary'>Error</h3>
                <img className='img-fluid' src='/images/inputError.png' alt='error input' />
              </div>
            </div>
            <div className='row'>
              <div className='col-xs-12 col-sm-6'>
                <h3 className='subheadline-primary'>Clear</h3>
                <img className='img-fluid' src='/images/inputClear.png' alt='clear input' />
              </div>
            </div>
          </div>
        )
      }
    }, {
      jsx: require('!!raw-loader!./size'),
      Component: require('./size'),
      id: 'size-form-element',
      name: 'Size',
      description: (
        <p>
          A string, either `large` or `small`, can be passed in as a size property.
          This is used to determine the height and font size of the input field. If no
          size is given, the default will be rendered. <strong>`large` now maps to the `default`
          size to match the button sizes.</strong>
        </p>
      )
    }, {
      jsx: require('!!raw-loader!./custom'),
      Component: require('./custom'),
      id: 'custom-form-element',
      name: 'Custom',
      description: (
        <p>
          The input field is the most common and important form element. It is
           the base element for handling a variety of data input types such as
           text, numbers, or email.
        </p>
      )
    }, {
      jsx: require('!!raw-loader!./required'),
      Component: require('./required'),
      id: 'required-form-element',
      name: 'Required',
      description: (
        <p>
          To mark the element as a required, you can set required flag. This will
          automatically add an asterisk as indication. You can also optionally set
          a custom error message (by default, it is "*Required").
          <br/><br/>
          An asterisk will always be displayed on required form elements, even if
          all elements within the form are required. This provides users a consistent
          experience when interacting with forms across applications.
        </p>
      ),
      design: {
        general: (
          <div className='row'>
            <div className='col-xs-12 col-sm-6'>
              <h3 className='subheadline-primary'>Required</h3>
              <img className='img-fluid' src='/images/inputRequired.png' alt='required input' />
            </div>
          </div>
        )
      }
    }, {
      jsx: require('!!raw-loader!./id'),
      Component: require('./id'),
      id: 'custom-id-element',
      name: 'ID',
      description: (
        <p>
          The input elements have labels assigned to them so they automatically
          focus the input element when clicked. This requires <code>id</code>
          properties to be specified on the elements. Normally, we generate these
          from the label content. But if you have duplicate labels, or just want to
          control the ids yourself, you can just assign it an <code>id</code> property.
        </p>
      )
    }, {
      jsx: require('!!raw-loader!./clearable'),
      Component: require('./clearable'),
      id: 'clearable',
      name: 'Clearable',
      description: (
        <p>
          Add small clickable clear button on the element to allow users to easily
          erase the value from the input. Just add <code>clearable</code> as
          attribute on the element and you are done.
        </p>
      )
    }, {
      jsx: require('!!raw-loader!./type'),
      Component: require('./type'),
      id: 'type-form-element',
      name: 'Types',
      description: (
        <p>
          The element renders as type <code>text</code> by default. Just like an
          regular input element, you can just change this value using the type
          property. If you want to use a <code>password</code> type, we suggest that
          you look at our <a href='https://gxsys.uxp.int.godaddy.com/#/pages/components/forms/password'>
            password
          </a> component first.
        </p>
      )
    }, {
      jsx: require('!!raw-loader!./autocomplete'),
      Component: require('./autocomplete'),
      id: 'autocomplete-form-element',
      name: 'Autocomplete',
      description: (
        <p>
          The HTML autocomplete attribute is available on several kinds of { `<input>` } elementsâ€”those
          that take a text or numeric value as input. autocomplete lets web developers specify what
          if any permission the user agent has to provide automated assistance in filling out form
          field values, as well as guidance to the browser as to the type of information expected
          in the field. For a list of available values,
          <a href='https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete'> see the MDN docs</a>.
        </p>
      )
    }, {
      jsx: require('!!raw-loader!./notice'),
      Component: require('./notice'),
      id: 'notice-form-element',
      name: 'Notice',
      description: (
        <p>
          The <code>notice</code> adds a small text phrase under the input element, which can be used to add
          some instructions for users or simply help them understand the purpose of a field.
        </p>
      )
    }, {
      jsx: require('!!raw-loader!./button'),
      Component: require('./button'),
      id: 'button-form-element',
      name: 'Button',
      description: (
        <p>
          Adds a small button on the right side of the input element. For a username
          field this can be used to point users to a forgot, username, page, etc. This
          field should be used with either a <code>href</code> option to specify
          the URL. Or an <code>action</code> which is a custom action that is trigged.
          In the example below, we are using the href property to point a user to a
          forgotten form.
        </p>
      )
    }, {
      jsx: require('!!raw-loader!./navigation'),
      Component: require('./navigation'),
      id: 'navigation-form-element',
      name: 'Navigation',
      description: (
        <div>
          <p>
            Optional secondary button to be used in  conjunction with <code>button</code>.
            If <code>href</code> is provided it will be set on <code>navigation</code>
            instead of <code>button</code> if both are provided. If any <code>action</code>
            is provided it will be used on <code>button</code> or ignored if no
            <code>button</code> is supplied.
          </p>
          <p>
            In the example below, we are using the href property to point a user to a
            forgotten form along with a help icon.
          </p>
        </div>
      )
    }, {
      jsx: require('!!raw-loader!./placeholder'),
      Component: require('./placeholder'),
      id: 'default-placeholder',
      name: 'Placeholder',
      description: (
        <p>
          A text input can have placeholder text.
        </p>
      )
    }, {
      jsx: require('!!raw-loader!./validation'),
      Component: require('./validation'),
      id: 'validation-form-element',
      name: 'Validate',
      description: (
        <p>
          Validation might be one of the most important aspects of an input element.
          Thats why we made it as easy and flexible as possible. If you supply us
          with a <code>validate</code> function, it will be called when the input
          needs to be validated. It will receive the value of the input element as
          first argument. The returned boolean of your function will indicate if it
          validated successfully by returning the <code>true</code> boolean. If the
          value is invalid, the <code>false</code> boolean should be returned.
          You can also optionally set a custom error message using the <code>failure</code> property.
        </p>
      )
    }, {
      jsx: require('!!raw-loader!./dynamic-failure'),
      Component: require('./dynamic-failure'),
      id: 'dynamic-failure',
      name: 'Dynamic Failure',
      description: (
        <p>
          It is often useful to display a dynamic failure message to your users
          depending on the input that they've provided. If there are multiple
          such criteria then consider using a <code>Criteria</code> instance instead.
        </p>
      )
    }, {
      jsx: require('!!raw-loader!./disabled'),
      Component: require('./disabled'),
      id: 'default-disabled',
      name: 'Disabled',
      description: (
        <p>
          The disabled state of an input element
        </p>
      )
    }, {
      jsx: require('!!raw-loader!./merch'),
      Component: require('./merch'),
      id: 'merch-form-element',
      name: 'Merchandising Input',
      description: (
        <p>
          A text input with merchandising styles. Use the `merch` property
          to apply merchandising input styles.
        </p>
      )
    }, {
      jsx: require('!!raw-loader!./sronly'),
      Component: require('./sronly'),
      id: 'default-sronly',
      name: 'sronly (screen reader only)',
      description: (
        <p>
          The label is hidden but will be announced by the screen reader.
        </p>
      )
    }, {
      jsx: require('!!raw-loader!./grid'),
      Component: require('./grid'),
      id: 'grid-form-element',
      name: 'Grid',
      description: (
        <p>
          You can use grids with form element labels and inputs. The <code>grid</code> attribute accepts an object with
          a <code>label</code> and an <code>input</code> property, which are applied to the appropriate element
          using <code>classNames</code>.
        </p>
      )
    }, {
      jsx: require('!!raw-loader!./inline'),
      Component: require('./inline'),
      id: 'inline-form-element',
      name: 'Inline',
      description: (
        <p>
          The form is styled as block element by default, in order to make it inline
          you can set the <code>inline</code> boolean.
        </p>
      )
    }, {
      jsx: require('!!raw-loader!./upload'),
      Component: require('./upload'),
      id: 'upload-form-element',
      name: 'Upload',
      description: (
        <p>
          When we detect that a file upload is present in the form and that no
          <code>encType</code> has been provided as properties we will automatically
          set this to the required multipart type.
        </p>
      )
    }, {
      jsx: require('!!raw-loader!./textarea'),
      Component: require('./textarea'),
      id: 'textarea-element',
      name: 'Textarea',
      description: (
        <p>
          A text area is a multiple line field used when a user has the ability to enter longer strings, such as in a description.
        </p>
      )
    }];
  }

  render() {
    return <ComponentRenderer
      name='Form Element'
      component='@ux/form-element'
      introduction={ this.introduction() }
      designDocs={ this.designDocs() }
      packageInfo={ this.packageInfo() }
      documentation={ this.apiDocs() }
      a11y={ this.a11y() }
      examples={ this.examples() }
      { ...this.props }
    />;
  }
}
