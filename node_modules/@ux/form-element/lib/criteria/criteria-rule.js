"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classNames = _interopRequireDefault(require("@ux/component-utilities/lib/classNames"));

var _refresh = _interopRequireDefault(require("@ux/icon/refresh"));

var _checkmark = _interopRequireDefault(require("@ux/icon/checkmark"));

var _reactValidationContext = require("react-validation-context");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

/**
 * Component used to define a criteria rule.
 *
 * @displayName Rule
 *
 * @class Rule
 * @public
 */
class Rule extends _react.Component {
  constructor() {
    super(...arguments);
    this.state = _objectSpread(_objectSpread({}, this.state), {}, {
      isValid: false,
      promisePending: false
    });
    this._queuedValue = null;
  }
  /**
   * React lifecycle hook invoked when component is mounted.
   *
   * @private
   */


  componentDidMount() {
    this._performValidate(this.props.value);
  }
  /**
   * React lifecycle hook invoked when new props are being received.
   *
   * @param {Object} prevProps previous props
   * @private
   */


  componentDidUpdate(prevProps) {
    if (this.props.value !== prevProps.value) {
      this._performValidate(this.props.value);
    }
  }
  /**
   * Executes validate function. If a validate promise is pending, value is queued.
   *
   * @param {*} value The valid to validate.
   * @private
   */


  _performValidate(value) {
    if (this.state.promisePending) {
      this._queuedValue = value;
      return;
    }

    const isValid = this.props.validate(value);

    if (typeof Promise !== 'undefined' && isValid instanceof Promise) {
      const newState = {
        promisePending: true
      };

      if (this.state.isValid) {
        newState.isValid = false;
      }

      isValid.then(() => {
        this._setValidateResults(true);
      }, () => {
        this._setValidateResults(false);
      });
      this.setState(newState);
    } else {
      this._setValidateResults(isValid);
    }
  }
  /**
   * Updates component state and performs validate if there is a queued value.
   *
   * @param {Boolean} isValid Did the rule validate or not.
   * @private
   */


  _setValidateResults(isValid) {
    const newState = {};

    if (this.state.promisePending) {
      newState.promisePending = false;
    }

    if (this.state.isValid !== isValid) {
      newState.isValid = isValid;
    }

    if (Object.keys(newState).length) {
      this.setState(newState);
    }

    if (this._queuedValue !== null) {
      this._performValidate(this._queuedValue);

      this._queuedValue = null;
    }
  }
  /**
   * Renders the component.
   *
   * @returns {React.DOM} Rendered form element.
   * @private
   */


  render() {
    const {
      name,
      onValidChange
    } = this.props;
    const {
      isValid
    } = this.state;
    const iconStateClass = isValid ? 'success' : '';

    let renderIcon = /*#__PURE__*/_react.default.createElement("span", {
      className: 'icon ' + iconStateClass
    }, /*#__PURE__*/_react.default.createElement(_checkmark.default, {
      "aria-hidden": "true",
      width: 17,
      height: 17
    }));

    const ariaCriteriaItem = isValid ? 'true' : 'false';

    if (this.state.promisePending) {
      renderIcon = /*#__PURE__*/_react.default.createElement("span", {
        className: "icon"
      }, /*#__PURE__*/_react.default.createElement(_refresh.default, {
        "aria-hidden": "true"
      }));
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      role: "alert",
      className: (0, _classNames.default)('ux-criteria-rule', {
        'ux-criteria-rule-checked': isValid
      }),
      "aria-hidden": ariaCriteriaItem
    }, /*#__PURE__*/_react.default.createElement(_reactValidationContext.Validates, {
      name: name || '',
      validates: isValid,
      onValidChange: onValidChange
    }), renderIcon, /*#__PURE__*/_react.default.createElement("span", {
      className: `ux-criteria-rule-text`
    }, this.props.children));
  }

}
/**
 * PropType validation.
 *
 * @type {Object}
 * @private
 */


exports.default = Rule;
Rule.propTypes = {
  /** How to validate the data, returns true if data is valid */
  validate: _propTypes.default.func.isRequired,

  /** The data being validated */
  value: _propTypes.default.any,

  /** Function called when validation state changes */
  onValidChange: _propTypes.default.func,

  /** The name of the criteria */
  name: _propTypes.default.string,

  /** Child elements */
  children: _propTypes.default.node
};
/**
 * Flag the component as a rule for criteria component to look for.
 *
 * @type {boolean}
 * @private
 */

Rule.isRule = true;