"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultProps = void 0;
exports.getStateProperty = getStateProperty;
exports.getType = getType;
exports.getValue = getValue;
exports.propTypes = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _button = _interopRequireDefault(require("@ux/button"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

/**
 * Default properties used for components.
 *
 * @type {Object}
 * @public
 */
const defaultProps = {
  input: {
    size: 'default',
    value: '',
    grid: {}
  }
};
/**
 * Allowed properties for both the wrapping element and internal input element.
 *
 * @type {Object}
 * @public
 */

exports.defaultProps = defaultProps;
const props = {
  /** DEPRECATED: Please use 'controls'. This indicates that a button has to be rendered on the right side of the label which
   * you can use to hide/show things for a given element. This does require the action property
   * to also be supplied. */
  button: _propTypes.default.node,

  /** DEPRECATED: Please use 'controls'. optional secondary form element button to be used in conjunction with button.
   * If href is provided it will be set on navigation instead of button if both are provided.
   * If any action is provided it will be used on button or ignored if no button is supplied. */
  navigation: _propTypes.default.node,

  /** Controls to be rendered to the right side of the label, this can be any grouping of elements. */
  controls: _propTypes.default.node,
  elements: _propTypes.default.object,

  /** An error element that will be rendered */
  error: _propTypes.default.element,

  /** An object with classNames if you want to render the input elements in a specific grid.
   * It should have a label and input property with the classNames as value. Note: Provide
   * numbers that represent the relative flex property instead of a className. */
  grid: _propTypes.default.object,

  /** Hide the label for the element */
  hideLabel: _propTypes.default.bool,

  /** The ID of the element, if none is provided, an ID will be generated. It is recommended to provide an ID */
  id: _propTypes.default.string,

  /** Indication if the element should be rendered as inline element. */
  inline: _propTypes.default.bool,

  /** A raw input element to be rendered */
  input: _propTypes.default.element,

  /** The label for the element */
  label: _propTypes.default.node.isRequired,

  /** Prevent the user from changing the value of the input. */
  readOnly: _propTypes.default.bool,

  /** Optional small text that needs to be added at the bottom of the input element. Can be used for hints. */
  notice: _propTypes.default.node,

  /** A change handler triggered whenever the input value changes. */
  onChange: _propTypes.default.func,

  /** A change handler triggered whenever the component blurs (is deselected). */
  onBlur: _propTypes.default.func,

  /** Disables the form element */
  disabled: _propTypes.default.bool,

  /** Do not render the element in a fieldset but use an empty div instead. */
  proxy: _propTypes.default.bool,

  /** The type of input element that needs to be rendered. If nothing is provided, the default text type is used instead. */
  type: _propTypes.default.string,

  /** For checkbox only. True when checkbox's state is indeterminate. */
  indeterminate: _propTypes.default.bool,

  /** Marks the form element as required for the form */
  required: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.bool]),

  /** The value for input element. */
  value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.bool])
};
/**
 * Defined seperatly as the UXCore2 bundle will remove propTypes for performance,
 * FormElement._input depends on this data, this reference will keep it around.
 *
 * @type {Object}
 * @public
 */

const propTypes = {
  input: props,
  element: _objectSpread(_objectSpread({}, props), {}, {
    /** A string to specify what, if any, autocomplete data should be used.
     * https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete */
    autoComplete: _propTypes.default.string,

    /** A string to use as an error message under the input element for invalid input. */
    failure: _propTypes.default.string,

    /** Indicates if the input is valid.  Overrides the validate function.
     * Note: Use this when the output of validate is the result of higher
     * order properties that are passed in. */
    validates: _propTypes.default.bool,

    /** A function that returns a boolean as indication for invalid or valid
     * state of the input element. It receives the value as first argument.
     * Note: use this when state is internal to the element, e.g. value or
     * onChange should not be passed in as property. */
    validate: _propTypes.default.func,

    /** A function that is triggered after the value is updated, by the user or programatically.
      *  Note: Do not use this when wrapping with a Critera.Connect component. */
    onValidation: _propTypes.default.func,

    /** Optional string, either large or small, that corresponds to a large/small height and font size
     * of the input field. The default sizes will display if no string is given */
    size: _propTypes.default.string,

    /** Callback for validity changes. See "Validation". */
    onValidChange: _propTypes.default.func,

    /** The design to use for the input, see @ux/button for design options */
    design: _propTypes.default.oneOf(Object.values(_button.default.designs)),

    /** Adds a small clickable clear button on the element to allow users to easily erase the value from the input.*/
    clearable: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.bool])
  })
};
/**
 * Validates event object
 *
 * @param {SyntheticEvent} event Change event of TextInput or input element.
 * @returns {Boolean} Argument is eventlike.
 * @public
 */

exports.propTypes = propTypes;

function isEvent(event) {
  return typeof event === 'object' && 'target' in event;
}
/**
 * Return the value from an event.
 *
 * @param {SyntheticEvent} event Change event of TextInput or input element.
 * @returns {String} Input value.
 * @public
 */


function getValue(event) {
  if (!isEvent(event)) {
    return event;
  }

  const target = event.target || {};
  return target.value;
}
/**
 * Return the type of input element
 *
 * @param {SyntheticEvent} event Change event of TextInput or input element.
 * @returns {String|Undefined} Input type.
 * @public
 */


function getType(event) {
  if (!isEvent(event)) {
    return;
  }

  return event.target.type || 'text';
}
/**
 * Get the property name that should be used to store in state.
 *
 * @param {String} type Input type.
 * @returns {String} Property name.
 * @public
 */


function getStateProperty(type) {
  //
  // For types like checkbox, radio or unknown (i.e. RN Switch) return `checked` as the preferred property
  //
  if (!type || type === 'checkbox' || type === 'radio') {
    return 'checked';
  }

  return 'value';
}