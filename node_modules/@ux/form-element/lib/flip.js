"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Flip = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classNames = _interopRequireDefault(require("@ux/component-utilities/lib/classNames"));

var _fieldset = _interopRequireDefault(require("@ux/fieldset"));

var _checkmark = _interopRequireDefault(require("@ux/icon/checkmark"));

var _minus = _interopRequireDefault(require("@ux/icon/minus"));

var _button = _interopRequireDefault(require("@ux/button"));

var _enums = require("./enums");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

/**
 * Renders a radio/checkbox element according to the design specifications.
 *
 * @displayName Flip (Radio / Checkbox) (Web)
 *
 * @class Flip
 * @private
 */
class Flip extends _react.Component {
  /**
   * Render the actual component.
   *
   * @returns {React.DOM} The component.
   * @private
   */
  render() {
    let currentChecked = !!this.props.checked;

    if (typeof this.props.elements.input !== 'undefined') {
      currentChecked = this.props.elements.input.checked;
    } //
    // This forces the input element to be rendered as a correct checkbox/radio
    // element.
    //


    const isButton = this.props.design === 'button' || _button.default.designs.includes(this.props.design);

    const className = (0, _classNames.default)({
      'ux-custom-control-inline': this.props.inline
    }, ['ux-custom-control', `ux-custom-${this.props.type}`]);
    const targetClassName = (0, _classNames.default)({
      'ux-button': isButton,
      [`ux-button-${this.props.design}`]: _button.default.designs.includes(this.props.design)
    }, ['ux-custom-target']);
    const indicatorClassName = 'ux-control-indicator';
    let indicator;

    if (this.props.type === 'checkbox') {
      indicator = this.props.indeterminate ? /*#__PURE__*/_react.default.createElement(_minus.default, {
        className: indicatorClassName
      }) : /*#__PURE__*/_react.default.createElement(_checkmark.default, {
        className: indicatorClassName
      });
    } else if (this.props.type === 'radio') {
      indicator = /*#__PURE__*/_react.default.createElement("span", {
        className: indicatorClassName
      });
    }

    const label = /*#__PURE__*/_react.default.createElement("label", {
      className: (0, _classNames.default)({
        'sr-only': this.props.hideLabel && !isButton
      }),
      htmlFor: this.props.id,
      ref: r => {
        this.props.elements.label = r;
      },
      id: 'label-' + this.props.id
    }, this.props.label);

    const target = /*#__PURE__*/_react.default.createElement("div", {
      className: targetClassName,
      disabled: this.props.disabled,
      role: "switch",
      "aria-checked": currentChecked
    }, this.props.input, !isButton && indicator, label);

    const control = /*#__PURE__*/_react.default.createElement("div", {
      className: className
    }, target, this.props.notice, this.props.error);

    return /*#__PURE__*/_react.default.createElement(_fieldset.default, {
      proxy: !!this.props.proxy
    }, control);
  }

}
/**
 * PropType validation
 *
 * @type {Object}
 * @private
 */


exports.Flip = Flip;
Flip.propTypes = _objectSpread(_objectSpread({}, _enums.propTypes.input), {}, {
  /** The design to use for the input, see @ux/button for design options */
  design: _propTypes.default.oneOf(Object.values(_button.default.designs)),

  /** True if the element (radio or checkbox) is checked */
  checked: _propTypes.default.bool,

  /** For checkbox only. True when checkbox's state is indeterminate. */
  indeterminate: _propTypes.default.bool
});
/**
 *
 * @enum {Object} defaultProps
 * @public
 */

Flip.defaultProps = _objectSpread({}, _enums.defaultProps.input);
var _default = Flip;
exports.default = _default;