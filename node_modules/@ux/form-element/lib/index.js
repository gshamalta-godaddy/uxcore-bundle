"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Fieldset", {
  enumerable: true,
  get: function () {
    return _fieldset.default;
  }
});
Object.defineProperty(exports, "Flip", {
  enumerable: true,
  get: function () {
    return _flip.default;
  }
});
exports.FormElement = void 0;
Object.defineProperty(exports, "Textual", {
  enumerable: true,
  get: function () {
    return _textual.default;
  }
});
Object.defineProperty(exports, "Validation", {
  enumerable: true,
  get: function () {
    return _element.default;
  }
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _enums = require("./enums");

var _classNames = _interopRequireDefault(require("@ux/component-utilities/lib/classNames"));

var _button = _interopRequireDefault(require("@ux/button"));

var _fieldset = _interopRequireDefault(require("@ux/fieldset"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _textual = _interopRequireDefault(require("./textual"));

var _element = _interopRequireDefault(require("./element"));

var _flip = _interopRequireDefault(require("./flip"));

var _react = _interopRequireDefault(require("react"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

/**
 * Render a form element.
 *
 * @constructor
 * @public
 */
class FormElement extends _element.default {
  /**
   * Optionally render controls to appear to the right of the label. This can include the button, href, navigation or combination
   *
   * @returns {React.DOM|Undefined} A React DOM structure if we're supplied controls
   * @private
   */
  _controls() {
    const controls = this.select('controls');
    let navigation = this.select('navigation');
    let button = this.select('button');
    let href = this.select('href');

    if (!controls && !navigation && !button) {
      return null;
    }

    if (typeof button === 'string') {
      if (!href) href = '#';
      button = /*#__PURE__*/_react.default.createElement(_button.default, {
        href: href,
        text: button,
        size: "small",
        design: "inline"
      });
    }

    if (typeof navigation === 'string') {
      if (!href) href = '#';
      navigation = /*#__PURE__*/_react.default.createElement(_button.default, {
        href: href,
        text: navigation,
        size: "small",
        design: "inline"
      });
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "form-element-controls",
      key: "button"
    }, controls || /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, navigation, button));
  }
  /**
   * Optionally render a * (required) indicator
   *
   * @returns {React.DOM|Undefined} A React DOM structure if we're supplied with a notice
   * @private
   */


  _required() {
    if (!this.select('required')) return;
    return /*#__PURE__*/_react.default.createElement("span", {
      className: "req",
      "aria-hidden": "true"
    }, "*");
  }
  /**
   * Generate an input element based on the generated data.
   *
   * @param {Object} data Input creation information.
   * @returns {React.DOM} The generated input element.
   * @private
   */


  _input(data) {
    data = data || this.attributes();
    this.ignoreProps.push('href');
    this.ignoreProps.push('merch');
    this.ignoreProps.push('action');
    this.ignoreProps.push('ariaLabels');
    this.ignoreProps.push('defaultValue');
    const spread = this.filter(data);
    const InputType = data.type !== 'textarea' ? 'input' : 'textarea';

    const input = /*#__PURE__*/_react.default.createElement(InputType, (0, _extends2.default)({}, spread, data, {
      ref: i => {
        this.elements.input = i;
      }
    }));

    return input;
  }
  /**
   * Optionally include a notice in the form element if provided through the
   * options.
   *
   * @returns {React.DOM|Undefined} A React DOM structure if we're supplied with a notice
   * @private
   */


  _notice() {
    if (!this.select('notice')) return;
    return /*#__PURE__*/_react.default.createElement("small", {
      className: "form-text",
      ref: notice => {
        this.elements.notice = notice;
      }
    }, this.select('notice'));
  }
  /**
   * Render an error message below an input.
   *
   * @returns {React.DOM|Undefined} A React DOM structure if we have an error msg.
   * @private
   */


  _error() {
    const {
      error,
      hadInput
    } = this.state;
    const {
      id
    } = this.attributes();
    if (!error || !hadInput) return;
    return /*#__PURE__*/_react.default.createElement("small", {
      className: "form-text form-error",
      role: "alert",
      id: `field-error-${id}`,
      "aria-describedby": id
    }, error);
  }
  /**
   * Generate all the attributes to be rendered on an input.
   *
   * @returns {Object} Required data to render an input.
   * @private
   */


  attributes() {
    const superAttrs = super.attributes();
    const {
      id
    } = superAttrs;
    const {
      error,
      isValid,
      hadInput
    } = this.state;
    return _objectSpread(_objectSpread({}, superAttrs), {}, {
      'aria-labelledby': id && `label-${id}`,
      'aria-disabled': this.select('disabled'),
      'aria-required': !!this.select('required'),
      'aria-describedby': error && hadInput && `field-error-${id}`,
      'aria-invalid': error && hadInput,
      'className': (0, _classNames.default)(this.select('className'), {
        'form-control': !this.isFlip,
        'custom-control-input': this.isFlip,
        'form-control-danger': hadInput && isValid === false,
        'form-control-lg': this.props.size === 'large',
        'form-control-sm': this.props.size === 'small',
        'form-control-merch': this.props.merch
      })
    });
  }

}
/**
 * PropType validation
 *
 * @type {Object}
 * @public
 */


exports.FormElement = FormElement;
FormElement.propTypes = _objectSpread(_objectSpread(_objectSpread({}, _enums.propTypes.element), _element.default.propTypes), {}, {
  /**
   * This only works if you've also set the button or navigation property.
   * Represents the href of the button (or navigation if provided). If the
   * associated property (i.e. button or navigation) is a string and href is not
   * provided it will default to #.
   */
  href: _propTypes.default.string
}); //
// Expose the main FormElement class. Also expose classes that could and are
// used externally.
//

var _default = FormElement;
exports.default = _default;