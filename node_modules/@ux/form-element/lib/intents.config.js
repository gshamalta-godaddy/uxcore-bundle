"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _intents = _interopRequireWildcard(require("@ux/intents"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// eslint-disable-next-line max-statements
var _default = function () {
  const intents = new _intents.default();
  intents.create('@ux/form-element', {
    expressions: [_intents.enums.expressions.CRITICAL],
    interactions: [_intents.enums.interactions.FOCUSED],
    styleProperties: [_intents.enums.properties.BACKGROUND_COLOR, _intents.enums.properties.FOREGROUND_COLOR, _intents.enums.properties.BORDER_COLOR, _intents.enums.properties.OUTLINE_COLOR, _intents.enums.properties.BORDER_RADIUS, _intents.enums.properties.FONT_FAMILY, _intents.enums.properties.FONT_SIZE, _intents.enums.properties.FONT_WEIGHT, _intents.enums.properties.LINE_HEIGHT],
    features: {
      placeholder: {
        styleProperties: [_intents.enums.properties.FOREGROUND_COLOR]
      },
      [_intents.enums.features.LABEL]: {
        styleProperties: [_intents.enums.properties.FONT_FAMILY, _intents.enums.properties.FONT_SIZE, _intents.enums.properties.FONT_WEIGHT, _intents.enums.properties.LINE_HEIGHT, _intents.enums.properties.FOREGROUND_COLOR]
      },
      [_intents.enums.features.INDICATOR]: {
        styleProperties: [_intents.enums.properties.FONT_FAMILY, _intents.enums.properties.FONT_SIZE, _intents.enums.properties.FONT_WEIGHT, _intents.enums.properties.LINE_HEIGHT, _intents.enums.properties.FOREGROUND_COLOR]
      },
      [_intents.enums.features.DESCRIPTION]: {
        styleProperties: [_intents.enums.properties.FONT_FAMILY, _intents.enums.properties.FONT_SIZE, _intents.enums.properties.FONT_WEIGHT, _intents.enums.properties.LINE_HEIGHT]
      },
      checkbox: {
        expressions: [_intents.enums.interactions.CHOSEN],
        styleProperties: [_intents.enums.properties.FOREGROUND_COLOR, _intents.enums.properties.BACKGROUND_COLOR, _intents.enums.properties.BORDER_COLOR]
      }
    }
  });
  intents.uxFormElement.backgroundColor = intents.ux.control.backgroundColor;
  intents.uxFormElement.foregroundColor = intents.ux.control.foregroundColor;
  intents.uxFormElement.borderColor = intents.ux.control.borderColor;
  intents.uxFormElement.borderRadius = intents.ux.control.borderRadius;
  intents.uxFormElement.fontFamily = intents.ux.textInput.fontFamily;
  intents.uxFormElement.fontSize = intents.ux.textInput.fontSize;
  intents.uxFormElement.fontWeight = intents.ux.textInput.fontWeight;
  intents.uxFormElement.lineHeight = intents.ux.textInput.lineHeight; // Affecting the border / box-shadow property in the css

  intents.uxFormElementFocused.outlineColor = intents.ux.controlFocused.outlineColor; // Overloading the color for validation states onto foreground color

  intents.uxFormElementCritical.borderColor = intents.ux.feedbackHighContrastCritical.feedbackColor;
  intents.uxFormElementCritical.foregroundColor = intents.ux.feedbackHighContrastCritical.feedbackColor; // placeholder color

  intents.uxFormElement.placeholder.foregroundColor = intents.ux.controlVoid.foregroundColor; // Indicator is ONLY for required asterik

  intents.uxFormElement.indicator.foregroundColor = intents.ux.feedbackHighContrastCritical.feedbackColor;
  intents.uxFormElement.indicator.fontFamily = intents.ux.text.fontFamily;
  intents.uxFormElement.indicator.fontSize = intents.ux.text.fontSize;
  intents.uxFormElement.indicator.fontWeight = intents.ux.text.fontWeight;
  intents.uxFormElement.indicator.lineHeight = intents.ux.text.lineHeight; // Label text

  intents.uxFormElement.label.foregroundColor = intents.ux.box.foregroundColor;
  intents.uxFormElement.label.fontFamily = intents.ux.textLabel.fontFamily;
  intents.uxFormElement.label.fontSize = intents.ux.textLabel.fontSize;
  intents.uxFormElement.label.fontWeight = intents.ux.textLabel.fontWeight;
  intents.uxFormElement.label.lineHeight = intents.ux.textLabel.lineHeight; // Description text

  intents.uxFormElement.description.foregroundColor = intents.ux.box.foregroundColor;
  intents.uxFormElement.description.fontFamily = intents.ux.textCaption.fontFamily;
  intents.uxFormElement.description.fontSize = intents.ux.textCaption.fontSize;
  intents.uxFormElement.description.fontWeight = intents.ux.textCaption.fontWeight;
  intents.uxFormElement.description.lineHeight = intents.ux.textCaption.lineHeight; // Specifically for checkbox, as currently held within this project

  intents.uxFormElement.checkbox.backgroundColor = intents.ux.control.backgroundColor;
  intents.uxFormElement.checkbox.foregroundColor = 'transparent';
  intents.uxFormElement.checkbox.borderColor = intents.ux.control.borderColor;
  intents.uxFormElement.checkboxChosen.backgroundColor = intents.ux.feedback.feedbackColor;
  intents.uxFormElement.checkboxChosen.foregroundColor = intents.ux.feedback.onFeedbackColor;
  intents.uxFormElement.checkboxChosen.borderColor = intents.ux.feedback.feedbackColor;
  intents.create('@ux/telephone-input', {
    styleProperties: [_intents.enums.properties.BORDER_COLOR],
    expressions: [_intents.enums.expressions.CRITICAL]
  });
  intents.uxTelephoneInput.borderColor = intents.ux.control.borderColor;
  intents.uxTelephoneInputCritical.borderColor = intents.ux.feedbackHighContrastCritical.feedbackColor; // Criteria intents

  intents.create('@ux/criteria', {
    styleProperties: [_intents.enums.properties.FONT_FAMILY, _intents.enums.properties.FONT_SIZE, _intents.enums.properties.FONT_WEIGHT, _intents.enums.properties.LINE_HEIGHT, _intents.enums.properties.FOREGROUND_COLOR, _intents.enums.properties.BACKGROUND_COLOR, _intents.enums.properties.BORDER_COLOR],
    expressions: [_intents.enums.expressions.CRITICAL, _intents.enums.expressions.SUCCESS],
    features: {
      [_intents.enums.features.BODY]: {
        styleProperties: [_intents.enums.properties.BACKGROUND_COLOR, _intents.enums.properties.BORDER_COLOR]
      },
      [_intents.enums.features.DESCRIPTION]: {
        styleProperties: [_intents.enums.properties.FONT_FAMILY, _intents.enums.properties.FONT_SIZE, _intents.enums.properties.FONT_WEIGHT, _intents.enums.properties.LINE_HEIGHT, _intents.enums.properties.FOREGROUND_COLOR, _intents.enums.properties.BORDER_COLOR]
      },
      [_intents.enums.features.ITEM]: {
        styleProperties: [_intents.enums.properties.FONT_FAMILY, _intents.enums.properties.FONT_SIZE, _intents.enums.properties.FONT_WEIGHT, _intents.enums.properties.LINE_HEIGHT, _intents.enums.properties.FOREGROUND_COLOR]
      },
      [_intents.enums.features.INDICATOR]: {
        styleProperties: [_intents.enums.properties.FOREGROUND_COLOR, _intents.enums.properties.BACKGROUND_COLOR, _intents.enums.properties.BORDER_COLOR]
      }
    }
  }); // The body of the dropdown

  intents.uxCriteria.body.backgroundColor = intents.ux.box.backgroundColor;
  intents.uxCriteria.body.borderColor = intents.ux.control.outlineColor; // Expected to show as "focused"
  // The help text within the dropdown, above the items

  intents.uxCriteria.description.fontFamily = intents.ux.textLabel.fontFamily;
  intents.uxCriteria.description.fontSize = intents.ux.textLabel.fontSize;
  intents.uxCriteria.description.fontWeight = intents.ux.textLabel.fontWeight;
  intents.uxCriteria.description.lineHeight = intents.ux.textLabel.lineHeight;
  intents.uxCriteria.description.foregroundColor = intents.ux.box.foregroundColor;
  intents.uxCriteria.description.borderColor = intents.ux.box.borderColor; // Each criteria item in the dropdown

  intents.uxCriteria.item.fontFamily = intents.ux.textLabel.fontFamily;
  intents.uxCriteria.item.fontSize = intents.ux.textLabel.fontSize;
  intents.uxCriteria.item.fontWeight = intents.ux.textLabel.fontWeight;
  intents.uxCriteria.item.lineHeight = intents.ux.textLabel.lineHeight;
  intents.uxCriteria.item.foregroundColor = intents.ux.box.foregroundColor; // Each checkbox/icon within the item, default state

  intents.uxCriteria.indicator.foregroundColor = intents.ux.controlVoid.foregroundColor;
  intents.uxCriteria.indicator.backgroundColor = intents.ux.controlVoid.backgroundColor;
  intents.uxCriteria.indicator.borderColor = intents.ux.controlVoid.borderColor; // Success state for checkbox

  intents.uxCriteriaSuccess.indicator.foregroundColor = intents.ux.feedback.feedbackColor;
  intents.uxCriteriaSuccess.indicator.backgroundColor = intents.ux.feedback.onFeedbackColor;
  intents.uxCriteriaSuccess.indicator.borderColor = intents.ux.feedback.onFeedbackColor;
  return intents;
}();

exports.default = _default;