"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Textual = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = require("prop-types");

var _classNames = _interopRequireDefault(require("@ux/component-utilities/lib/classNames"));

var _button = _interopRequireDefault(require("@ux/button"));

var _fieldset = _interopRequireDefault(require("@ux/fieldset"));

var _delete = _interopRequireDefault(require("@ux/icon/delete"));

var _enums = require("./enums.js");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

/**
 * Renders an input element according to the design specifications.
 *
 * @displayName Textual Input (Web)
 *
 * @class Textual
 * @private
 */
class Textual extends _react.Component {
  /**
   * Render the actual component.
   *
   * @returns {React.DOM} The Component.
   * @private
   */
  render() {
    const props = this.props;
    const length = props.value.length;
    const className = (0, _classNames.default)(props.hideLabel && 'sr-only', 'form-control-label');
    const hasClassName = (0, _classNames.default)({
      'has-danger': props.hadInput && props.validates === false
    });

    const clearButton = props.clearable && !!length && /*#__PURE__*/_react.default.createElement(_button.default, {
      className: "form-element-clear",
      design: 'inline',
      icon: /*#__PURE__*/_react.default.createElement(_delete.default, null),
      "aria-label": props.ariaLabels.clear,
      onClick: props.clearable
    });

    const labelGridClass = (0, _classNames.default)('form-element-header', props.grid && props.grid.label);
    const inputGridClass = (0, _classNames.default)('form-element-textual', props.grid && props.grid.input);
    const hasLabel = props.label || props.required;
    const hasHeader = hasLabel || props.controls;
    return /*#__PURE__*/_react.default.createElement(_fieldset.default, {
      proxy: !!props.proxy,
      className: hasClassName
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "form-element-flex"
    }, hasHeader && /*#__PURE__*/_react.default.createElement("header", {
      className: labelGridClass
    }, hasLabel && /*#__PURE__*/_react.default.createElement("label", {
      htmlFor: props.id,
      ref: label => {
        props.elements.label = label;
      },
      className: className,
      id: `label-${props.id}`
    }, props.label, " ", props.required), props.controls), /*#__PURE__*/_react.default.createElement("div", {
      className: inputGridClass
    }, props.input, clearButton)), props.notice, props.error);
  }

}
/**
 * PropType validation and defaultProperties. Extend default set of properties with web-only input
 * properties.
 *
 * @type {Object}
 * @private
 */


exports.Textual = Textual;
Textual.defaultProps = _objectSpread(_objectSpread({}, _enums.defaultProps.input), {}, {
  ariaLabels: {
    clear: 'Clear field'
  }
});
Textual.propTypes = _objectSpread(_objectSpread({}, _enums.propTypes.input), {}, {
  /** Screenreader labels for sub-elements */
  ariaLabels: (0, _propTypes.shape)({
    /** Screen reader label for clear field button */
    clear: _propTypes.string
  })
});
var _default = Textual;
exports.default = _default;