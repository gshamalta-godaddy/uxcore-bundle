"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _dropdown = _interopRequireDefault(require("@ux/dropdown"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

const _excluded = ["interval", "locale", "hour12"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

const {
  DropdownItem
} = _dropdown.default;
/**
 * Display a Timepicker as a Dropdown of time increments.
 *
 * @param {Object} props The props.
 * @param {Object} ref forwardRef.
 * @returns {Dropdown} Configured @ux/dropdown
 * @public
 */

function TimePicker(_ref, ref) {
  let {
    interval,
    locale,
    hour12
  } = _ref,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  const date = new Date();
  const increments = [];

  for (let i = 0; i < 24; i++) {
    increments.push([i, 0]);

    if (interval === 'half-hour') {
      increments.push([i, 30]);
    }
  }

  const formatter = new Intl.DateTimeFormat(locale, {
    hour: 'numeric',
    minute: 'numeric',
    hour12
  });
  return /*#__PURE__*/_react.default.createElement(_dropdown.default, (0, _extends2.default)({
    ref: ref
  }, rest, {
    type: "select",
    toggleIcon: "clock"
  }), increments.map((time, index) => {
    const [hour, minute] = time;
    date.setHours(hour);
    date.setMinutes(minute);
    const formatted = formatter.format(date).replace('24:', '00:');
    return /*#__PURE__*/_react.default.createElement(DropdownItem, {
      key: formatted,
      value: index
    }, formatted);
  }));
}
/**
 * Display a Timepicker as a Dropdown of time increments.
 *
 * @public
 */


const TimePickerForward = /*#__PURE__*/_react.default.forwardRef(TimePicker);
/**
 * Interval and locale properties.
 *
 * @enum {Object} propTypes
 * @api public
 */


exports.default = TimePickerForward;
TimePicker.propTypes = TimePickerForward.propTypes = _objectSpread(_objectSpread({}, _dropdown.default.propTypes), {}, {
  /** The desired interval of time to display */
  interval: _propTypes.default.oneOf(['half-hour', 'hour']),

  /** The locale/market that should be used */
  locale: _propTypes.default.string,

  /** The desired way for hours to be rendered (12 vs 24)
   * (`true` for a 12 hour clock).
   * This is passed verbatim to `Intl.DateTimeFormat` */
  hour12: _propTypes.default.bool
});
/**
 * Show en-US formatting and hour intervals by default.
 *
 * @enum {Object} defaultProps
 * @api public
 */

TimePicker.defaultProps = TimePickerForward.defaultProps = _objectSpread(_objectSpread({}, _dropdown.default.defaultProps), {}, {
  interval: 'hour',
  locale: 'en-US',
  hour12: false
});