"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Password = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _index = _interopRequireDefault(require("../lib/index.js"));

var _button = _interopRequireDefault(require("@ux/button"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

// eslint-disable-line no-unused-vars

/**
 * Component for rending a password element which can switch the password on and
 * off.
 *
 * @displayName Password
 * @class Password
 * @public
 */
class Password extends _index.default {
  constructor() {
    super(...arguments);
    const component = this; //
    // Conditionally ignore properties,
    //

    if (component.ignoreProps) {
      component.ignoreProps.push('show', 'hide');
    }

    component.type = 'password'; // Default input type.

    component._show = this.props.show || 'show'; // Label for when we're in password mode.

    component._hide = this.props.hide || 'hide'; // Label for when password is visible.
    //
    // By the time the component is processed, we already received and processed
    // the props so we can just correctly set the button so it's rendered as
    // intended.
    //

    component.button = component.props.button || /*#__PURE__*/_react.default.createElement(_button.default, {
      text: component.select('_show'),
      design: "inline",
      onClick: toggleHidden
    });
    /**
     * Switches the button state.
     *
     * @param {Event} ev DOM Event
     * @private
     */

    function toggleHidden(ev) {
      ev.preventDefault();
      const hidden = component.select('type') === 'password';

      const button = /*#__PURE__*/_react.default.createElement(_button.default, {
        text: hidden ? component.select('_hide') : component.select('_show'),
        design: "inline",
        onClick: toggleHidden
      });

      component.setState({
        button,
        type: hidden ? 'text' : 'password'
      });
    }

    component.action = toggleHidden;
  }

  render() {
    return super.render();
  }

}
/**
 * Allowed properties, show and hide are used as action.
 *
 * @type {Object}
 * @public
 */


exports.Password = Password;
Password.propTypes = _objectSpread(_objectSpread({}, _index.default.propTypes), {}, {
  /** Label that is displayed when the user can show his typed password. */
  show: _propTypes.default.node,

  /** Label that is shown when user can hide his showed password. */
  hide: _propTypes.default.node
});
var _default = Password;
exports.default = _default;
