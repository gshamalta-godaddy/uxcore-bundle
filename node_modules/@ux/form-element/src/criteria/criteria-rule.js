import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classNames from '@ux/component-utilities/lib/classNames';
import Refresh from '@ux/icon/refresh';
import Checkmark from '@ux/icon/checkmark';
import { Validates } from 'react-validation-context';

/**
 * Component used to define a criteria rule.
 *
 * @displayName Rule
 *
 * @class Rule
 * @public
 */
export default class Rule extends Component {
  constructor() {
    super(...arguments);

    this.state = {
      ...this.state,
      isValid: false,
      promisePending: false
    };

    this._queuedValue = null;
  }

  /**
   * React lifecycle hook invoked when component is mounted.
   *
   * @private
   */
  componentDidMount() {
    this._performValidate(this.props.value);
  }

  /**
   * React lifecycle hook invoked when new props are being received.
   *
   * @param {Object} prevProps previous props
   * @private
   */
  componentDidUpdate(prevProps) {
    if (this.props.value !== prevProps.value) {
      this._performValidate(this.props.value);
    }
  }

  /**
   * Executes validate function. If a validate promise is pending, value is queued.
   *
   * @param {*} value The valid to validate.
   * @private
   */
  _performValidate(value) {
    if (this.state.promisePending) {
      this._queuedValue = value;
      return;
    }

    const isValid = this.props.validate(value);

    if (typeof Promise !== 'undefined' && isValid instanceof Promise) {
      const newState = {
        promisePending: true
      };

      if (this.state.isValid) {
        newState.isValid = false;
      }

      isValid.then(
        () => {
          this._setValidateResults(true);
        },
        () => {
          this._setValidateResults(false);
        }
      );

      this.setState(newState);
    } else {
      this._setValidateResults(isValid);
    }
  }

  /**
   * Updates component state and performs validate if there is a queued value.
   *
   * @param {Boolean} isValid Did the rule validate or not.
   * @private
   */
  _setValidateResults(isValid) {
    const newState = {};

    if (this.state.promisePending) {
      newState.promisePending = false;
    }

    if (this.state.isValid !== isValid) {
      newState.isValid = isValid;
    }

    if (Object.keys(newState).length) {
      this.setState(newState);
    }

    if (this._queuedValue !== null) {
      this._performValidate(this._queuedValue);
      this._queuedValue = null;
    }
  }

  /**
   * Renders the component.
   *
   * @returns {React.DOM} Rendered form element.
   * @private
   */
  render() {
    const { name, onValidChange } = this.props;
    const { isValid } = this.state;

    const iconStateClass = isValid ? 'success' : '';
    let renderIcon = (
      <span className={ 'icon ' + iconStateClass }>
        <Checkmark aria-hidden='true'  width={ 17 } height={ 17 } />
      </span>
    );

    const ariaCriteriaItem = isValid ? 'true' : 'false';
    if (this.state.promisePending) {
      renderIcon = (
        <span className='icon'>
          <Refresh aria-hidden='true' />
        </span>
      );
    }

    return (
      <div role='alert'
        className={ classNames('ux-criteria-rule', { 'ux-criteria-rule-checked': isValid }) }
        aria-hidden={ ariaCriteriaItem }>
        <Validates name={ name || '' } validates={ isValid } onValidChange={ onValidChange } />
        { renderIcon }
        <span className={ `ux-criteria-rule-text` }>
          { this.props.children }
        </span>
      </div>
    );
  }
}

/**
 * PropType validation.
 *
 * @type {Object}
 * @private
 */
Rule.propTypes = {
  /** How to validate the data, returns true if data is valid */
  validate: PropTypes.func.isRequired,
  /** The data being validated */
  value: PropTypes.any,
  /** Function called when validation state changes */
  onValidChange: PropTypes.func,
  /** The name of the criteria */
  name: PropTypes.string,
  /** Child elements */
  children: PropTypes.node
};

/**
 * Flag the component as a rule for criteria component to look for.
 *
 * @type {boolean}
 * @private
 */
Rule.isRule = true;
