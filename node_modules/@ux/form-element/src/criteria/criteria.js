import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classNames from '@ux/component-utilities/lib/classNames';
import { CSSTransition } from 'react-transition-group';
import { Validate } from 'react-validation-context';

/**
 * The primary criteria component.
 *
 * @displayName Criteria
 *
 * @class Criteria
 * @public
 */
export default class Criteria extends Component {
  constructor() {
    super(...arguments);

    this.state = { validates: false };

    this.onValidChange = this.onValidChange.bind(this);
    this.setupRules = this.setupRules.bind(this);
  }

  /**
   * Validates the criteria by making sure every child is valid.
   *
   * @param {Object} valids The map of childs to their validities.
   * @returns {Boolean} Whether or not every child is valid.
   */
  validate(valids) {
    return Object.keys(valids).every(k => valids[k]);
  }

  /**
   * Wires up Rule child components.
   *
   * @returns {Array} The resulting children with wired up Rules.
   * @private
   */
  setupRules() {
    const { children, value, iconDesign } = this.props;
    let name = this.props.name;
    let key = 0;

    return React.Children.map(children, c => {
      if (c.type.isRule !== true) {
        return c;
      }

      name = c.props.name || `${name} rule ${key}`;
      const w = React.cloneElement(c, { key, name, value, iconDesign });

      key++;
      return w;
    });
  }

  /**
   * Wrap the onValidChange handler to set this.state.validates
   *
   * @param {string} name The criteria name
   * @param {boolean} isValid Whether the rule is valid
   * @param {boolean} wasValid Whether the rule used to be valid
   * @private
   */
  onValidChange(name, isValid, wasValid) {
    if (this.props.onValidChange) {
      this.props.onValidChange(name, isValid, wasValid);
    }
    this.setState({ validates: isValid });
  }

  /**
   * Renders the component
   *
   * @returns {React.DOM} The rendered component
   */
  render() {
    const { visible, name, standalone, enableModern } = this.props;
    const { validates } = this.state;
    const display = visible ? 'block' : 'none';

    if (enableModern) {
      return (
        <Validate name={ name || '' } validate={ this.validate } onValidChange={ this.onValidChange }>
          <CSSTransition classNames='ux-criteria' in={ standalone || visible && !validates } timeout={ 400 }>
            <div role='alert' className={ classNames('ux-criteria', { standalone: standalone, valid: validates }) }>
              <div className={ classNames('ux-criteria-content', {
                'fade-in': visible && !validates,
                'fade-out': !visible || validates
              }) }>
                { this.setupRules() }
              </div>
            </div>
          </CSSTransition>
        </Validate>
      );
    }
    return (
      <Validate name={ name || '' } validate={ this.validate } onValidChange={ this.onValidChange }>
        <div role='alert' style={{ display }}
          className={ classNames('ux-criteria ux-criteria-relative', { standalone: standalone }) }>
          <div className='ux-criteria-content'>
            { this.setupRules() }
          </div>
        </div>
      </Validate>
    );
  }
}

/**
 * PropType validation.
 *
 * @type {Object}
 * @private
 */
Criteria.propTypes = {
  /** The value of the data to which to apply the criteria */
  value: PropTypes.any,
  /** The name of the criteria */
  name: PropTypes.string,
  /** Called when the validation state changes */
  onValidChange: PropTypes.func,
  /** Whether the element is visible */
  visible: PropTypes.bool,
  /** The child elements */
  children: PropTypes.node,
  /** Specifies if the criteria is a standalone control or if it's
  tied to a form field */
  standalone: PropTypes.bool,
  /** Enable control animations and absolute positioning.
   * This should be avoided unless your app/site is experiencing
   * major issues as this will be removed shortly.  */
  enableModern: PropTypes.bool,
  /** Use custom criteria checkmark design for Criteria.Rules */
  iconDesign: PropTypes.any
};

/**
 * PropType defaults.
 *
 * @type {Object}
 * @private
 */
Criteria.defaultProps = {
  visible: true,
  name: '',
  standalone: true,
  enableModern: true
};
