import { propTypes } from './enums';
import classNames from '@ux/component-utilities/lib/classNames';
import Button from '@ux/button';
import Fieldset from '@ux/fieldset';
import PropTypes from 'prop-types';
import Textual from './textual';
import Base from './element';
import Flip from './flip';
import React from 'react';

/**
 * Render a form element.
 *
 * @constructor
 * @public
 */
class FormElement extends Base {
  /**
   * Optionally render controls to appear to the right of the label. This can include the button, href, navigation or combination
   *
   * @returns {React.DOM|Undefined} A React DOM structure if we're supplied controls
   * @private
   */
  _controls() {
    const controls = this.select('controls');
    let navigation = this.select('navigation');
    let button = this.select('button');
    let href = this.select('href');

    if (!controls && !navigation && !button) {
      return null;
    }

    if (typeof button === 'string') {
      if (!href) href = '#';
      button = (
        <Button href={ href } text={ button } size='small' design='inline' />
      );
    }

    if (typeof navigation === 'string') {
      if (!href) href = '#';
      navigation = (
        <Button href={ href } text={ navigation } size='small' design='inline' />
      );
    }

    return (
      <div className='form-element-controls' key='button'>
        {controls || (
          <>
            {navigation}
            {button}
          </>
        )}
      </div>
    );
  }

  /**
   * Optionally render a * (required) indicator
   *
   * @returns {React.DOM|Undefined} A React DOM structure if we're supplied with a notice
   * @private
   */
  _required() {
    if (!this.select('required')) return;

    return (
      <span className='req' aria-hidden='true'>
        *
      </span>
    );
  }

  /**
   * Generate an input element based on the generated data.
   *
   * @param {Object} data Input creation information.
   * @returns {React.DOM} The generated input element.
   * @private
   */
  _input(data) {
    data = data || this.attributes();
    this.ignoreProps.push('href');
    this.ignoreProps.push('merch');
    this.ignoreProps.push('action');
    this.ignoreProps.push('ariaLabels');
    this.ignoreProps.push('defaultValue');

    const spread = this.filter(data);
    const InputType = data.type !== 'textarea' ? 'input' : 'textarea';
    const input = (
      <InputType
        { ...spread }
        { ...data }
        ref={ i => {
          this.elements.input = i;
        } }
      />
    );

    return input;
  }

  /**
   * Optionally include a notice in the form element if provided through the
   * options.
   *
   * @returns {React.DOM|Undefined} A React DOM structure if we're supplied with a notice
   * @private
   */
  _notice() {
    if (!this.select('notice')) return;

    return (
      <small
        className='form-text'
        ref={ notice => {
          this.elements.notice = notice;
        } }>
        {this.select('notice')}
      </small>
    );
  }

  /**
   * Render an error message below an input.
   *
   * @returns {React.DOM|Undefined} A React DOM structure if we have an error msg.
   * @private
   */
  _error() {
    const { error, hadInput } = this.state;
    const { id } = this.attributes();

    if (!error || !hadInput) return;

    return (
      <small className='form-text form-error' role='alert' id={ `field-error-${id}` } aria-describedby={ id }>
        {error}
      </small>
    );
  }

  /**
   * Generate all the attributes to be rendered on an input.
   *
   * @returns {Object} Required data to render an input.
   * @private
   */
  attributes() {
    const superAttrs = super.attributes();
    const { id } = superAttrs;
    const { error, isValid, hadInput } = this.state;
    return {
      ...superAttrs,
      'aria-labelledby': id && `label-${id}`,
      'aria-disabled': this.select('disabled'),
      'aria-required': !!this.select('required'),
      'aria-describedby': error && hadInput && `field-error-${id}`,
      'aria-invalid': error && hadInput,

      'className': classNames(
        this.select('className'),
        {
          'form-control': !this.isFlip,
          'custom-control-input': this.isFlip,
          'form-control-danger': hadInput && isValid === false,
          'form-control-lg': this.props.size === 'large',
          'form-control-sm': this.props.size === 'small',
          'form-control-merch': this.props.merch
        }
      )
    };
  }
}

/**
 * PropType validation
 *
 * @type {Object}
 * @public
 */
FormElement.propTypes = {
  ...propTypes.element,
  ...Base.propTypes,

  /**
   * This only works if you've also set the button or navigation property.
   * Represents the href of the button (or navigation if provided). If the
   * associated property (i.e. button or navigation) is a string and href is not
   * provided it will default to #.
   */
  href: PropTypes.string
};

//
// Expose the main FormElement class. Also expose classes that could and are
// used externally.
//
export { Base as Validation, FormElement, Fieldset, Textual, Flip };

export default FormElement;
