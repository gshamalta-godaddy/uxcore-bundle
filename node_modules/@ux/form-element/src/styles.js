/* eslint-disable id-length */
import { css } from 'linaria';
import intents from './intents.config.js';

import { mixins } from '@ux/stylevars';
import '@ux/button/src/styles';
import '@ux/dropdown/src/styles';

const {
  mediaBreakpointUp
} = mixins;

export default css`
/* stylelint-disable selector-no-qualifying-type */

/* Icons below are specifically for checkboxes */
@import '~@ux/icon/checkmark/index.css';
@import '~@ux/icon/delete/index.css';
@import '~@ux/icon/minus/index.css';
@import '~@ux/icon/search/index.css';
@import '~@ux/icon/plus/index.css';
@import '~@ux/icon/refresh/index.css';
@import '~@ux/icon/checkmark/index.css';

:global() {
  /* Textual form controls */
  .form-control {
    display: block;
    min-height: 2.75rem;
    width: 100%;
    padding: 0.375rem 0.75rem;
    font-family: ${intents.uxFormElement.fontFamily};
    font-size: ${intents.uxFormElement.fontSize};
    font-weight: ${intents.uxFormElement.fontWeight};
    line-height: ${intents.uxFormElement.lineHeight};
    color: ${intents.uxFormElement.foregroundColor};
    background-color: ${intents.uxFormElement.backgroundColor};
    border: 1px solid ${intents.uxFormElement.borderColor};
    vertical-align: middle;
    transition: .3s all ease-in-out;
    border-radius: ${intents.uxFormElement.borderRadius};

    &:focus {
      outline: var(--uxp-focus-visible-outline, none);
    }

    /* Placeholder */
    &::placeholder {
      color: ${intents.uxFormElement.placeholder.foregroundColor};
      /* Override Firefox's unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526. */
      opacity: 1;
    }

    /* Disabled and read-only inputs
    HTML5 says that controls under a fieldset > legend:first-child won't be
    disabled if the fieldset is disabled. Due to implementation difficulty, we
    don't honor that edge case; we style them as disabled anyway. */
    &:disabled,
    &[readonly] {
      opacity: .4;
      &:hover {
        cursor: not-allowed;
        box-shadow: none;
      }
    }
  }

  body:not(.keyboard-navigation) .form-control {
    &:focus {
      border: 1px solid ${intents.uxFormElementFocused.outlineColor};
    }
  }

  .form-element-header {
    display: flex;
    align-items: center;

    .form-element-controls {
      margin-left: auto;

      > * {
        margin-left: .5rem;
      }

    }
  }

  .form-element-textual {
    position: relative;
    .form-element-clear {
      position: absolute;
      top: 0;
      right: 0;
      height: calc(100% - 1px);
      margin-inline-end: 1em;
    }

    .form-control-sm + .form-element-clear {
      font-size: 87.5%;
    }
  }

  [dir="rtl"] .form-element-textual .form-element-clear {
    right: auto;
    left: 0;
  }

  /* Form control sizing
    Build on '.form-control' with modifier classes to decrease or increase the
    height and font-size of form controls.

    The '.form-group-* form-control' variations are sadly duplicated to avoid the
    issue documented in https://github.com/twbs/bootstrap/issues/15074. */

  .form-control-sm {
    padding: calc(0.375rem - .125rem) 0.75rem;
    font-size: 87.5%;
    min-height: 2rem;
  }

  .form-control-merch {
    height: 3.25rem;
    &.form-control-sm {
      height: 2.5rem;
    }
  }

  .form-group {
    margin-bottom: 1.5rem;
    label {
      text-transform: none;
    }
  }

  /* Checkboxes and radios */
  .ux-custom-control {

    &.ux-custom-control-inline {
      display: inline-block;
    }

    .ux-control-indicator {
      font-size: 87.5%;
      margin-inline-end: .5em;
      flex-shrink: 0;
      align-self: flex-start;
      height: calc(1.5em - 1px); /* subtract border from size */
      width: calc(1.5em - 1px); /* subtract border from size */
    }

    &.ux-custom-radio {
      .ux-control-indicator {
        display: block;
        border-radius: 1.5em;
        box-shadow: inset 0 0 0 .25em ${intents.uxFormElement.checkbox.backgroundColor};
      }
    }

    label {
      margin: 0;
      font-family: ${intents.uxFormElement.fontFamily};
      font-size: ${intents.uxFormElement.fontSize};
      font-weight: ${intents.uxFormElement.fontWeight};
      line-height: ${intents.uxFormElement.lineHeight};
    }

    .ux-custom-target {
      position: relative;
      display: flex;
      align-items: center;
      cursor: pointer;

      &.ux-button > * {
        pointer-events: initial;
      }

      &:not(.ux-button) {
        margin: 0 1rem 1rem 0;
      }

      &[disabled] {
        cursor: not-allowed;
        opacity: .4;
      }

      > input {
        position: absolute;
        top: 0;
        left: 0;
        opacity: 0;
        cursor: inherit;
        height: 1.25em;
        width: 1.25em;

        & + .ux-control-indicator {
          border: 1px solid ${intents.uxFormElement.checkbox.borderColor};
          background-color: ${intents.uxFormElement.checkbox.backgroundColor};
          use {
            display: none; /** Dark mode extensions clobber the fill above */
          }
        }

        &:checked + .ux-control-indicator{
          border: 1px solid ${intents.uxFormElement.checkboxChosen.backgroundColor};
          background-color: ${intents.uxFormElement.checkboxChosen.backgroundColor};
          use {
            fill: ${intents.uxFormElement.checkboxChosen.foregroundColor};
            display: initial; /** Dark mode extensions clobber the fill above */
          }
        }
        &:focus + svg.ux-control-indicator {
          outline: var(--uxp-focus-visible-outline);
        }
      }
    }
  }


  /* Form validation */

  .has-danger {
    .form-text {
      color: ${intents.uxFormElementCritical.foregroundColor};
    }

    .form-control {
      color: inherit;
      border-color: ${intents.uxFormElementCritical.borderColor};
      background-color:inherit;
      box-shadow:none;
    }

    .form-control:focus {
      border-color:currentColor;
      color: ${intents.uxFormElementFocused.outlineColor};
    }
  }

  /* Inline forms

   Make forms appear inline(-block) by adding the '.form-inline' class. Inline
   forms begin stacked on extra small (mobile) devices and then go inline when
   viewports reach <768px.

   Requires wrapping inputs and labels with '.form-group' for proper display of
   default HTML form controls and our custom form controls (e.g., input groups). */

  .form-inline {
    display: flex;
    flex-flow: row wrap;
    align-items: center;
    /* Prevent shorter elements from growing to same height as others (e.g., small buttons growing to normal sized button height) */

    /* fieldset doesn't take flex properties, need to wrap in an additional element */
    .form-element-flex {
      display: flex;
    }

    label {
      margin-right: .5rem;
      font-family: ${intents.uxFormElement.label.fontFamily};
      font-size: ${intents.uxFormElement.label.fontSize};
      font-weight: ${intents.uxFormElement.label.fontWeight};
      line-height: ${intents.uxFormElement.label.lineHeight};
    }

    /* Kick in the inline */
    ${mediaBreakpointUp(
    'sm',
    `
      label {
        display: inline-flex;
        align-items: center;
        justify-content: flex-start;
        margin-bottom: 0;
      }

      .form-group {
        margin-bottom: 0;
        + .form-group {
          margin-left: 1em;
        }
      }

      /* Allow folks to *not* use '.form-group' */
      .form-control {
        display: inline-block;
        width: auto; /* Prevent labels from stacking above inputs in '.form-group' */
        vertical-align: middle;
      }

      .input-group {
        width: auto;
      }

      .form-control-label {
        margin-bottom: 0;
        vertical-align: middle;
      }

      /* Re-override the feedback icon. */
      .has-feedback .form-control-feedback {
        top: 0;
      }
    `
  )};
  }

  form:not(.form-inline) > .form-group {
    width: 100%;
  }

  .form-element-flex {
    width: 100%;
  }

  /* Labels */

  .form-control-label {
    padding: 0;
    margin-bottom: .3125rem;
    font-family: ${intents.uxFormElement.label.fontFamily};
    font-size: ${intents.uxFormElement.label.fontSize};
    font-weight: ${intents.uxFormElement.label.fontWeight};
    line-height: ${intents.uxFormElement.label.lineHeight};
  }

  /* Textarea */

  textarea.form-control {
    height: auto;
    padding-top: .5rem;
    padding-bottom: .5rem;
  }

  /* Form messages */

  .form-text {
    display: block;
    margin-top: .25rem;
    margin-bottom: .75rem;
    font-family: ${intents.uxFormElement.description.fontFamily};
    font-size: ${intents.uxFormElement.description.fontSize};
    font-weight: ${intents.uxFormElement.description.fontWeight};
    line-height: ${intents.uxFormElement.description.lineHeight};
    color: ${intents.uxFormElement.description.foregroundColor};
  }

  /* Required */

  .req {
    font-family: ${intents.uxFormElement.indicator.fontFamily};
    font-size: ${intents.uxFormElement.indicator.fontSize};
    font-weight: ${intents.uxFormElement.indicator.fontWeight};
    line-height: ${intents.uxFormElement.indicator.lineHeight};
    color: ${intents.uxFormElement.indicator.foregroundColor};
  }

  .ux-search {
    margin-bottom: 1.5rem;
    z-index: unset;
    fieldset {
      display: flex;
      flex-grow: 1;
    }
    .form-group {
      margin-bottom: 0;

      input {
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
        border-right: 0;
      }

      label {
        display: none;
      }
    }

    .input-group-btn .btn,
    .form-element-clear {
      display: inline-flex;
      align-items: center;
    }

    .form-control::-ms-clear {
      display: none;
    }

    .ux-search-list-container {
      text-align: left;
      position: absolute;
      width: calc(100% - 1px); /* px for border */
      z-index: 1030;
      top: calc(100% - 1px); /* px for border */
      left: 0;
      overflow-y: auto;
      max-height: 20rem;
      display: block;
      float: none;
    }

    .form-control {
      + .form-element-clear,
      &.form-control-lg + .form-element-clear {
        z-index: 1033;
      }
    }

    .input-group-btn {
      vertical-align: top;
      > button {
        border-top-left-radius: 0;
        border-bottom-left-radius: 0;
      }
    }

    .btn-icon {
      min-width: 0;
    }

    .ux-search-lookahead {
      display: none;
      pointer-events: none;
    }

    .ux-search-lookahead-remainder {
      display: inline-block;
      text-overflow: ellipsis;
      overflow: hidden;
      height: 1.25rem;
    }

    &.open {
      .form-control {
        z-index: 1031;
      }
      .ux-search-lookahead {
        display: flex;
        text-align: start;
        justify-content: flex-start;
        position: absolute;
        margin: 0;
        z-index: 1032;
        border: 0;
        padding: 0;
        height: 0;
        top: .625rem;
        left: .875rem;
        right: .875rem;
        opacity: .5;
        user-select: none;
      }
    }
  }

  .ux-tel-input {
    padding-left: 8.75rem !important;
    direction: ltr${'/*rtl:ignore*/'};
    text-align: left;
  }

  .ux-tel-container {
    position: relative;

    .form-group label {
      display: none;
    }
  }

  .ux-tel-btn {
    position: absolute;
    height: calc(2.75rem - .1875rem);
    min-height: calc(2.75rem - .1875rem);
    top: .0625rem;
    left: .0625rem;
    border: 0;
    border-right: 1px solid ${intents.uxTelephoneInput.borderColor};
    padding: .625rem .875rem .3125rem;
    min-width: auto;
    z-index: 1;

    &:hover,
    &:focus {
      color: inherit;
      padding: .625rem .875rem .3125rem;
    }

    .chevron-down-icon {
      svg {
        margin: 0 0 0 1rem;
      }
    }

    &:focus {
      border-right-style: solid;
    }
  }

  .ux-tel-btn-danger {
    border-right-color: ${intents.uxTelephoneInputCritical.borderColor};
  }

  .dial-code {
    direction: ltr${'/*rtl:ignore*/'};
    unicode-bidi: bidi-override${'/*rtl:ignore*/'};
  }

  .ux-quantity-selector {
    > label {
      display: block;
    }

    .form-control {
      display: inline-flex;
      padding: 0;
      width: auto;
    }

    .ux-quantity-selector-text {
      text-align: center;
      max-width: 6ch;
      margin-top: -1px;
      margin-bottom: -1px;

      /* autoprefixer: off */
      -moz-appearance: textfield;
      &::-webkit-inner-spin-button {
        display: none;
      }
      /* autoprefixer: on */
    }
  }
  /* Criteria Styles */

  .ux-criteria {
    background: ${intents.uxCriteria.body.backgroundColor};
    border-left: 1px solid ${intents.uxCriteria.body.borderColor};
    border-right: 1px solid ${intents.uxCriteria.body.borderColor};
    border-bottom: 1px solid ${intents.uxCriteria.body.borderColor};
    display: flex;
    padding: .5rem 1rem 1rem;
    transform-origin: 0 0;
    transform: scaleY(0);

    &.ux-criteria-relative {
      transform: scaleY(1);
    }

    &.standalone {
      border-top: 1px solid ${intents.uxCriteria.body.borderColor};
      transform: scaleY(1);
      opacity: 1;
      height: auto;
      transition: all .3s ease-out;
      margin-bottom: 1.5rem;

      &.valid {
        transition: all .3s ease-out .1s;
        transform: scaleY(0);
        opacity: 0;
        height: 0;
      }
    }

    &-content {
      width: 100%;
    }
  }

  .fade-in {
    transition: opacity .2s ease-out .3s;
    opacity: 1;
  }

  .fade-out {
    opacity: 0;
    transition: opacity .2s ease-out;
  }

  .ux-criteria-enter {
    transform: scaleY(1);
    transition: transform .3s ease-out;
  }

  .ux-criteria-enter-done {
    transform: scaleY(1);
    height: auto;
  }

  .ux-criteria-exit {
    transform: scaleY(0);
    transition: transform .3s ease-out .1s;
  }

  .ux-criteria-exit-done {
    transform: scaleY(0);
    opacity: 0;
    height: 0;
  }

  .ux-criteria-connect {
    position: relative;

    .ux-criteria {
      top: 100%;
      width: 100%;
      position: absolute;
      z-index: 1000;
      box-shadow: 
        0px 0px 12px rgba(17, 17, 17, 0.07),
        0px 4px 4px rgba(17, 17, 17, 0.1),
        0px 6px 8px rgba(17, 17, 17, 0.07);
    }
    &.ux-criteria-relative {
      position: relative;
    }
  }

  .ux-criteria-header.title {
    font-family: ${intents.uxCriteria.description.fontFamily};
    font-size: ${intents.uxCriteria.description.fontSize};
    font-weight: ${intents.uxCriteria.description.fontWeight};
    line-height: ${intents.uxCriteria.description.lineHeight};
    color: ${intents.uxCriteria.description.foregroundColor};
    border-bottom: 1px solid ${intents.uxCriteria.description.borderColor};
    margin: .75rem 0 1rem;
    padding-bottom: .5rem;
    text-transform: none;
    line-height: 24px;
    font-weight: 850;
    font-size: 16px;
  }

  /* Separate criteria items */
  .ux-criteria-rule {
    min-height: 32px;
    align-items: center;
    display: flex;
    opacity: 1;
    overflow: hidden;
    max-height: 6.25rem;

    > .icon {
      color: ${intents.uxCriteria.indicator.foregroundColor};
      background-color: ${intents.uxCriteria.indicator.backgroundColor};
      border-color: ${intents.uxCriteria.indicator.borderColor};
      display: flex;
      padding-left: .25rem;
      svg {
        width: 1.25rem;
      }

      &.success {
        color: ${intents.uxCriteriaSuccess.indicator.foregroundColor};
        background-color: ${intents.uxCriteriaSuccess.indicator.backgroundColor};
        border-color: ${intents.uxCriteriaSuccess.indicator.borderColor};
      }
    }
  }

  .ux-criteria:not(.ux-criteria-relative) .ux-criteria-rule {
    transition: max-height .3s ease-out, opacity .3s ease-out, margin-top .3s ease-out;
    &.ux-criteria-rule-checked {
      opacity: .4;
    }
  }

  .ux-criteria-rule-text {
    font-family: ${intents.uxCriteria.item.fontFamily};
    font-size: ${intents.uxCriteria.item.fontSize};
    font-weight: ${intents.uxCriteria.item.fontWeight};
    line-height: ${intents.uxCriteria.item.lineHeight};
    color: ${intents.uxCriteria.item.foregroundColor};
    display: flex;
    flex-grow: 1;
    padding-left: .75rem;
  }

  /* Input group */
  .input-group {
    position: relative;
    display: flex;
    align-items: stretch;
    width: 100%;
    z-index: 1;

    label { /* this is to hide the label that is breaking input-groups */
      border: 0;
      clip: rect(0 0 0 0);
      height: 1px;
      margin: -1px;
      overflow: hidden;
      padding: 0;
      position: absolute;
      width: 1px;
    }

    .form-control {
      /* Ensure that the input is always above the *appended* addon button for
        proper border colors. */
      position: relative;
      z-index: 2;
      flex: 1 1 auto;
      margin-bottom: 0;

      /* Bring the "active" form control to the front */
      &:focus,
      &:active,
      &:hover {
        z-index: 4;
      }
    }
  }

  .input-group-btn,
  .input-group .form-control {
    display: flex;
    align-items: center;
    &:not(:first-child):not(:last-child) {
      border-radius: 0;
    }
  }

  .input-group-btn {
    white-space: nowrap;
  }

    /* Reset rounded corners */

  .input-group .form-control:not(:last-child),
  .input-group-btn:not(:last-child) > .btn,
  .input-group-btn:not(:last-child) > .btn-group > .btn,
  .input-group-btn:not(:last-child) > .dropdown-toggle,
  .input-group-btn:not(:first-child) > .btn:not(:last-child):not(.dropdown-toggle),
  .input-group-btn:not(:first-child) > .btn-group:not(:last-child) > .btn {
    border-bottom-right-radius: 0;
    border-top-right-radius: 0;
  }

  .input-group .form-control:not(:first-child),
  .input-group-btn:not(:first-child) > .btn,
  .input-group-btn:not(:first-child) > .btn-group > .btn,
  .input-group-btn:not(:first-child) > .dropdown-toggle,
  .input-group-btn:not(:last-child) > .btn:not(:first-child),
  .input-group-btn:not(:last-child) > .btn-group:not(:first-child) > .btn {
    border-bottom-left-radius: 0;
    border-top-left-radius: 0;
  }

  /* Button input groups */

  .input-group-btn {
    position: relative;
    align-items: stretch;
    z-index: 3;
    flex-shrink: 0;
    /* Jankily prevent input button groups from wrapping with 'white-space' and
       'font-size' in combination with 'inline-block' on buttons. */
    font-size: 0;
    white-space: nowrap;

    /* Negative margin for spacing, position for bringing hovered/focused/actived
       element above the siblings. */
    > .btn {
      position: relative;

      + .btn {
        margin-left: -1px;
      }

      /* Bring the "active" button to the front */
      &:focus,
      &:active,
      &:hover {
        z-index: 3;
      }
    }

    &:first-child > .btn + .btn {
      margin-left: 0;
    }

    /* Negative margin to only have a single, shared border between the two */
    &:not(:last-child) {
      > .btn,
      > .btn-group {
        margin-right: -1px;
      }
    }
    &:not(:first-child) {
      > .btn,
      > .btn-group {
        z-index: 2;
        /* remove nagative margin to solve overlapping issue with button. */
        margin-left: 0;

        /* When input is first, overlap the right side of it with the button(-group) */
        &:first-child {
          margin-left: -1px;
        }

        /* Because specificity */
        &:focus,
        &:active,
        &:hover {
          z-index: 3;
        }
      }
    }

    &.dropdown {
      display: table-cell;
    }

    .btn {
      white-space: nowrap;
    }
  }
}
`;
