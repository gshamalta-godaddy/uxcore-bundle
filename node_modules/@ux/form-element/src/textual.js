import React, { Component } from 'react';
import { shape, string } from 'prop-types';
import classNames from '@ux/component-utilities/lib/classNames';
import Button from '@ux/button';
import Fieldset from '@ux/fieldset';
import Delete from '@ux/icon/delete';
import { propTypes, defaultProps } from './enums.js';


/**
 * Renders an input element according to the design specifications.
 *
 * @displayName Textual Input (Web)
 *
 * @class Textual
 * @private
 */
export class Textual extends Component {
  /**
   * Render the actual component.
   *
   * @returns {React.DOM} The Component.
   * @private
   */
  render() {
    const props = this.props;
    const length = props.value.length;
    const className = classNames(
      props.hideLabel && 'sr-only',
      'form-control-label'
    );

    const hasClassName = classNames({
      'has-danger': props.hadInput && props.validates === false
    });

    const clearButton = props.clearable && !!length && (
      <Button
        className='form-element-clear'
        design={ 'inline' }
        icon={ <Delete /> }
        aria-label={ props.ariaLabels.clear }
        onClick={ props.clearable }
      />
    );

    const labelGridClass = classNames(
      'form-element-header',
      props.grid && props.grid.label
    );
    const inputGridClass = classNames(
      'form-element-textual',
      props.grid && props.grid.input
    );

    const hasLabel = props.label || props.required;
    const hasHeader = hasLabel || props.controls;

    return (
      <Fieldset proxy={ !!props.proxy } className={ hasClassName }>
        <div className='form-element-flex'>
          {hasHeader && (
            <header className={ labelGridClass }>
              {hasLabel && (
                <label
                  htmlFor={ props.id }
                  ref={ label => {
                    props.elements.label = label;
                  } }
                  className={ className }
                  id={ `label-${props.id}` }>
                  {props.label} {props.required}
                </label>
              )}
              {props.controls}
            </header>
          )}
          <div className={ inputGridClass }>
            {props.input}
            {clearButton}
          </div>
        </div>
        {props.notice}
        {props.error}
      </Fieldset>
    );
  }
}

/**
 * PropType validation and defaultProperties. Extend default set of properties with web-only input
 * properties.
 *
 * @type {Object}
 * @private
 */
Textual.defaultProps = {
  ...defaultProps.input,
  ariaLabels: {
    clear: 'Clear field'
  }
};

Textual.propTypes = {
  ...propTypes.input,
  /** Screenreader labels for sub-elements */
  ariaLabels: shape({
    /** Screen reader label for clear field button */
    clear: string
  })
};

export default Textual;
