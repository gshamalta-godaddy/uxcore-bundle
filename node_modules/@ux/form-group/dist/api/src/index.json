[
  {
    "description": "Render multiple FormElements in a single fieldset.\n\n@displayName Form-Group\n\n@class Group\n@public",
    "displayName": "Group",
    "methods": [
      {
        "name": "inputs",
        "docblock": "Map and return data.inputs as FormElement components.\n\n@param {Object} properties Additional properties to spread on the element.\n@returns {Array} Collection of FormElements.\n@private",
        "modifiers": [],
        "params": [
          {
            "name": "properties",
            "description": "Additional properties to spread on the element.",
            "type": {
              "name": "Object"
            },
            "optional": false
          }
        ],
        "returns": {
          "description": "Collection of FormElements.",
          "type": {
            "name": "Array"
          }
        },
        "description": "Map and return data.inputs as FormElement components."
      },
      {
        "name": "view",
        "docblock": "Default view that can be rendered in react. Should be overruled for platform\nspecific rendering.\n\n@returns {React.DOM} A fieldset of form elements.\n@public",
        "modifiers": [
          "get"
        ],
        "params": [],
        "returns": {
          "description": "A fieldset of form elements.",
          "type": {
            "name": "React.DOM"
          }
        },
        "description": "Default view that can be rendered in react. Should be overruled for platform\nspecific rendering."
      },
      {
        "name": "type",
        "docblock": "Default type that can be rendered in react.\nShould be overruled for platform specific rendering.\n\n@returns {String} The FormElement type to use\n@public",
        "modifiers": [
          "get"
        ],
        "params": [],
        "returns": {
          "description": "The FormElement type to use",
          "type": {
            "name": "String"
          }
        },
        "description": "Default type that can be rendered in react.\nShould be overruled for platform specific rendering."
      }
    ],
    "props": {
      "inputs": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Array of form-element props, one for each input rendered"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Child components"
      },
      "proxy": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Do not render the elements in fieldsets but use an empty div instead"
      },
      "design": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'critical'",
              "computed": false
            },
            {
              "value": "'inline'",
              "computed": false
            },
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'secondary'",
              "computed": false
            },
            {
              "value": "'control'",
              "computed": false
            },
            {
              "value": "'stateless'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The design to use for the inputs, see @ux/button for design options"
      }
    }
  }
]