"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _formElement = _interopRequireDefault(require("@ux/form-element"));

var _button = _interopRequireDefault(require("@ux/button"));

/**
 * Render multiple FormElements in a single fieldset.
 *
 * @displayName Form-Group
 *
 * @class Group
 * @public
 */
class Group extends _react.default.Component {
  /**
   * Map and return data.inputs as FormElement components.
   *
   * @param {Object} properties Additional properties to spread on the element.
   * @returns {Array} Collection of FormElements.
   * @private
   */
  inputs(properties) {
    const {
      inputs,
      design
    } = this.props;
    return inputs.map((data, index) => {
      return /*#__PURE__*/_react.default.createElement(_formElement.default, (0, _extends2.default)({}, data, properties, {
        design: design,
        key: index,
        type: this.type,
        proxy: true
      }));
    });
  } // eslint doesn't like documenting return types for "abstract" functions

  /* eslint-disable valid-jsdoc */

  /**
   * Default view that can be rendered in react. Should be overruled for platform
   * specific rendering.
   *
   * @returns {React.DOM} A fieldset of form elements.
   * @public
   */


  get view() {
    throw new Error('View implementation required');
  }
  /**
   * Default type that can be rendered in react.
   * Should be overruled for platform specific rendering.
   *
   * @returns {String} The FormElement type to use
   * @public
   */


  get type() {
    throw new Error('Type implementation required');
  }
  /* eslint-enable valid-jsdoc */

  /**
   * Render the input elements
   *
   * @returns {React.DOM} A fieldset of form elements.
   * @private
   */


  render() {
    return this.view;
  }

}
/**
 * PropType validation for the component.
 *
 * @type {Object}
 * @private
 */


exports.default = Group;
Group.propTypes = {
  /** Array of form-element props, one for each input rendered */
  inputs: _propTypes.default.array,

  /** Child components */
  children: _propTypes.default.node,

  /** Do not render the elements in fieldsets but use an empty div instead */
  proxy: _propTypes.default.bool,

  /** The design to use for the inputs, see @ux/button for design options */
  design: _propTypes.default.oneOf(_button.default.designs)
};