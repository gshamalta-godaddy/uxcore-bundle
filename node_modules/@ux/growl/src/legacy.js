import React from 'react';
import text from '@ux/text';

/**
 * Generates an id
 * @returns {Number} - An incremented number
 */
let i = 0;
function generateNextId() {
  return i++;
}

/**
 * Converts the addGrowlMessage configuration object into props for <Dialog/>
 *
 * @param {Object} config - Configuration object
 * @param {String|Node} title - Title of the message
 * @param {Node} content - Alias for children
 * @param {Node} children - Content for the message
 * @param {Number} fadeTime - Alias for lifetime
 * @param {Number} lifetime - The amount of time to persist the message
 * @param {String} icon - Alias for emphasis
 * @param {String} emphasis - The status of the message, one of the feedback types
 * @param {String} id - A unique id for the message
 * @returns {Object} - A converted props object for <Dialog/>
 */
export function transform(config) {
  const {
    title,
    content,
    children,
    fadeTime,
    lifetime,
    icon,
    emphasis,
    id,
    ...rest
  } = config;

  warn(config);

  const translation = icon === 'none' ? 'info' : (icon || emphasis);

  return {
    title: typeof title === 'string' ? <text.h2 text={ title } as='title'/> : title,
    children: content || children,
    lifetime: fadeTime || lifetime,
    id: id || `ux-growl-${generateNextId()}`,
    emphasis: translation,
    ...rest
  };
}

const warnings = new Set();

/**
 * Warns when the shim is used
 *
 * @param {Object} props - Configuration object
 * @param {Node} content - Alias for children
 * @param {Number} fadeTime - Alias for lifetime
 * @param {String} icon - Alias for emphasis
 * @param {String} id - A unique id for the message
 */
function warn(props) {
  const {
    content,
    fadeTime,
    icon,
    id
  } = props;

  if (content) {
    const warning = 'Prop `content` for Growl.addGrowlMessage will be removed in v2201, please replace with `children`';
    !warnings.has(warning) && warnings.add(warning) && console.warn(warning);
  }

  if (fadeTime) {
    const warning = 'Prop `fadeTime` for Growl.addGrowlMessage will be removed in v2201, please replace with `lifetime`';
    !warnings.has(warning) && warnings.add(warning) && console.warn(warning);
  }

  if (icon) {
    const warning = 'Prop `icon` for Growl.addGrowlMessage will be removed in v2201, please replace with `emphasis`';
    !warnings.has(warning) && warnings.add(warning) && console.warn(warning);
  }

  if (icon === 'none') {
    const warning = '`icon=none` for Growl.addGrowlMessage now maps to emphasis=info, icons are required for all Growl messages';
    !warnings.has(warning) && warnings.add(warning) && console.warn(warning);
  }

  if (!id) {
    const warning = 'Prop `id` for Growl.addGrowlMessage is required for 2200';
    !warnings.has(warning) && warnings.add(warning) && console.warn(warning);
  }
}
