"use strict";

var _svgosm = require("./svgosm.js");

module.exports = function CSIENHANCE(doc) {
  //
  // Prevent it from running in a normal Node.js environment. (For when a bundle
  // is loaded for serverside rendering)
  //
  if (!doc || !doc.querySelectorAll) return;
  /**
   * Enhance the current node.
   *
   * @param {HTMLElement} node HTMLElement to enhance.
   * @private
   */

  function enhance(node) {
    const iconname = /uxicon-([\w|-]+)/gim.exec(node.className);
    if (!iconname) return;
    const name = iconname[1];

    const res = _svgosm.svgosm.get(name, function extract() {
      const details = _svgosm.svgosm.extract(`uxp-icon-${name}`);

      if (!details) return;
      return Object.assign(details, {
        title: node.title
      });
    });

    if (!res) return;
    const svg = doc.createElementNS(_svgosm.SVGOSM.xmlns, 'svg');
    const use = doc.createElementNS(_svgosm.SVGOSM.xmlns, 'use');
    const style = window.getComputedStyle(node, ':before');
    const width = style.getPropertyValue('width');
    const height = style.getPropertyValue('height');
    [['role', 'img'], ['width', width || 24], ['height', height || 24], ['xmlns', _svgosm.SVGOSM.xmlns], ['class', 'uxicon-svg uxicon-svg-' + name]].forEach(data => svg.setAttribute(data[0], data[1]));
    use.setAttribute('fill', 'currentColor');
    use.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', res.link);
    node.classList.remove('uxicon-' + name, 'uxicon');
    node.classList.add('uxicon-enhanced');
    svg.appendChild(use);
    node.appendChild(svg);
  }
  /**
   * Track DOM changes so we can enhance newly inserted icons.
   *
   * @param {Event} evt DOM event.
   * @private
   */


  function uxIconInserted(evt) {
    if (evt.animationName !== 'uxIconInserted') return;
    enhance(evt.target);
  }

  [...doc.querySelectorAll('.uxicon:not(.uxicon-enhanced)')].forEach(enhance);
  doc.addEventListener('animationstart', uxIconInserted, false);
  return enhance;
}(typeof document !== 'undefined' && document);