import React, { useRef, useState, useEffect } from 'react';
import css from '!raw-loader!@ux/icon/paintbrush/index.css';
import { svgosm } from '@ux/icon/svgosm.js';
import Brush from '@ux/icon/paintbrush';
import ReactDOM from 'react-dom';

/**
 * A quick and dirty hacked up component to render a component into
 * a shadowRoot using React.
 *
 * @param {ReactElement} children Children to render in the root
 * @param {Function} mounted Function that receives the shadow root.
 * @returns {ReactElement} DIV which would be used as container or Portal
 * @private
 */
// eslint-disable-next-line react/prop-types
function ShadowRoot({ children, mount }) {
  const [root, setRoot] = useState(null);
  const container = useRef(null);

  useEffect(function attachRoot() {
    if (root) return;

    const shadow = container.current.attachShadow({ mode: 'open' });

    mount(shadow);
    setRoot(shadow);
  }, [setRoot, mount, root]);

  return (
    <div ref={ container } className='shadow-root'>
      { root && ReactDOM.createPortal(children, root) }
    </div>
  );
}

export default function IconShadowRoot() {
  return (
    <ShadowRoot mount={ (shadow) => svgosm.mount(shadow) }>
      <style>{ css }</style>
      <Brush width={ 18 } height={ 18 } fill='red' />
    </ShadowRoot>
  );
}
