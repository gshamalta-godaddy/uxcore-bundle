"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _camelcase = _interopRequireDefault(require("camelcase"));

var _toCssCustomProperty = _interopRequireDefault(require("./to-css-custom-property.js"));

var _getDefaultValue = _interopRequireDefault(require("./get-default-value.js"));

/**
 * Creates a set of intents based on the provided config.
 * @param {String} basename - The name of the component or package
 * @param {Object} config - A Configuration object.
 * @param {Array<String>} [config.expressions] - An array of expressions (states), provided by enums.js
 * @param {Array<String>} [config.interactions] - An array of interactions (ie, hovered, grabbed), provided by enums.js
 * @param {Array<String>} [config.styleProperties] - An array of style properties, provided by enums.js
 * @param {Object} [config.features] - An object of subconfigs that describe the features of the component
 * @param {Boolean} [readonly] - Determines if the value of the intents created are readonly or able to be set to another value
 * @returns {Object} - A set of intents
 */
function createIntentSet(basename, config, readonly) {
  const {
    expressions,
    interactions,
    styleProperties,
    features,
    parent
  } = config || {};
  const normalized = normalize(basename);
  let permutations = permutate([normalized], expressions);
  permutations = permutate(permutations, interactions);
  const intents = {};
  permutations.forEach(name => {
    intents[name] = {};

    if (Array.isArray(styleProperties)) {
      styleProperties.forEach(prop => {
        createStylePropertyObject(intents[name], asArray(name, prop, parent), readonly);
      });
    }
  });

  if (features) {
    Object.keys(features).forEach(key => {
      Object.keys(intents).forEach(intent => {
        const featureConfig = Object.assign(features[key], {
          parent: intent
        });
        const featureIntent = createIntentSet(key, featureConfig, readonly);
        Object.assign(intents[intent], featureIntent);
      });
    });
  }

  return intents;
}
/**
 * Normalizes a string, expected to potentially take package names and namespaces
 * @param {String} name - A component name with non-alphanumeric characters
 * @returns {String} - A string with only alphanumeric characters, camelCased
 */


function normalize(name) {
  const alphanumeric = name.replace(/[^a-zA-Z0-9]+/g, ' ');
  return (0, _camelcase.default)(alphanumeric);
}
/**
 * Sets a key on a target object so it returns CSS Custom Property strings
 * @param {Object} targetObj - The object in which we expect to define a property
 * @param {Array<String>} intentParts - An array representing the dot-notation path for the intent
 * @param {Boolean} readonly - Determines if the value of the intents created are readonly or able to be set to another value
 * @returns {Object} - The targetObj with the property defined
 */


function createStylePropertyObject(targetObj, intentParts, readonly) {
  const key = intentParts[intentParts.length - 1];
  const privateDefault = `_${key}`;
  return Object.defineProperty(targetObj, key, {
    enumerable: true,

    get() {
      if (!readonly && !this[privateDefault]) {
        // eslint-disable-next-line no-console
        console.warn(`Fallback value not set for ${intentParts.join('.')}`);
      }

      const defaultValue = readonly || !this[privateDefault] ? `, ${(0, _getDefaultValue.default)(intentParts)}` : `, ${this[privateDefault]}`;
      return `var(${(0, _toCssCustomProperty.default)(intentParts)}${defaultValue})`;
    },

    set(defaultValue) {
      try {
        Object.defineProperty(targetObj, privateDefault, {
          enumerable: false,
          value: defaultValue
        });
      } catch (err) {
        throw new Error(`Value has been set as ${this[privateDefault]} on ${key}`);
      }
    }

  });
}
/**
 * Creates a collection of intent permutations based on variations of expression and interaction
 * @param {Array<String>} current - List of base intents (box, uxModal)
 * @param {Array<String>} reference - List of strings to concat to the base
 * @returns {Array<String>} - An array of new intent bases
 */


function permutate(current, reference) {
  const additional = current.reduce((arr, name) => {
    return Array.isArray(reference) ? arr.concat(reference.map(ref => name + ref)) : arr;
  }, []);
  return current.concat(additional);
}
/**
 * Intent string construction helper function
 * @param {String} basename - The component this Intent describes
 * @param {String} property - A CSS style property, based on enums.js
 * @param {String} [parent] - The parent component, does not exist unless this describes a feature
 * @returns {Array<String>} - An array with the parts of the dot-notation Intent in the correct order
 */


function asArray(basename, property, parent) {
  return [parent, basename, property].filter(Boolean);
}

var _default = createIntentSet;
exports.default = _default;