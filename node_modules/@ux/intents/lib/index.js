"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "createPropertyOrder", {
  enumerable: true,
  get: function () {
    return _createPropertyOrder.default;
  }
});
exports.default = void 0;
Object.defineProperty(exports, "enums", {
  enumerable: true,
  get: function () {
    return _enums.default;
  }
});
Object.defineProperty(exports, "feedbackExpressions", {
  enumerable: true,
  get: function () {
    return _feedbackExpressions.default;
  }
});
Object.defineProperty(exports, "toCssCustomProperty", {
  enumerable: true,
  get: function () {
    return _toCssCustomProperty.default;
  }
});

var _objDotProps = _interopRequireDefault(require("obj-dot-props"));

var _action = _interopRequireDefault(require("./theme-intents/action"));

var _box = _interopRequireDefault(require("./theme-intents/box"));

var _control = _interopRequireDefault(require("./theme-intents/control"));

var _feedback = _interopRequireDefault(require("./theme-intents/feedback"));

var _figure = _interopRequireDefault(require("./theme-intents/figure"));

var _navigate = _interopRequireDefault(require("./theme-intents/navigate"));

var _text = _interopRequireDefault(require("./theme-intents/text"));

var _createIntentSet = _interopRequireDefault(require("./create-intent-set"));

var _createPropertyOrder = _interopRequireDefault(require("./create-property-order"));

var _enums = _interopRequireDefault(require("./enums"));

var _feedbackExpressions = _interopRequireDefault(require("./feedback-expressions"));

var _toCssCustomProperty = _interopRequireDefault(require("./to-css-custom-property"));

let ux;

class Intents {
  constructor() {
    if (!ux) {
      ux = (0, _createIntentSet.default)('ux', {
        features: Object.assign({}, _action.default, _box.default, _control.default, _feedback.default, _figure.default, _navigate.default, _text.default)
      }, true);
    }

    Object.assign(this, ux);
  }
  /**
   * Create a set of (component) intents
   * @param {String} componentName - The name of the component or package
   * @param {Object} config - A Configuration object.
   * @param {Array<String>} [config.expressions] - An array of expressions (states), provided by enums.js
   * @param {Array<String>} [config.interactions] - An array of interactions (ie, hovered, grabbed), provided by enums.js
   * @param {Array<String>} [config.styleProperties] - An array of style properties, provided by enums.js
   * @param {Object} [config.features] - An object of subconfigs that describe the features of the component
   * @returns {Object} - A set of intents
   */


  create(componentName, config) {
    if (componentName) {
      if (componentName === 'ux') {
        throw new Error(`${componentName} is reserved, please choose another.`);
      }

      Object.assign(this, (0, _createIntentSet.default)(componentName, config));
    }

    return this;
  }
  /**
   * Returns a list of the Intents created by this instance
   * @param {String} [componentName] - The name of the component or package
   * @returns {Array<String>} - A collection of dot-notation Intents
   */


  enumerate(componentName) {
    let target = Object.assign({}, this);

    if (componentName) {
      target = Object.keys(target).reduce((accum, key) => {
        if (key.startsWith(componentName)) {
          Object.assign(accum, {
            [key]: target[key]
          });
        }

        return accum;
      }, {});
    }

    return (0, _objDotProps.default)(target);
  }

}

var _default = Intents;
exports.default = _default;