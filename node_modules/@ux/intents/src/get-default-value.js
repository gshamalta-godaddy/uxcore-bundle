/**
 * This function is a shim for setting defaults for the theme intents.
 * A next iteration of the intents system should define intents in a similar manner to registering properties for CSS
 * https://developer.mozilla.org/en-US/docs/Web/API/CSS_Properties_and_Values_API/guide
 *
 * This would require updates across the system, most likely affecting configs in components as well
 *
 * @param {Array<String>} intentParts - An array of parts to an intent, specifically used in the createIntentSet function
 * @returns {String|Number} - A default value based on the intent parts
 */
export default function getDefaultValue(intentParts) {
  const [category, property] = intentParts.slice(-2).map((v) => v.toLowerCase());

  if (property.includes('decoration')) {
    return 'underline';
  }

  if (property.includes('density')) {
    return '.25rem';
  }

  if (property.includes('radius')) {
    return '2px';
  }

  if (property.includes('width')) {
    return category.includes('action') ? '2px' : '1px';
  }

  if (property.includes('color')) {
    return getColor(property, category);
  }

  if (category.includes('text')) {
    return getTypography(property, category);
  }

  return 'inherit';
}

/**
 * Returns a value for color based on category and property
 * @param {String} property - Some intent property as all lowercase, eg: backgroundcolor, foregroundcolor, etc
 * @param {String} category - Some intent category as all lowercase, eg: actioncritical, boxhighcontrast, etc
 * @returns {String} - Value for the provided category and property, defaults to white
 */
function getColor(property, category) {

  if (property.includes('outline')) {
    return 'blue';
  }

  if (category.includes('figure')) {
    return 'green';
  }

  if (category.includes('feedback')) {
    if (property.includes('onfeedback')) {
      return 'white';
    }

    if (category.includes('critical')) {
      return 'red';
    }

    if (category.includes('success')) {
      return 'green';
    }

    if (category.includes('warning')) {
      return 'darkorange';
    }

    if (category.includes('premium')) {
      return 'purple';
    }

    if (category.includes('passive')) {
      return 'gray';
    }

    return 'blue';
  }

  if (category.includes('highcontrast')) {
    if (property.includes('foreground')) {
      return 'white';
    }
    return 'black';
  }

  if (property.includes('foreground')) {
    if (category.includes('action') || category.includes('navigate')) {
      if (category.includes('critical')) {
        return 'white';
      }

      if (category.includes('primary')) {
        return 'white';
      }

      if (category.includes('hovered') || category.includes('chosen')) {
        return 'white';
      }
      return 'black';
    }
    return 'black';
  }

  if (property.includes('border')) {
    if (category.includes('action') || category.includes('navigate')) {
      return 'transparent';
    }
    return 'lightgray';
  }

  if (property.includes('background')) {
    if (category.includes('action') || category.includes('navigate')) {
      if (category.includes('critical')) {
        return 'red';
      }

      if (category.includes('primary')) {
        return 'green';
      }

      if (category.includes('control')) {
        return 'lightgray';
      }

      if (category.includes('hovered') || category.includes('chosen')) {
        return 'blue';
      }
      return 'transparent';
    }
    return 'white';
  }

  return 'black';
}

/**
 * Returns a value for typography based on category and property
 * @param {String} property - Some intent property as all lowercase, eg: lineheight, fontsize, etc
 * @param {String} category - Some intent category as all lowercase, eg: textaction, textheadline, etc
 * @returns {String|Number} - Value for the provided category and property, defaults to inherit
 */
function getTypography(property, category) {
  if (property.includes('fontfamily')) {
    if (category.includes('heading')) {
      return 'serif';
    }
    return 'sans-serif';
  }

  if (property.includes('fontsize')) {
    if (category.includes('heading')) {
      return '2rem';
    }

    if (category.includes('title')) {
      return '1.5rem';
    }

    if (category.includes('caption')) {
      return '.875rem';
    }
    return '1rem';
  }

  if (property.includes('fontweight')) {
    if (category.includes('heading') || category.includes('title')) {
      return 700;
    }
    return 400;
  }

  if (property.includes('lineheight')) {
    if (category.includes('heading') || category.includes('title')) {
      return 1.25;
    }
    return 1.5;
  }

  return 'inherit';
}
