import getDotProps from 'obj-dot-props';
import action from './theme-intents/action';
import box from './theme-intents/box';
import control from './theme-intents/control';
import feedback from './theme-intents/feedback';
import figure from './theme-intents/figure';
import navigate from './theme-intents/navigate';
import text from './theme-intents/text';
import createIntentSet from './create-intent-set';

let ux;

class Intents {
  constructor() {

    if (!ux) {
      ux = createIntentSet('ux', {
        features: Object.assign({}, action, box, control, feedback, figure, navigate, text)
      }, true);
    }

    Object.assign(this, ux);
  }

  /**
   * Create a set of (component) intents
   * @param {String} componentName - The name of the component or package
   * @param {Object} config - A Configuration object.
   * @param {Array<String>} [config.expressions] - An array of expressions (states), provided by enums.js
   * @param {Array<String>} [config.interactions] - An array of interactions (ie, hovered, grabbed), provided by enums.js
   * @param {Array<String>} [config.styleProperties] - An array of style properties, provided by enums.js
   * @param {Object} [config.features] - An object of subconfigs that describe the features of the component
   * @returns {Object} - A set of intents
   */
  create(componentName, config) {
    if (componentName) {
      if (componentName === 'ux') {
        throw new Error(`${componentName} is reserved, please choose another.`);
      }

      Object.assign(this, createIntentSet(componentName, config));
    }
    return this;
  }

  /**
   * Returns a list of the Intents created by this instance
   * @param {String} [componentName] - The name of the component or package
   * @returns {Array<String>} - A collection of dot-notation Intents
   */
  enumerate(componentName) {
    let target = Object.assign({}, this);
    if (componentName) {
      target = Object.keys(target).reduce((accum, key) => {
        if (key.startsWith(componentName)) {
          Object.assign(accum, { [key]: target[key] });
        }
        return accum;
      }, {});
    }

    return getDotProps(target);
  }
}

export { default as createPropertyOrder } from './create-property-order';
export { default as enums } from './enums';
export { default as feedbackExpressions } from './feedback-expressions';
export { default as toCssCustomProperty } from './to-css-custom-property';

export default Intents;
