import React from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import text from '@ux/text';
import textClasses from '@ux/text/classes';

const UX_LABEL_CLASSNAME = 'ux-label';

/**
 * Creates a label component
 *
 * @param {Object} props - Component configuration
 * @param {Element} props.children - Content for the label
 * @param {String} [props.className] - Optional class name
 * @param {Boolean} [props.float] - Sets the label as floating
 * @param {String} props.htmlFor - Sets the for attribute on the label
 * @param {String} props.id - Sets the id attribute on the label
 * @param {Boolean} [props.internal] - Sets the label as internal to a component
 * @param {Boolean|Object} [props.required] - Marks the label as required
 * @param {String} [props.required.emphasis] - @ux/text emphasis for required mark
 * @param {String} [props.required.text] - Content for the required mark
 * @param {Object} ref - Element reference
 * @returns {Element} - Label component
 */
const Label = React.forwardRef(function label(props, ref) {
  const {
    children,
    className,
    float,
    htmlFor,
    id,
    internal,
    required
  } = props;

  return (
    <label
      className={ classnames(UX_LABEL_CLASSNAME, className, {
        // Meant as external label, expected to appear above the input field
        [textClasses({ as: 'label' })]: !internal,
        // Inherit styles from input, potentially float
        [`${UX_LABEL_CLASSNAME}--internal`]: internal,
        [`${UX_LABEL_CLASSNAME}--floating`]: float && internal
      }) }
      htmlFor={ htmlFor }
      id={ id }
      ref={ ref }>

      {/** Content for the label */}
      { children }

      {/** Required marking */}
      { required && <text.span
        aria-hidden={ true }
        className={ `${UX_LABEL_CLASSNAME}-required` }
        emphasis={ (typeof required === 'object' && required.emphasis) || 'critical' }
        text={ (typeof required === 'object' && required.text) || '*' } /> }

    </label>
  );

});

Label.propTypes = {
  /** Children to render as siblings */
  children: PropTypes.node.isRequired,
  /** Class for the root component */
  className: PropTypes.string,
  /** Sets the label as floating */
  float: PropTypes.bool,
  /** Sets the for attribute on the label */
  htmlFor: PropTypes.string.isRequired,
  /** id for the label */
  id: PropTypes.string,
  /** Sets the label as internal to parent */
  internal: PropTypes.bool,
  /** Sets the label as required */
  required: PropTypes.oneOfType([
    /** Use defaults */
    PropTypes.bool,
    /** Customize required */
    PropTypes.shape({
      /** Default is 'critical' */
      emphasis: PropTypes.string,
      /** Default is asterisk (*) */
      text: PropTypes.node
    })
  ])
};

Label.displayName = 'Label';

/**
 * Ensures a @ux/label is created
 *
 * @param {Object|String} label - Common configuration for a label
 * @param {Object} props - Additional props to construct a new label
 * @returns {Object} - Label
 */
function ensureLabelComponent(label, props = {}) {
  if (!label) return null;

  return typeof label === 'object' && label.type === Label
    ? label
    : <Label { ...props }>{ label }</Label>;
}

export { ensureLabelComponent };
export default Label;
