"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _button = _interopRequireDefault(require("@ux/button"));

var _dropdown = _interopRequireWildcard(require("@ux/dropdown"));

var _ellipsis = _interopRequireDefault(require("@ux/icon/ellipsis"));

var _chevronDblLeft = _interopRequireDefault(require("@ux/icon/chevron-dbl-left"));

var _chevronDblRight = _interopRequireDefault(require("@ux/icon/chevron-dbl-right"));

var _chevronLeft = _interopRequireDefault(require("@ux/icon/chevron-left"));

var _chevronRight = _interopRequireDefault(require("@ux/icon/chevron-right"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Generates and returns and array of numbers starting from start and up to end (not including), going in step increments
 *
 * @param {number} start=0 start for the range of numbers
 * @param {number} end=start end (not including) for the range
 * @param {number} step=1 increment to use while generating numbers
 * @returns {array} Array representing the range of numbers
 * @public
 */
function range() {
  let start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  let end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : start;
  let step = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
  return [...Array((end - start) / step)].map((v, i) => start + i * step);
}
/**
 * Ponyfill (not a Polyfill) for Number.isInteger. Returns a value indicating
 * if `num` is an integer.
 *
 * "While polyfills are naughty, ponyfills are pure, just like ponies."
 * - https://github.com/sindresorhus/ponyfill#pony-pureness-really
 *
 * @param   {Number}  num Value to check integer(ness) of.
 * @returns {Boolean} Returns a value indicating if `num` is an integer.
 * @public
 */


function isInteger(num) {
  return typeof num === 'number' && isFinite(num) && Math.floor(num) === num;
}
/**
 * The default page number that will be used as the starting page number.
 *
 * @type {number}
 * @public
 */


const FIRST_PAGE_NUMBER = 1;
/**
 * The default number of page links to be shown.
 *
 * @type {number}
 * @public
 */

const DEFAULT_NUM_PAGES_SHOWN = 4;
/**
* Default aria-labels
*/

const DEFAULT_ARIA_LABELS = {
  firstPage: 'Go to first page',
  lastPage: 'Go to last page',
  nextPage: 'Go to next page',
  prevPage: 'Go to previous page',
  morePages: 'More pages'
};
/**
 * The Pagination react component that is used to switch between content panes or pages.
 * Behavior of the pagination component is controlled by use of props.
 * The component displays links for pages in the current viewable range,
 * it displays forward and back navigation links and also a dropdown to choose
 * the number of items being displayed per page.

 * @displayName Pagination (web)
 * @class Pagination
 * @public
 */

class Pagination extends _react.default.Component {
  constructor(props) {
    super(props);
    this.state = {
      pageItems: props.pageItems,
      pageSelected: props.defaultSelected
    };
    this.calledWarn = false;

    this._warn();
  }
  /**
   *  console warning about missing id for accessibility purposes
   */


  _warn() {
    if (process.env.NODE_ENV === 'production') return;

    if (!this.props.id && !this.calledWarn && this._allowItemsPerPageSelection()) {
      this.calledWarn = true;
      console.warn('Warning: <Pagination> uses <Dropdown> which requires an id prop to be fully accessible.');
      /* eslint-disable-line */
    }
  }
  /**
   * Normalize provided values to prevent out of range errors when pages
   * are generated.
   *
   * @param {Object} props Current props.
   * @param {Object} state Current state.
   * @returns {Object} The normalized state.
   * @private
   */


  static getDerivedStateFromProps(props, state) {
    const total = Math.ceil(props.totalItems / state.pageItems);
    if (state.pageSelected >= total) state.pageSelected = total;
    return state;
  }
  /**
   * Get the total number of pages in the paginated result set
   *
   * @param {number} pageItems Number of items per page
   * @returns {number} The total number of pages in the paginated result set
   * @private
   */


  _totalPages(pageItems) {
    return Math.ceil(this.props.totalItems / pageItems);
  }
  /**
   * Returns a value indicating if the the pageItems Dropdown should be displayed?
   *
   * @returns {boolean} should the pageItems drop down be displayed
   * @private
   */


  _allowItemsPerPageSelection() {
    return this.props.pageItemsChoices.length > 0;
  }
  /**
   * Should the back links be enabled or disabled?
   *
   * @returns {boolean} should the back links be enabled or disabled?
   * @private
   */


  _enableBackLinks() {
    return this.state.pageSelected > FIRST_PAGE_NUMBER;
  }
  /**
   * Should the forward links be enabled or disabled?
   *
   * @returns {boolean} should the forward links be enabled or disabled?
   * @private
   */


  _enableForwardLinks() {
    return this.state.pageSelected < this._totalPages(this.state.pageItems);
  }
  /**
   * The page range (start and end) that is to be displayed
   *
   * @returns {Object} page range to display
   * @private
   */


  _pageRangeToShow() {
    //
    // The page range is chosen such that the current selected page is centered,
    // except in the case of the first and the last page.
    //
    const pageSelected = this.state.pageSelected;

    const totalPages = this._totalPages(this.state.pageItems, this.props.totalItems);

    const maxPageLinks = this.props.maxPageLinks;
    const pageRangeStart = Math.max(FIRST_PAGE_NUMBER, pageSelected - Math.floor(maxPageLinks / 2));
    const pageRangeEnd = Math.min(totalPages, pageRangeStart + maxPageLinks - 1);
    return {
      pageRangeStart,
      pageRangeEnd
    };
  }
  /**
   * JSX for the page link section
   *
   * @returns {ReactElement} page link section
   * @private
   */


  _pageLinksSection() {
    const {
      pageRangeStart,
      pageRangeEnd
    } = this._pageRangeToShow();

    return range(pageRangeStart, pageRangeEnd + 1).map(val => {
      const isSelected = this.state.pageSelected === val;
      const key = `page-links-${val}`;
      let design;

      if (!isSelected) {
        design = 'inline';
      }

      return /*#__PURE__*/_react.default.createElement("li", {
        className: "page-item page-number",
        key: key
      }, /*#__PURE__*/_react.default.createElement(_button.default, {
        design: design,
        active: isSelected,
        text: val,
        onClick: evt => this.onPageClick(evt, val)
      }));
    });
  }
  /**
   * JSX for the more section
   *
   * @returns {ReactElement} more link section
   * @private
   */


  _moreLinksSection() {
    return /*#__PURE__*/_react.default.createElement("li", {
      className: "page-item more"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "page-ellipsis"
    }, /*#__PURE__*/_react.default.createElement(_ellipsis.default, {
      "aria-label": this.props.ariaLabels.morePages
    })));
  }
  /**
   * JSX for the first link
   *
   * @returns {ReactElement} first link JSX
   * @private
   */


  _firstLinkSection() {
    const statusClass = this._enableBackLinks() ? '' : 'disabled';
    const hidden = this.props.showBookends ? '' : 'hidden-xs-up';
    const classes = `page-item bookend bookend-first ${statusClass} ${hidden}`;

    const onClick = evt => {
      if (statusClass === 'disabled') {
        evt.preventDefault();
        return;
      }

      this.onNavigationClick(evt, 'first');
    };

    return /*#__PURE__*/_react.default.createElement("li", {
      className: classes
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      design: "inline",
      disabled: statusClass === 'disabled',
      icon: /*#__PURE__*/_react.default.createElement(_chevronDblLeft.default, null),
      onClick: onClick,
      "aria-label": this.props.ariaLabels.firstPage,
      "aria-disabled": statusClass === 'disabled'
    }));
  }
  /**
   * JSX for the last link
   *
   * @returns {ReactElement} last link JSX
   * @private
   */


  _lastLinkSection() {
    const statusClass = this._enableForwardLinks() ? '' : 'disabled';
    const hidden = this.props.showBookends ? '' : 'hidden-xs-up';
    const classes = `page-item bookend bookend-last ${statusClass} ${hidden}`;

    const onClick = evt => {
      if (statusClass === 'disabled') {
        evt.preventDefault();
        return;
      }

      this.onNavigationClick(evt, 'last');
    };

    return /*#__PURE__*/_react.default.createElement("li", {
      className: classes
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      design: "inline",
      disabled: statusClass === 'disabled',
      icon: /*#__PURE__*/_react.default.createElement(_chevronDblRight.default, null),
      onClick: onClick,
      "aria-label": this.props.ariaLabels.lastPage,
      "aria-disabled": statusClass === 'disabled'
    }));
  }
  /**
   * JSX for the previous link
   *
   * @returns {ReactElement} previous link JSX
   * @private
   */


  _prevLinkSection() {
    const statusClass = this._enableBackLinks() ? '' : 'disabled';
    const classes = `page-item previous ${statusClass}`;

    const onClick = evt => {
      if (statusClass === 'disabled') {
        evt.preventDefault();
        return;
      }

      this.onNavigationClick(evt, 'prev');
    };

    return /*#__PURE__*/_react.default.createElement("li", {
      className: classes
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      design: "inline",
      disabled: statusClass === 'disabled',
      icon: /*#__PURE__*/_react.default.createElement(_chevronLeft.default, null),
      onClick: onClick,
      "aria-label": this.props.ariaLabels.prevPage,
      "aria-disabled": statusClass === 'disabled'
    }));
  }
  /**
   * JSX for the next link
   *
   * @returns {ReactElement} next link JSX
   * @private
   */


  _nextLinkSection() {
    const statusClass = this._enableForwardLinks() ? '' : 'disabled';
    const classes = `page-item next ${statusClass}`;

    const onClick = evt => {
      if (statusClass === 'disabled') {
        evt.preventDefault();
        return;
      }

      this.onNavigationClick(evt, 'next');
    };

    return /*#__PURE__*/_react.default.createElement("li", {
      className: classes
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      design: "inline",
      disabled: statusClass === 'disabled',
      icon: /*#__PURE__*/_react.default.createElement(_chevronRight.default, null),
      onClick: onClick,
      "aria-label": this.props.ariaLabels.nextPage,
      "aria-disabled": statusClass === 'disabled'
    }));
  }
  /**
   * JSX for the number items per page dropdown
   *
   * @returns {ReactElement} number items per page dropdown JSX
   * @private
   */


  _numberItemsSection() {
    const pageItemsChoices = this.props.pageItemsChoices;
    const defaultSelected = pageItemsChoices.indexOf(this.props.pageItems);
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "pagination-dropdown"
    }, /*#__PURE__*/_react.default.createElement(_dropdown.default, {
      type: "select",
      defaultSelected: [defaultSelected],
      onChange: this.onPageItemsChanged.bind(this)
      /* eslint-disable-next-line no-undefined */
      ,
      id: this.props.id ? `${this.props.id}-page-select` : undefined
    }, pageItemsChoices.map(a => {
      return /*#__PURE__*/_react.default.createElement(_dropdown.DropdownItem, {
        key: a,
        value: a
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "d-inline-flex"
      }, a));
    })));
  }
  /**
   * JSX for the pagination links section
   *
   * @returns {ReactElement|Null} pagination links section JSX
   * @private
   */


  _paginationSection() {
    const {
      pageRangeStart,
      pageRangeEnd
    } = this._pageRangeToShow();

    const paginationSizeClass = `pagination-${this.props.size}`;

    const totalPages = this._totalPages(this.state.pageItems, this.props.totalItems);

    const classes = `pagination ${paginationSizeClass}`;
    if (isNaN(pageRangeEnd)) return null;
    return /*#__PURE__*/_react.default.createElement("ul", {
      className: classes
    }, this._firstLinkSection(), this._prevLinkSection(), pageRangeStart > FIRST_PAGE_NUMBER && this._moreLinksSection(), this._pageLinksSection(), pageRangeEnd < totalPages && this._moreLinksSection(), this._nextLinkSection(), this._lastLinkSection());
  }
  /**
   * The event handler that gets invoked when the number of items per page changes
   *
   * @param {object} props The event props.
   * @returns {void}
   * @public
   */


  onPageItemsChanged(props) {
    const pageSelected = FIRST_PAGE_NUMBER;
    const pageItems = props.value;
    this.setState({
      pageItems,
      pageSelected
    });
    this.props.onChange(pageSelected, pageItems);
  }
  /**
   * The event handler that gets invoked when a page link is clicked
   *
   * @param {object} evt The event object
   * @param {number} pageSelected The value of the page selected
   * @returns {void}
   * @public
   */


  onPageClick(evt, pageSelected) {
    evt.preventDefault();
    this.setState({
      pageSelected
    });
    this.props.onChange(pageSelected, this.state.pageItems);
  }
  /**
   * The event handler that gets invoked when a navigation link is clicked
   *
   * @param {object} evt the event object
   * @param {string} navigationType The type of navigation link that was clicked
   * @returns {void}
   * @public
   */


  onNavigationClick(evt, navigationType) {
    evt.preventDefault();
    let pageSelected;

    const totalPages = this._totalPages(this.state.pageItems, this.props.totalItems);

    switch (navigationType) {
      case 'first':
        pageSelected = FIRST_PAGE_NUMBER;
        break;

      case 'last':
        pageSelected = totalPages;
        break;

      case 'prev':
        pageSelected = Math.max(FIRST_PAGE_NUMBER, this.state.pageSelected - 1);
        break;

      case 'next':
        pageSelected = Math.min(totalPages, this.state.pageSelected + 1);
        break;

      default:
        pageSelected = FIRST_PAGE_NUMBER;
        break;
    }

    this.setState({
      pageSelected
    });
    this.props.onChange(pageSelected, this.state.pageItems, navigationType);
  }
  /**
   * React life cycle method which is invoked before a mounted component receives new props
   *
   * @param {object} prevProps The previous properties
   * @private
   */


  componentDidUpdate(prevProps) {
    if (this.props.defaultSelected !== prevProps.defaultSelected) {
      // set the pageSelected if defaultSelected prop is changed
      this.setState({
        pageSelected: this.props.defaultSelected
      });
    }

    if (this.props.totalItems !== prevProps.totalItems) {
      // set the selected page to the defaultSelected page everytime the total number of pages change
      this.setState({
        pageSelected: this.props.defaultSelected
      });
    }

    if (this.props.pageItems !== prevProps.pageItems) {
      this.setState({
        pageItems: this.props.pageItems,
        pageSelected: this.props.defaultSelected
      });
    }
  }
  /**
   * React life cycle hook for rendering the component
   *
   * @returns {ReactElement} JSX for the entire Pagination component
   * @public
   */


  render() {
    const selection = this._paginationSection();

    if (!selection) return this.props.children || null;
    const wrapClass = `pagination-wrap pagination-size-${this.props.size}`;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: wrapClass,
      id: this.props.id
    }, selection, this._allowItemsPerPageSelection() && this._numberItemsSection());
  }

}
/**
 * Pagination components display name (typically used by a react Dev tool plug-in)
 *
 * @type {string}
 */


exports.default = Pagination;
Pagination.displayName = 'Pagination';
/**
 * Page item validation
 *
 * @param {object} props properties passed in
 * @param {string} propName name of prop to be validated
 * @returns {Error | void} Error if invalid
 * @public
 */

Pagination.pageItemValidation = function (props, propName) {
  const pageItems = props[propName];
  const pageItemsChoices = props.pageItemsChoices;

  if (!isInteger(pageItems) && !(pageItems > 0)) {
    return new Error(`pageItems should be positive integer`);
  }

  if (!!pageItemsChoices.length && pageItemsChoices.indexOf(pageItems) === -1) {
    return new Error(`Invalid value for prop pageItems`);
  }
};
/**
 * Pagination component propTypes
 * typically used for type checking
 *
 * @type {object}
 */


Pagination.propTypes = {
  children: _propTypes.default.node,

  /** The Default selected page */
  defaultSelected: _propTypes.default.number,

  /** The maximum number of page links that should be displayed. */
  maxPageLinks: _propTypes.default.number,

  /** The callback handler when a pagination selection changes i.e. either a page selection or the number
  of items per page selection. The callback gets passed three parameters the page
  currently selected, the current number of items per page value, and the navigation type selected (i.e. next, prev, first, last) */
  onChange: _propTypes.default.func.isRequired,

  /** The number of items that are being displayed per page. */
  pageItems: Pagination.pageItemValidation,

  /** The allowed choices for number of items that will be displayed per page. */
  pageItemsChoices: _propTypes.default.arrayOf(_propTypes.default.number),

  /** Set the size (sm | md | lg) */
  size: _propTypes.default.oneOf(['sm', 'md', 'lg']),

  /** Flag to show or hide the 'first' and 'last' page links. */
  showBookends: _propTypes.default.bool,

  /** The total number of items in the result set that is being paginated. */
  totalItems: _propTypes.default.number.isRequired,

  /** Screenreader labels for sub-elements */
  ariaLabels: _propTypes.default.shape({
    /** Screen reader label for "Go to first page" double left chevron button */
    firstPage: _propTypes.default.string,

    /** Screen reader label for "Go to last page" double right chevron button */
    lastPage: _propTypes.default.string,

    /** Screen reader label for "Go to next page" single right chevron button */
    nextPage: _propTypes.default.string,

    /** Screen reader label for "Go to previous page" single left chevron button */
    prevPage: _propTypes.default.string,

    /** Screen reader label for "More pages" ellipses icon */
    morePages: _propTypes.default.string
  }),

  /** ID attribute for the pagination to add it to dropdown  */
  id: _propTypes.default.string
};
/**
 * Pagination component default prop values
 *
 * @type {object}
 */

Pagination.defaultProps = {
  defaultSelected: FIRST_PAGE_NUMBER,
  maxPageLinks: DEFAULT_NUM_PAGES_SHOWN,
  pageItemsChoices: [],
  size: 'md',
  showBookends: true,
  ariaLabels: DEFAULT_ARIA_LABELS
};