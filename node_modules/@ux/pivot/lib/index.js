"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Pivots;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classNames = _interopRequireDefault(require("@ux/component-utilities/lib/classNames"));

var _pivot = _interopRequireDefault(require("./pivot"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// Import child components

/**
 * Pivots class to render multiple pivot components
 *
 * @displayName Pivots
 * @function Pivots
 * @param {ReactProps} props - component props
 * @returns {ReactElement} - React Element
 * @public
 */
function Pivots(props) {
  const [selectedIndex, setIndex] = (0, _react.useState)(props.selectedIndex);
  /**
   * Sets index based on update
   */

  (0, _react.useEffect)(() => {
    setIndex(props.selectedIndex);
  }, [props.selectedIndex]);
  /**
   * @function handlePivotSelected
   * @param {String} index The index of the pivot selected
   * @public
   */

  function handlePivotSelected() {
    let index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;
    setIndex(index);
  } // Assign so they can be passed to Pivots


  const {
    grid,
    design,
    xsSubtitles,
    xsGraphics,
    pivotList
  } = props; // Create pivots from custom data

  const pivotListRender = pivotList.map((data, i) => /*#__PURE__*/_react.default.createElement(_pivot.default, (0, _extends2.default)({}, data, {
    grid: grid,
    design: design,
    xsSubtitles: xsSubtitles,
    key: `pivot-list-${i}`,
    index: i,
    onSelected: () => handlePivotSelected(i),
    selected: i === selectedIndex
  }))); // Create class names

  const classes = (0, _classNames.default)('ux-pivot-group', 'row', {
    'ux-pivot-slats': design === 'slats',
    'ux-pivot-xs-graphics': xsGraphics
  });
  return /*#__PURE__*/_react.default.createElement("div", {
    role: "navigation",
    className: classes
  }, pivotListRender);
}
/**
 * Property Definitions
 * @public
 */


Pivots.propTypes = {
  /** default is tile buttons meant for tablet/desktop.
   * `slats` which is the default mobile rendering can be forced for tablet/desktop by passing `slats` as design */
  design: _propTypes.default.string,

  /** the bootstrap grid specification */
  grid: _propTypes.default.object,

  /** Array of pivot data structures to generate pivot components */
  pivotList: _propTypes.default.array,

  /** force graphics to render on mobile */
  xsGraphics: _propTypes.default.bool,

  /** force subtitles to render on mobile */
  xsSubtitles: _propTypes.default.bool,

  /**
   * Default selected tile/slat when initially rendered
   * @param {Object} props React props
   * @returns {Error|null} validation
   */
  selectedIndex: props => {
    const {
      selectedIndex,
      pivotList
    } = props;
    if (!(selectedIndex && pivotList)) return null;
    const error = typeof selectedIndex !== 'number' && 'selectedIndex must be a number' || (selectedIndex > pivotList.length - 1 || selectedIndex < -1) && 'selectedIndex is invalid';
    return error ? new Error(error) : null;
  }
};
/**
 * Default Properties
 * @public
 */

Pivots.defaultProps = {
  grid: {
    md: 6,
    xl: 4
  },
  selectedIndex: -1
};