"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Pivot;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classNames = _interopRequireDefault(require("@ux/component-utilities/lib/classNames"));

var _useBreakpoints = _interopRequireDefault(require("@ux/component-utilities/lib/use-breakpoints"));

var _chevronRight = _interopRequireDefault(require("@ux/icon/chevron-right"));

var _linkArrow = _interopRequireDefault(require("@ux/icon/link-arrow"));

/* eslint-disable no-undefined */

/**
 * Render a chevron icon.
 *
 * @returns {React.Element} The icon.
 * @private
 */
function Chevron() {
  return /*#__PURE__*/_react.default.createElement(_chevronRight.default, {
    width: 26,
    height: 26
  });
} // Define grid names (should be in ux-component)


const breakpointSizes = {
  mobile: 'xs',
  phablet: 'sm',
  tablet: 'md',
  desktop: 'lg',
  large: 'xl',
  xlarge: 'xxl'
};
/**
 * Default class for the pivot component
 *
 * @displayName Pivot
 * @class Pivot
 * @param {Object} props - react props
 * @public
 */

function Pivot(props) {
  const {
    breakpoint
  } = (0, _useBreakpoints.default)('mobile', 'phablet', 'tablet', 'desktop', 'large', 'xlarge');
  /**
   * @function handleClick
   * @param {Event} e Dom event for handling click
   * @public
   */

  function handleClick(e) {
    const {
      disabled,
      href,
      onClick,
      onSelected
    } = props;

    if (disabled) {
      e.preventDefault();
    } else if (onClick) {
      onClick(e);
      if (!href) onSelected();
    }
  }
  /**
   * Determine if its necessary to apply a clear class
   * @function determineClearing
   * @returns {boolean} whether or not we need to add clear class
   * @public
   */


  function determineClearing() {
    const {
      design,
      grid: columns,
      index
    } = props;

    if (design === 'slats') {
      return false;
    } // Assign custom grid classes


    const currentSize = breakpointSizes[breakpoint]; // Create an array of sizes

    const sizes = Object.keys(breakpointSizes).map(function (key) {
      return breakpointSizes[key];
    }); // Find current base size

    for (let i = sizes.indexOf(currentSize); i >= 0; i--) {
      if (sizes[i] in columns) {
        // If there are custom grid classes, appropriately clear pivots
        const gridClearNum = 12 / columns[sizes[i]];
        return index % gridClearNum === 0;
      }
    }

    return false;
  }
  /**
   * @function render
   * @returns {ReactElement} The pivot
   * @public
   */


  const {
    title,
    subtitle,
    xsSubtitles,
    design,
    grid,
    graphic,
    href,
    onClick,
    disabled,
    selected,
    id,
    arrow
  } = props; // Creates optional subtitle

  const subtitleRender = subtitle && /*#__PURE__*/_react.default.createElement("span", {
    className: 'ux-pivot-subtitle' + (xsSubtitles ? `` : ` hidden-xs-down`)
  }, subtitle); // Assign custom grid classes if not slats


  const columns = design !== 'slats' ? grid : {}; // Use a button instead of an anchor if no href, but onClick

  const useButton = !href && onClick;
  const Tag = useButton ? 'button' : 'a';
  const linkButton = useButton ? 'button' : 'link'; // Grid option only supports these sizes (xs and sm are set values)

  const gridClasses = (0, _classNames.default)({
    [`col-md-${columns.md}`]: columns.md,
    [`col-lg-${columns.lg}`]: columns.lg,
    [`col-xl-${columns.xl}`]: columns.xl,
    [`col-xxl-${columns.xxl}`]: columns.xxl
  }, 'col-xs-12'); // Apply clear if necessary for IE9

  const gridStyle = determineClearing() ? {
    clear: 'left'
  } : {};
  const aStyle = (0, _classNames.default)('ux-pivot', {
    'ux-pivot-disabled': disabled,
    'ux-pivot-selected': useButton && selected,
    'ux-pivot-arrow': arrow
  });
  return /*#__PURE__*/_react.default.createElement("div", {
    className: gridClasses,
    style: gridStyle,
    role: "navigation"
  }, /*#__PURE__*/_react.default.createElement(Tag, {
    className: aStyle,
    href: href,
    onClick: handleClick,
    role: linkButton,
    "aria-labelledby": id ? `title-${id}` : undefined,
    "aria-selected": selected,
    id: id ? id : undefined
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "ux-pivot-graphic",
    "aria-hidden": "true"
  }, arrow ? /*#__PURE__*/_react.default.createElement(_linkArrow.default, null) : graphic), /*#__PURE__*/_react.default.createElement("span", {
    className: "ux-pivot-title",
    id: id ? `title-${id}` : undefined
  }, title), subtitleRender, /*#__PURE__*/_react.default.createElement("span", {
    className: "ux-pivot-chevron"
  }, design === 'slats' && /*#__PURE__*/_react.default.createElement(Chevron, null))));
}
/**
 * Define Properties
 * @public
 */


Pivot.propTypes = {
  /**
   * link to be assigned to this pivot
   * @function hrefValidate
   * @param {Object} props React props
   * @param {String} propName Name of this href prop
   * @returns {Error|null} validation
   * */
  href: function hrefValidate(props, propName) {
    const value = props[propName];

    if (value && typeof value !== 'string') {
      return new Error('href must be a string');
    }

    if (!value && !props.onClick) {
      return new Error('Either href or onClick required for Pivot');
    }

    return null;
  },

  /**
   * Validate label and require ID if label is a ReactElement
   *
   * @param {Object} props the props passed in
   * @param {string} propName the name of the current prop
   * @param {string} componentName the name of the component
   * @returns {Error|null} validation
   */
  graphic: function validatePropTypeGraphic(props, propName, componentName) {
    if (!props.arrow) {
      _propTypes.default.checkPropTypes({
        graphic: _propTypes.default.element.isRequired
      }, props, propName, componentName);
    }

    return null;
  },

  /** title for the tile/slat */
  title: _propTypes.default.node.isRequired,

  /** optional subtitle for tile/slat */
  subtitle: _propTypes.default.node,

  /** the specified design, `slats` is special cased */
  design: _propTypes.default.string,

  /** index of this specific pivot relative to total set */
  index: _propTypes.default.number,

  /** bootstrap grid specification */
  grid: _propTypes.default.object,

  /** if subtitles should render on mobile  */
  xsSubtitles: _propTypes.default.bool,

  /** click handler */
  onClick: _propTypes.default.func,

  /** onSelected handler */
  onSelected: _propTypes.default.func,

  /** whether this tile/slat is currently selected */
  selected: _propTypes.default.bool,

  /** whether this tile/slat is rendered in disabled state */
  disabled: _propTypes.default.bool,

  /** An optional unique id attribute for the element */
  id: _propTypes.default.string,

  /** adds a specific class to change the way a pivot looks */
  arrow: _propTypes.default.bool
};
/**
 *
 * Default Properties
 * @public
 */

Pivot.defaultProps = {
  grid: {},
  disabled: false,
  selected: false,
  arrow: false
};