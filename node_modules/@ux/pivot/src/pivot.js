/* eslint-disable no-undefined */
import React from 'react';
import PropTypes from 'prop-types';
import classNames from '@ux/component-utilities/lib/classNames';
import useBreakpoints from '@ux/component-utilities/lib/use-breakpoints';
import ChevronRight from '@ux/icon/chevron-right';
import Arrow from '@ux/icon/link-arrow';

/**
 * Render a chevron icon.
 *
 * @returns {React.Element} The icon.
 * @private
 */
function Chevron() {
  return (
    <ChevronRight width={ 26 } height={ 26 } />
  );
}

// Define grid names (should be in ux-component)
const breakpointSizes = {
  mobile: 'xs',
  phablet: 'sm',
  tablet: 'md',
  desktop: 'lg',
  large: 'xl',
  xlarge: 'xxl'
};

/**
 * Default class for the pivot component
 *
 * @displayName Pivot
 * @class Pivot
 * @param {Object} props - react props
 * @public
 */
export default function Pivot(props) {

  const { breakpoint } = useBreakpoints('mobile', 'phablet', 'tablet', 'desktop', 'large', 'xlarge');

  /**
   * @function handleClick
   * @param {Event} e Dom event for handling click
   * @public
   */
  function handleClick(e) {
    const { disabled, href, onClick, onSelected } = props;
    if (disabled) {
      e.preventDefault();
    } else if (onClick) {
      onClick(e);
      if (!href) onSelected();
    }
  }

  /**
   * Determine if its necessary to apply a clear class
   * @function determineClearing
   * @returns {boolean} whether or not we need to add clear class
   * @public
   */
  function determineClearing() {
    const { design, grid: columns, index } = props;
    if (design === 'slats') { return false; }

    // Assign custom grid classes
    const currentSize = breakpointSizes[breakpoint];

    // Create an array of sizes
    const sizes = Object.keys(breakpointSizes).map(function (key) {
      return breakpointSizes[key];
    });

    // Find current base size
    for (let i = sizes.indexOf(currentSize); i >= 0; i--) {
      if (sizes[i] in columns) {
        // If there are custom grid classes, appropriately clear pivots
        const gridClearNum = 12 / columns[sizes[i]];
        return (index % gridClearNum) === 0;
      }
    }

    return false;
  }

  /**
   * @function render
   * @returns {ReactElement} The pivot
   * @public
   */
  const {
    title, subtitle, xsSubtitles,
    design, grid, graphic,
    href, onClick,
    disabled, selected, id, arrow
  } = props;

  // Creates optional subtitle
  const subtitleRender = subtitle && (
    <span className={ 'ux-pivot-subtitle' + (xsSubtitles ? `` : ` hidden-xs-down`) }>
      { subtitle }
    </span>
  );

  // Assign custom grid classes if not slats
  const columns = (design !== 'slats') ? grid : { };

  // Use a button instead of an anchor if no href, but onClick
  const useButton = !href && onClick;
  const Tag = useButton ? 'button' : 'a';
  const linkButton = useButton ? 'button' : 'link';

  // Grid option only supports these sizes (xs and sm are set values)
  const gridClasses = classNames({
    [`col-md-${columns.md}`]: columns.md,
    [`col-lg-${columns.lg}`]: columns.lg,
    [`col-xl-${columns.xl}`]: columns.xl,
    [`col-xxl-${columns.xxl}`]: columns.xxl
  }, 'col-xs-12');

  // Apply clear if necessary for IE9
  const gridStyle = determineClearing() ? { clear: 'left' } : { };
  const aStyle = classNames('ux-pivot', {
    'ux-pivot-disabled': disabled,
    'ux-pivot-selected': useButton && selected,
    'ux-pivot-arrow': arrow
  });

  return (
    <div className={ gridClasses } style={ gridStyle } role='navigation'>
      <Tag
        className={ aStyle }
        href={ href }
        onClick={ handleClick }
        role={ linkButton }
        aria-labelledby={ id ? `title-${id}` : undefined }
        aria-selected={ selected }
        id={ id ? id : undefined }>
        <span className='ux-pivot-graphic' aria-hidden='true'>
          { arrow ? <Arrow /> : graphic }
        </span>
        <span className='ux-pivot-title' id={ id ? `title-${id}` : undefined }>
          { title }
        </span>
        { subtitleRender }
        <span className='ux-pivot-chevron'>
          { design === 'slats' && <Chevron /> }
        </span>
      </Tag>
    </div>
  );
}

/**
 * Define Properties
 * @public
 */
Pivot.propTypes = {
  /**
   * link to be assigned to this pivot
   * @function hrefValidate
   * @param {Object} props React props
   * @param {String} propName Name of this href prop
   * @returns {Error|null} validation
   * */
  href: function hrefValidate(props, propName) {
    const value = props[propName];
    if (value && typeof value !== 'string') { return new Error('href must be a string'); }
    if (!value && !props.onClick) { return new Error('Either href or onClick required for Pivot'); }
    return null;
  },
  /**
   * Validate label and require ID if label is a ReactElement
   *
   * @param {Object} props the props passed in
   * @param {string} propName the name of the current prop
   * @param {string} componentName the name of the component
   * @returns {Error|null} validation
   */
  graphic: function validatePropTypeGraphic(props, propName, componentName) {
    if (!props.arrow) {
      PropTypes.checkPropTypes({ graphic: PropTypes.element.isRequired }, props, propName, componentName);
    }
    return null;
  },
  /** title for the tile/slat */
  title: PropTypes.node.isRequired,
  /** optional subtitle for tile/slat */
  subtitle: PropTypes.node,
  /** the specified design, `slats` is special cased */
  design: PropTypes.string,
  /** index of this specific pivot relative to total set */
  index: PropTypes.number,
  /** bootstrap grid specification */
  grid: PropTypes.object,
  /** if subtitles should render on mobile  */
  xsSubtitles: PropTypes.bool,
  /** click handler */
  onClick: PropTypes.func,
  /** onSelected handler */
  onSelected: PropTypes.func,
  /** whether this tile/slat is currently selected */
  selected: PropTypes.bool,
  /** whether this tile/slat is rendered in disabled state */
  disabled: PropTypes.bool,
  /** An optional unique id attribute for the element */
  id: PropTypes.string,
  /** adds a specific class to change the way a pivot looks */
  arrow: PropTypes.bool
};

/**
 *
 * Default Properties
 * @public
 */
Pivot.defaultProps = {
  grid: {},
  disabled: false,
  selected: false,
  arrow: false
};
