[
  {
    "description": "Display a progress bar\n\n@displayName ProgressBar\n@class ProgressBar\n@public",
    "displayName": "ProgressBar",
    "methods": [
      {
        "name": "_percent",
        "docblock": "Get the integer part of the current percentage completed (0-100)\n\n@returns {number} percent\n@private",
        "modifiers": [
          "get"
        ],
        "params": [],
        "returns": {
          "description": "percent",
          "type": {
            "name": "number"
          }
        },
        "description": "Get the integer part of the current percentage completed (0-100)"
      },
      {
        "name": "_exactPercent",
        "docblock": "Get the current percentage completed (0-100)\n\n@returns {number} percent\n@private",
        "modifiers": [
          "get"
        ],
        "params": [],
        "returns": {
          "description": "percent",
          "type": {
            "name": "number"
          }
        },
        "description": "Get the current percentage completed (0-100)"
      },
      {
        "name": "_labelElement",
        "docblock": "Get the label element if `label` prop is set.\n\n@returns {ReactElement} label element\n@private",
        "modifiers": [
          "get"
        ],
        "params": [],
        "returns": {
          "description": "label element",
          "type": {
            "name": "ReactElement"
          }
        },
        "description": "Get the label element if `label` prop is set."
      },
      {
        "name": "_noticeElement",
        "docblock": "Get the notice element if `notice` prop is set.\n\n@returns {ReactElement} notice element\n@private",
        "modifiers": [
          "get"
        ],
        "params": [],
        "returns": {
          "description": "notice element",
          "type": {
            "name": "ReactElement"
          }
        },
        "description": "Get the notice element if `notice` prop is set."
      },
      {
        "name": "_displayElement",
        "docblock": "Get the display element if `children` or `showPercent` prop is set.\nWill not render if small bar.\n@param {string} breakpoint current viewpoints\n@returns {ReactElement} percentage text element\n@private",
        "modifiers": [],
        "params": [
          {
            "name": "breakpoint",
            "description": "current viewpoints",
            "type": {
              "name": "string"
            },
            "optional": false
          }
        ],
        "returns": {
          "description": "percentage text element",
          "type": {
            "name": "ReactElement"
          }
        },
        "description": "Get the display element if `children` or `showPercent` prop is set.\nWill not render if small bar."
      },
      {
        "name": "_size",
        "docblock": "Get the size to render the progress element at\n@param {string} breakpoint current view point\n@returns {string} size\n@private",
        "modifiers": [],
        "params": [
          {
            "name": "breakpoint",
            "description": "current view point",
            "type": {
              "name": "string"
            },
            "optional": false
          }
        ],
        "returns": {
          "description": "size",
          "type": {
            "name": "string"
          }
        },
        "description": "Get the size to render the progress element at"
      },
      {
        "name": "_progressClasses",
        "docblock": "Get the classes to apply to the progress component.\n@param {string} breakpoint current view point\n@returns {string} classes\n@private",
        "modifiers": [],
        "params": [
          {
            "name": "breakpoint",
            "description": "current view point",
            "type": {
              "name": "string"
            },
            "optional": false
          }
        ],
        "returns": {
          "description": "classes",
          "type": {
            "name": "string"
          }
        },
        "description": "Get the classes to apply to the progress component."
      },
      {
        "name": "isSmall",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "breakpoint",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "_tickCount",
        "docblock": "Get the number of tick marks to display\n\n@returns {number} count\n@private",
        "modifiers": [
          "get"
        ],
        "params": [],
        "returns": {
          "description": "count",
          "type": {
            "name": "number"
          }
        },
        "description": "Get the number of tick marks to display"
      },
      {
        "name": "tickLabel",
        "docblock": "Get a single tick mark label\n\n@param {number} index index of label in row, starting at zero\n@param {object} style additional style (if any) to apply to label\n@returns {ReactElement} element\n@private",
        "modifiers": [],
        "params": [
          {
            "name": "index",
            "description": "index of label in row, starting at zero",
            "type": {
              "name": "number"
            },
            "optional": false
          },
          {
            "name": "style",
            "description": "additional style (if any) to apply to label",
            "type": {
              "name": "object"
            },
            "optional": false
          }
        ],
        "returns": {
          "description": "element",
          "type": {
            "name": "ReactElement"
          }
        },
        "description": "Get a single tick mark label"
      },
      {
        "name": "_tickLabels",
        "docblock": "Get the row of tick mark labels\n\n@returns {ReactElement} element\n@private",
        "modifiers": [
          "get"
        ],
        "params": [],
        "returns": {
          "description": "element",
          "type": {
            "name": "ReactElement"
          }
        },
        "description": "Get the row of tick mark labels"
      },
      {
        "name": "_tickLines",
        "docblock": "Get the row of tick mark lines\n\n@returns {ReactElement} element\n@private",
        "modifiers": [
          "get"
        ],
        "params": [],
        "returns": {
          "description": "element",
          "type": {
            "name": "ReactElement"
          }
        },
        "description": "Get the row of tick mark lines"
      },
      {
        "name": "_bar",
        "docblock": "Get the progress element as a bar\n@param {string} breakpoint current view point\n@returns {ReactElement} element\n@private",
        "modifiers": [],
        "params": [
          {
            "name": "breakpoint",
            "description": "current view point",
            "type": {
              "name": "string"
            },
            "optional": false
          }
        ],
        "returns": {
          "description": "element",
          "type": {
            "name": "ReactElement"
          }
        },
        "description": "Get the progress element as a bar"
      },
      {
        "name": "_circle",
        "docblock": "Get the progress element as a circle\n@param {string} breakpoint current view point\n@returns {ReactElement} element\n@private",
        "modifiers": [],
        "params": [
          {
            "name": "breakpoint",
            "description": "current view point",
            "type": {
              "name": "string"
            },
            "optional": false
          }
        ],
        "returns": {
          "description": "element",
          "type": {
            "name": "ReactElement"
          }
        },
        "description": "Get the progress element as a circle"
      }
    ],
    "props": {
      "label": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The title text above the bar",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "min": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The number that the progress bar starts at, this is mainly for aria-valuemin accessibility",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "max": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The maximum number of increments",
        "defaultValue": {
          "value": "100",
          "computed": false
        }
      },
      "value": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The current increment",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "status": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Sets the status color/style (active | complete | warning | error)"
      },
      "notice": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Sets the small text label below the bar"
      },
      "showPercent": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether or not to show the percentage text"
      },
      "startShiftPercent": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The start percent value to shift text to right on bar",
        "defaultValue": {
          "value": "10",
          "computed": false
        }
      },
      "size": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "'xsmall'",
                  "computed": false
                },
                {
                  "value": "'xs'",
                  "computed": false
                },
                {
                  "value": "'sm'",
                  "computed": false
                },
                {
                  "value": "'small'",
                  "computed": false
                },
                {
                  "value": "'md'",
                  "computed": false
                },
                {
                  "value": "'medium'",
                  "computed": false
                },
                {
                  "value": "'lg'",
                  "computed": false
                },
                {
                  "value": "'large'",
                  "computed": false
                },
                {
                  "value": "'xl'",
                  "computed": false
                },
                {
                  "value": "'xlarge'",
                  "computed": false
                }
              ]
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "Set the size (xs | xsmall | sm | small | md | medium | lg | large).\nObject can be used to specify sizes at different breakpoints.\nObject can also be used to specify a custom height.",
        "defaultValue": {
          "value": "'md'",
          "computed": false
        }
      },
      "shape": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'bar'",
              "computed": false
            },
            {
              "value": "'circle'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Set the shape (bar | circle)",
        "defaultValue": {
          "value": "'bar'",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Can be used to customize the value to display; overrides showPercent"
      },
      "striped": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether or not to have a striped progress bar. Won't work with the circle version"
      },
      "ticks": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "An array of custom tick labels to be used only when tickCount is too generic",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "tickCount": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Number of ticks (if any) to show. Won't work with the circle version",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "tickWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Width of ticks (in px)",
        "defaultValue": {
          "value": "2",
          "computed": false
        }
      },
      "hideTickLabels": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether or not to hide the tick mark labels"
      }
    }
  }
]