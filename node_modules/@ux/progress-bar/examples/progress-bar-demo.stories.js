import React, { useState, useCallback } from 'react';
import ProgressBar from '@ux/progress-bar';
import '@ux/progress-bar/styles';
import Button from '@ux/button';
import '@ux/button/styles';

export default function Behavior() {
  const [currentValue, setCurrentValue] = useState(0);
  const [currentStatus, setCurrentStatus] = useState('success');
  const [shape, setShape] = useState('bar');
  const [size, setSize] = useState('md');
  const [tickCount, setTickCount] = useState(0);

  const _reset = useCallback(() => {
    setCurrentValue(0);
  });

  const _forward = useCallback(() => {
    const maxStep = 20;
    const expand = (currentValue / 100.0 - 0.5) * 2.0;
    const step = Math.max(1, Math.abs(Math.cos(expand * Math.PI * 0.5) * maxStep));
    const nextValue = Math.min(100, currentValue + step);
    setCurrentValue(nextValue);
  });

  const _random = useCallback(() => {
    setCurrentValue(Math.floor(Math.random() * 100));
  });

  const _cycleStatus = useCallback(() => {
    const statuses = ['success', 'warning', 'error'];
    const nextStatus = statuses[(statuses.indexOf(currentStatus) + 1) % 3];
    setCurrentStatus(nextStatus);
  });

  const _toggleShape = useCallback(() => {
    setShape(shape === 'bar' ? 'circle' : 'bar');
  });

  const _cycleSize = useCallback(() => {
    const sizes = ['xs', 'sm', 'md', 'lg'];
    let idx = (sizes.indexOf(size) + 1) % 4;
    idx = shape === 'bar' && idx === 3 ? 0 : idx;
    setSize(sizes[idx]);
  });

  const _toggleTicks = useCallback(() => {
    setTickCount(prevTickCount => {
      return prevTickCount ? 0 : 6;
    });
  });

  const bar = shape === 'bar' && tickCount ? <ProgressBar shape={ shape } size={ size } value={ currentValue } status={ currentStatus } tickCount={ tickCount ? 6 : 0 } /> : <ProgressBar shape={ shape } size={ size } value={ currentValue } status={ currentStatus } showPercent />;
  return <div>
    {bar}
    <div className='card-block'>
      <h4>Demo buttons</h4>

      <p>
        <Button size='small' onClick={ _reset } disabled={ currentValue === 0 }>
              Reset
        </Button>
        <Button size='small' onClick={ _forward } disabled={ currentValue === 100 }>
              Advance
        </Button>
        <Button size='small' onClick={ _random }>
              Randomize
        </Button>
      </p>
      <p>
        <Button size='small' onClick={ _cycleStatus }>
              Cycle Status
        </Button>
        <Button size='small' onClick={ _toggleShape }>
              Toggle Shape
        </Button>
        <Button size='small' onClick={ _cycleSize }>
              Cycle Size
        </Button>
        <Button size='small' onClick={ _toggleTicks }>
              Toggle Ticks
        </Button>
      </p>
    </div>
  </div>;
}
