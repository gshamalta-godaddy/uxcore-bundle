[
  {
    "description": "Creates a SiblingSet component\n\n@param {Object} props - Properties to inform the component\n@param {Elements} props.children - Given children as siblings\n@param {String} [props.className] - Optional class name\n@param {Boolean} [props.divider] - Optional divider\n@param {String} [props.gap] - Optional amount of space between siblings, sm md lg\n@param {String} [props.id] - Used to inform a11y internals\n@param {Boolean|String} [props.invalid] - Sets invalid within the component\n@param {Object} [props.label] - Label configuration object\n@param {Element} [props.label.content] - Content for the label\n@param {String} [props.label.id] - `id` for the label\n@param {String} [props.helpMessage] - Help message\n@param {String} [props.errorMessage] - Error message\n@param {String} [props.orientation] - Directions for layout, horizontal or vertical\n@param {Boolean} [props.stretch] - Determines if the siblings should stretch the full width of the container\n@param {Boolean} [props.wrap] - Wrap children to the next line\n@returns {Component} - The SiblingSet component",
    "displayName": "SiblingSet",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Children to render as siblings"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Optional class name used to help position the component"
      },
      "divider": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Sets a divider between the label and siblings, helpful for segregating the label from the siblings"
      },
      "gap": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'sm'",
              "computed": false
            },
            {
              "value": "'md'",
              "computed": false
            },
            {
              "value": "'lg'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Gap between the siblings, no gap by default"
      },
      "id": {
        "type": {
          "name": "custom",
          "raw": "function oneOfRequiredProps(props, propName, componentName) {\n  const labelNoId = props.label && !props.id;\n  const helpNoId = props.helpMessage && !props.id;\n  const errorNoId = props.errorMessage && !props.id;\n\n  if (labelNoId || helpNoId || errorNoId) {\n    return new Error(`When using a label, helpMessage or errorMessage, the 'id' prop is required`);\n  }\n\n  return PropTypes.checkPropTypes({\n    [propName]: PropTypes.node\n  }, props, propName, componentName);\n}"
        },
        "required": false,
        "description": "Used to inform a11y internals"
      },
      "invalid": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "enum",
              "value": [
                {
                  "value": "'grammar'",
                  "computed": false
                },
                {
                  "value": "'spelling'",
                  "computed": false
                }
              ]
            }
          ]
        },
        "required": false,
        "description": "Sets the component as invalid"
      },
      "label": {
        "type": {
          "name": "custom",
          "raw": "function oneOfRequiredProps(props, propName, componentName) {\n  const labelNoId = props.label && !props.id;\n  const helpNoId = props.helpMessage && !props.id;\n  const errorNoId = props.errorMessage && !props.id;\n\n  if (labelNoId || helpNoId || errorNoId) {\n    return new Error(`When using a label, helpMessage or errorMessage, the 'id' prop is required`);\n  }\n\n  return PropTypes.checkPropTypes({\n    [propName]: PropTypes.node\n  }, props, propName, componentName);\n}"
        },
        "required": false,
        "description": "Optional label for the siblings"
      },
      "helpMessage": {
        "type": {
          "name": "custom",
          "raw": "function oneOfRequiredProps(props, propName, componentName) {\n  const labelNoId = props.label && !props.id;\n  const helpNoId = props.helpMessage && !props.id;\n  const errorNoId = props.errorMessage && !props.id;\n\n  if (labelNoId || helpNoId || errorNoId) {\n    return new Error(`When using a label, helpMessage or errorMessage, the 'id' prop is required`);\n  }\n\n  return PropTypes.checkPropTypes({\n    [propName]: PropTypes.node\n  }, props, propName, componentName);\n}"
        },
        "required": false,
        "description": "Optional message for the siblings"
      },
      "errorMessage": {
        "type": {
          "name": "custom",
          "raw": "function oneOfRequiredProps(props, propName, componentName) {\n  const labelNoId = props.label && !props.id;\n  const helpNoId = props.helpMessage && !props.id;\n  const errorNoId = props.errorMessage && !props.id;\n\n  if (labelNoId || helpNoId || errorNoId) {\n    return new Error(`When using a label, helpMessage or errorMessage, the 'id' prop is required`);\n  }\n\n  return PropTypes.checkPropTypes({\n    [propName]: PropTypes.node\n  }, props, propName, componentName);\n}"
        },
        "required": false,
        "description": "Optional error message for the siblings"
      },
      "orientation": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'horizontal'",
              "computed": false
            },
            {
              "value": "'vertical'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The direction of the siblings, either horizontal or vertical"
      },
      "required": {
        "type": {
          "name": "custom",
          "raw": "Label.propTypes.required"
        },
        "required": false,
        "description": "Optionally shows group as required"
      },
      "stretch": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Stretch the width of the container, helps for larger siblings"
      },
      "wrap": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Wrap children when appropriate"
      }
    }
  }
]