"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _label = _interopRequireDefault(require("@ux/label"));

var _text = _interopRequireDefault(require("@ux/text"));

var _classes = _interopRequireDefault(require("@ux/text/classes"));

const _excluded = ["children", "className", "divider", "gap", "id", "invalid", "label", "helpMessage", "errorMessage", "required", "orientation", "stretch", "wrap"];
const UX_SIBLINGSET_CLASSNAME = 'ux-sibling-set';
/**
 * Creates a SiblingSet component
 *
 * @param {Object} props - Properties to inform the component
 * @param {Elements} props.children - Given children as siblings
 * @param {String} [props.className] - Optional class name
 * @param {Boolean} [props.divider] - Optional divider
 * @param {String} [props.gap] - Optional amount of space between siblings, sm md lg
 * @param {String} [props.id] - Used to inform a11y internals
 * @param {Boolean|String} [props.invalid] - Sets invalid within the component
 * @param {Object} [props.label] - Label configuration object
 * @param {Element} [props.label.content] - Content for the label
 * @param {String} [props.label.id] - `id` for the label
 * @param {String} [props.helpMessage] - Help message
 * @param {String} [props.errorMessage] - Error message
 * @param {String} [props.orientation] - Directions for layout, horizontal or vertical
 * @param {Boolean} [props.stretch] - Determines if the siblings should stretch the full width of the container
 * @param {Boolean} [props.wrap] - Wrap children to the next line
 * @returns {Component} - The SiblingSet component
 */

const SiblingSet = /*#__PURE__*/_react.default.forwardRef(function SiblingSet(props, ref) {
  const _ref = props || {},
        {
    children,
    className,
    divider,
    gap,
    id,
    invalid,
    label,
    helpMessage,
    errorMessage,
    required,
    orientation = 'horizontal',
    stretch,
    wrap
  } = _ref,
        rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);

  delete rest.style;

  if (!children) {
    return null;
  }

  const ariaLabelledBy = label && id && `${id}-label`;
  const helpMessageId = helpMessage && id && `${id}-help`;
  const errorMessageId = errorMessage && id && `${id}-error`;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)(UX_SIBLINGSET_CLASSNAME, className, `${UX_SIBLINGSET_CLASSNAME}-${orientation}`, {
      [`${UX_SIBLINGSET_CLASSNAME}-gap-${gap}`]: gap,
      [`${UX_SIBLINGSET_CLASSNAME}--stretch`]: stretch,
      [`${UX_SIBLINGSET_CLASSNAME}--wrap`]: wrap
    }),
    role: "group",
    "aria-labelledby": ariaLabelledBy,
    "aria-describedby": [helpMessageId, errorMessageId].filter(Boolean).join(' ')
  }, ariaLabelledBy && /*#__PURE__*/_react.default.createElement(_label.default, {
    className: `${UX_SIBLINGSET_CLASSNAME}-label`,
    id: ariaLabelledBy,
    htmlFor: id,
    required: required
  }, label), divider && /*#__PURE__*/_react.default.createElement("hr", null), /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({
    id: id,
    ref: ref,
    "aria-invalid": invalid,
    className: (0, _classes.default)({
      className: `${UX_SIBLINGSET_CLASSNAME}-children`,
      emphasis: invalid ? 'critical' : null
    }),
    style: {
      '--ux-siblingset-amount': children.length
    }
  }, rest), children), helpMessage && /*#__PURE__*/_react.default.createElement(_text.default.p, {
    text: helpMessage,
    as: "caption",
    id: helpMessageId,
    emphasis: "passive"
  }), errorMessage && /*#__PURE__*/_react.default.createElement(_text.default.p, {
    text: errorMessage,
    as: "caption",
    id: errorMessageId,
    emphasis: "critical",
    role: "alert"
  }));
});
/**
 * Determine if given collection of props are valid
 *
 * @param {Object} props - List of given props
 * @param {String} propName - Name of current prop
 * @param {String} componentName - Name of the component
 * @returns {PropTypeValidation} - Property configuration validity
 */


function oneOfRequiredProps(props, propName, componentName) {
  const labelNoId = props.label && !props.id;
  const helpNoId = props.helpMessage && !props.id;
  const errorNoId = props.errorMessage && !props.id;

  if (labelNoId || helpNoId || errorNoId) {
    return new Error(`When using a label, helpMessage or errorMessage, the 'id' prop is required`);
  }

  return _propTypes.default.checkPropTypes({
    [propName]: _propTypes.default.node
  }, props, propName, componentName);
}

SiblingSet.propTypes = {
  /** Children to render as siblings */
  children: _propTypes.default.node,

  /** Optional class name used to help position the component */
  className: _propTypes.default.string,

  /** Sets a divider between the label and siblings, helpful for segregating the label from the siblings */
  divider: _propTypes.default.bool,

  /** Gap between the siblings, no gap by default */
  gap: _propTypes.default.oneOf(['sm', 'md', 'lg']),

  /** Used to inform a11y internals */
  id: oneOfRequiredProps,

  /** Sets the component as invalid */
  invalid: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.oneOf(['grammar', 'spelling'])]),

  /** Optional label for the siblings */
  label: oneOfRequiredProps,

  /** Optional message for the siblings */
  helpMessage: oneOfRequiredProps,

  /** Optional error message for the siblings */
  errorMessage: oneOfRequiredProps,

  /** The direction of the siblings, either horizontal or vertical */
  orientation: _propTypes.default.oneOf(['horizontal', 'vertical']),

  /** Optionally shows group as required */
  required: _label.default.propTypes.required,

  /** Stretch the width of the container, helps for larger siblings */
  stretch: _propTypes.default.bool,

  /** Wrap children when appropriate */
  wrap: _propTypes.default.bool
};
SiblingSet.displayName = 'SiblingSet';
var _default = SiblingSet;
exports.default = _default;