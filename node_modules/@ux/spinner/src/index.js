import React from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';

const DEFAULT_ARIA_LABELS = {
  spinnerName: 'Your content is loading'
};

/**
 * Size of spinner
 * @typedef {"sm" | "md" | "lg"} Size
 */

/**
 * Aria Labels
 * @typedef AriaLabels
 * @property {string} spinnerName - Screen reader label for spinner
 */

/**
 * Component Props
 * @typedef {Object} Props
 * @property {string} className - Classes to be applied to the spinner
 * @property {Size} size - Defines the size of the spinner
 * @property {AriaLabels} ariaLabels - Screenreader labels for sub-elements
 */

/**
 * Display a spinner.
 * @displayName Spinner (Web)
 * @param {Props} props Component Props
 * @returns {React.ReactElement} Component
 */
export default function Spinner({
  size,
  ariaLabels,
  className,
  ...rest
}) {
  // style is explicitly omitted, do not override.
  delete rest.style;

  const classes = classnames('ux-spinner', className, {
    [`ux-spinner-${size}`]: size
  });

  return (
    <svg
      className={ classes }
      aria-label={ ariaLabels.spinnerName }
      xmlns='http://www.w3.org/2000/svg'
      viewBox='0 0 72 72'
      { ...rest }
    >
      <circle
        className='bg-spinner'
        cx='36'
        cy='36'
        r='31'
        fill='none'
        startOffset='0'
      />
      <circle className='fg-spinner' cx='36' cy='36' r='31' fill='none' />
    </svg>
  );
}

Spinner.propTypes = {
  /** Classes to be applied to the spinner */
  className: PropTypes.string,
  /** Defines the size of the spinner */
  size: PropTypes.PropTypes.oneOf(['sm', 'md', 'lg']).isRequired,
  /** Screenreader labels for sub-elements */
  ariaLabels: PropTypes.shape({
    /** Screen reader label for spinner */
    spinnerName: PropTypes.string
  })
};

/**
 * Default properties.
 *
 * @type {Object}
 * @private
 */
Spinner.defaultProps = {
  size: 'md', // Default size.
  ariaLabels: DEFAULT_ARIA_LABELS,
  ...{ className: 'spin-center' }
};
