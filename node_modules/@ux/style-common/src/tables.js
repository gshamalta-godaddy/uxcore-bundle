import { css } from 'linaria';
import intents from './intents.config.js';
import { mediaBreakpointDown, mediaBreakpointUp, breakpointNext, breakpointInfix } from './mixins/breakpoints';
import { gridBreakpoints } from './constants';

function tableRowVariant(state, background) {
  const hoverBackground = background;
  const content = `
    background-color: ${hoverBackground};
    > td,
    > th {
      background-color: ${hoverBackground};
    }
  `;

  return `
  .table-${state} {
    &,
    > th,
    > td {
      background-color: ${background};
    }
  }

  .table-hover, .basegrid {
    .table-${state} {
      &:hover {
        ${content}
      }
    }
  }
  `;
}


function tableResponsive(breakpoints, spacer) {
  return Object.keys(breakpoints).map((breakpoint) => {
    const next = breakpointNext(breakpoint, breakpoints);
    const infix = breakpointInfix(next, breakpoints);
    if (next) {
      return `
        &${infix} {
          ${mediaBreakpointDown(breakpoint, `
            display: block;
            width: 100%;
            overflow-x: auto;
            margin-bottom: ${spacer};
            &.table-bordered {
              border: 0;
            }
        `)}
        }
      `;
    }
    return `
      ${mediaBreakpointDown(breakpoint, `
        display: block;
        width: 100%;
        overflow-x: auto;
        margin-bottom: ${spacer};
        &.table-bordered {
          border: 0;
        }
    `)}
    `;
  }).join('');
}

export default css`
:global() {
  /* stylelint-disable max-nesting-depth */

  /* Basic Bootstrap table */

  table {
    background-color: ${intents.ux.box.backgroundColor};
  }

  th {
    text-align: left;
  }

  .table, .basegrid {
    width: 100%;
    max-width: 100%;
    margin-bottom: calc(${intents.ux.box.density} * 4);
    word-wrap: break-word;
    border-bottom: 1px solid ${intents.ux.box.borderColor};

    th,
    td {
      padding: calc(${intents.ux.box.density} * 4);
      vertical-align: top;
      border-top: 1px solid ${intents.ux.box.borderColor};
    }

    /* Bottom align for column headings */
    > thead > tr > th {
      font-family: ${intents.ux.text.fontFamily};
      font-weight: ${intents.ux.text.fontWeight};
      line-height: ${intents.ux.text.lineHeight};
      background-color: ${intents.ux.box.backgroundColor};
      border-bottom: 1px solid ${intents.ux.box.borderColor};
      font-size: 1.07rem;
      vertical-align: middle;
    }
    /* Remove top border from thead by default */
    > caption + thead,
    > colgroup + thead,
    > thead:first-child {
      > tr:first-child {
        > th,
        > td {
          border-top: 0 !important;
        }
      }
    }

    /* Account for multiple tbody instances */
    > tbody + tbody {
      border-top: 2px solid ${intents.ux.box.borderColor};
    }

    .table {
      background-color: ${intents.ux.box.backgroundColor};
    }

    svg {
      width: 1.375rem;
    }
  }

  /* Expanded table w/ double padding */
  .table-expanded {
    > thead,
    > tbody,
    > tfoot {
      > tr {
        > th,
        > td {
          padding-top: calc(${intents.ux.box.density} * 8);
          padding-bottom: calc(${intents.ux.box.density} * 8);
        }
      }
    }
  }


  /* Condensed table w/ half padding */

  .table-sm {
    th,
    td {
      padding: calc(${intents.ux.box.density} * 1);
    }
  }


  /* Bordered version */
  /* Add borders all around the table and between all the columns. */

  .table-bordered, .basegrid {
    border: 1px solid ${intents.ux.box.borderColor};

    th,
    td {
      border: 1px solid ${intents.ux.box.borderColor};
    }

    > thead,
    > tbody,
    > tfoot {
      > tr {
        > th,
        > td {
          border: 1px solid ${intents.ux.box.borderColor};
        }
      }
    }
    > thead > tr {
      > th,
      > td {
        border-bottom-width: 1px;
      }
    }
  }


  /* Zebra-striping */
  /* Default zebra-stripe styles (alternating gray and transparent backgrounds) */

  .table-striped, .basegrid {
    tbody tr:nth-of-type(odd) {
      background-color: ${intents.ux.boxLowContrast.backgroundColor};
    }
  }


  /* Hover effect */
  /* Placed here since it has to come after the potential zebra striping */

  .table-hover, .basegrid {
    tbody tr {
      &:hover {
        cursor: pointer;
        background-color: ${intents.ux.boxLowContrast.backgroundColor};
      }
    }
    &.table-striped {
      tbody tr {
        &:hover {
          cursor: pointer;
          background-color: ${intents.ux.boxLowContrast.backgroundColor};
        }
      }
    }
  }


  /* Table backgrounds */
  /* Exact selectors below required to override '.table-striped' and prevent */
  /* inheritance to nested tables. */

  /* Generate the contextual variants */
  ${tableRowVariant('active', intents.ux.boxLowContrast.backgroundColor)}
  ${tableRowVariant('success', intents.ux.feedbackSuccess.feedbackColor)}
  ${tableRowVariant('info', intents.ux.feedbackInfo.feedbackColor)}
  ${tableRowVariant('warning', intents.ux.feedbackWarning.feedbackColor)}
  ${tableRowVariant('danger', intents.ux.feedbackCritical.feedbackColor)}



  /* Responsive tables */
  /* Generate series of '.table-responsive-*' classes for configuring the screen */
  /* size of where your table will overflow. */
  /* Do we really need these going to uxcore(3) next? */

  .table-responsive {
    ${tableResponsive(gridBreakpoints, '1rem')}
    > .table {
      margin-bottom: 0;
    }
    ${mediaBreakpointDown('md', `
      width: 100%;
      margin-bottom: calc(${intents.ux.box.density} * 6);
      overflow-y: hidden;
      border: 1px solid ${intents.ux.box.borderColor};
      /* Special overrides for the bordered tables */
      > .table { /* GD! */
        border: 0;

        /* Nuke the appropriate borders so that the parent can handle them */
        > thead,
        > tbody,
        > tfoot {
          > tr {
            > th:first-child,
            > td:first-child {
              border-left: 0;
            }
            > th:last-child,
            > td:last-child {
              border-right: 0;
            }
          }
        }

        /* Only nuke the last row's bottom-border in 'tbody' and 'tfoot' since */
        /* chances are there will be only one 'tr' in a 'thead' and that would */
        /* remove the border altogether. */
        > tbody,
        > tfoot {
          > tr:last-child {
            > th,
            > td {
              border-bottom: 0;
            }
          }
        }
      }
    `)}
  }

  /* GD Basegrid */
  /* Makes a striped, hovered, and bordered table */
  /* without all the classes */
  .basegrid {
    table-layout: fixed;

    > thead > tr > th {
      height: 5.714rem;
      ${mediaBreakpointUp('md', `
        height: 5rem;
      `)}
    }
  }

  /* GD Responsive Tables */
  .table-responsive {
    .basegrid {
      ${mediaBreakpointDown('md', `
        max-width: none;
        border: 0;
      `)}
      ${mediaBreakpointUp('lg', `width: 100% !important; /* to override mobile in page style */`)}
    }
  }

  /* GD Features */
  /* Sets all content centered horizontally and vertically */
  .table-features {
    > thead > tr,
    > tbody > tr {
      > th,
      > td {
        text-align: center;
        vertical-align: middle;
      }
      .table-feature {
        text-align: left;
      }
    }
  }


  ${mediaBreakpointDown('md', `
    /* makes td/th stack on top of each other */
    .table-stacking {
      &,
      > tbody,
      > tbody > tr,
      > tbody > tr > td {
        display: block !important;
        width: 100%;
        &::after {
          content: "";
          display: table;
          clear: both;
        }
      }
      > thead {
        display: none;
      }
      > tbody > tr:first-child > td:first-child {
        border-top: 0;
      }
      > tbody > tr > td {
        padding-left: 10rem;
        text-align: left;
        vertical-align: top;
        border-right: 0;
        border-bottom: 0;
        border-left: 0;

        &:before {
          font-family: ${intents.ux.text.fontFamily};
          font-weight: ${intents.ux.text.fontWeight};
          display: block;
          float: left;
          width: 10rem;
          padding-right: calc(${intents.ux.box.density} * 4);
          padding-left: calc(${intents.ux.box.density} * 4);
          margin-left: -10rem;
          content: attr(data-th);
        }
      }
    }
  `)}
}
`;
