import { css } from 'linaria';
import intents from '../intents.config.js';

const borderAttrValues = {
  style: {
    '': 'solid',
    '-dashed': 'dashed'
  },
  width: {
    1: '1px',
    2: '2px',
    3: '3px',
    4: '4px'
  }
};

const borderUtils = Object.keys(['style', 'width']).map(() => `
  ${Object.entries(borderAttrValues.width).map(([widthName, widthValue]) => `
    ${Object.entries(borderAttrValues.style).map(([styleName, styleValue]) => {
    const name = `${widthName}${styleName}`;
    return `
      /* a = All sides */
      .bd-a-${name} {
        border: ${widthValue} ${styleValue};
      }
      .bd-t-${name} {
        border-top: ${widthValue} ${styleValue};
      }
      .bd-r-${name} {
        border-right: ${widthValue} ${styleValue};
      }
      .bd-b-${name} {
        border-bottom: ${widthValue} ${styleValue};
      }
      .bd-l-${name} {
        border-left: ${widthValue} ${styleValue};
      }

      /* Axes */
      .bd-x-${name} {
        border-right: ${widthValue} ${styleValue};
        border-left: ${widthValue} ${styleValue};
      }
      .bd-y-${name} {
        border-top: ${widthValue} ${styleValue};
        border-bottom: ${widthValue} ${styleValue};
      }
    `;
  }).join('')}
  `).join('')}
`).join('');

const borderPaletteColors = {
  white: {
    bc: intents.ux.box.borderColor
  },
  black: {
    bc: intents.ux.boxHighContrast.borderColor
  },
  gray: {
    bc: intents.ux.boxLowContrast.borderColor
  },
  product: {
    bc: intents.ux.boxLowContrast.borderColor
  },
  primary: {
    bc: intents.ux.feedback.feedbackColor
  },
  success: {
    bc: intents.ux.feedbackSuccess.feedbackColor
  },
  secondary: {
    bc: intents.ux.feedbackNeutral.feedbackColor
  },
  nav: {
    bc: intents.ux.feedbackWarning.feedbackColor
  },
  info: {
    bc: intents.ux.feedbackInfo.feedbackColor
  },
  warning: {
    bc: intents.ux.feedbackWarning.feedbackColor
  },
  danger: {
    bc: intents.ux.feedbackCritical.feedbackColor
  },
  feature: {
    bc: intents.ux.feedbackInternal.feedbackColor
  }
};

export default css`
:global() {
  /* stylelint-disable declaration-no-important, block-opening-brace-space-before */

  /* Border */

  .border-0        { border: 0 !important; }
  .border-top-0    { border-top: 0 !important; }
  .border-right-0  { border-right: 0 !important; }
  .border-bottom-0 { border-bottom: 0 !important; }
  .border-left-0   { border-left: 0 !important; }
  .bd-transparent  { border-color: transparent !important; }

  ${borderUtils}

  ${Object.entries(borderPaletteColors).map(([paletteColor, colors]) => `
    .bd-${paletteColor},
    .bd-${paletteColor}-base,
    .bd-${paletteColor}-pastel,
    .bd-${paletteColor}-highlight,
    .bd-${paletteColor}-midrange,
    .bd-${paletteColor}-dark {
      border-color: ${colors.bc};
    }
  `).join('')}

  /* Border-radius */

  .rounded {
    border-radius: ${intents.ux.box.borderRadius} !important;
  }
  .rounded-top {
    border-top-left-radius: ${intents.ux.box.borderRadius} !important;
    border-top-right-radius: ${intents.ux.box.borderRadius} !important;
  }
  .rounded-right {
    border-top-right-radius: ${intents.ux.box.borderRadius} !important;
    border-bottom-right-radius: ${intents.ux.box.borderRadius} !important;
  }
  .rounded-bottom {
    border-bottom-right-radius: ${intents.ux.box.borderRadius} !important;
    border-bottom-left-radius: ${intents.ux.box.borderRadius} !important;
  }
  .rounded-left {
    border-top-left-radius: ${intents.ux.box.borderRadius} !important;
    border-bottom-left-radius: ${intents.ux.box.borderRadius} !important;
  }

  .rounded-circle {
    border-radius: 50% !important;
  }

  .rounded-0 {
    border-radius: 0 !important;
  }
}
`;
