import { css } from 'linaria';
import { gridBreakpoints, mediaBreakpointUp, mediaBreakpointDown, breakpointInfix } from '../mixins/breakpoints';

const displayUtils = Object.keys(gridBreakpoints).map((breakpoint) => {
  const infix = breakpointInfix(breakpoint, gridBreakpoints);
  return `
    ${mediaBreakpointUp(breakpoint, `
      .d${infix}-none         { display: none !important; }
      .d${infix}-inline       { display: inline !important; }
      .d${infix}-inline-block { display: inline-block !important; }
      .d${infix}-block        { display: block !important; }
      .d${infix}-table        { display: table !important; }
      .d${infix}-table-row    { display: table-row !important; }
      .d${infix}-table-cell   { display: table-cell !important; }
      .d${infix}-flex         { display: flex !important; }
      .d${infix}-inline-flex  { display: inline-flex !important; }
    `)}
  `;
}).join('');


export default css`
:global() {
  /* stylelint-disable declaration-no-important, block-opening-brace-space-before */

  /* Utilities for common 'display' values */

  ${displayUtils}

  /*/ Responsive visibility utilities */

  ${Object.keys(gridBreakpoints).map((bp) => `
    .hidden-${bp}-up {
      ${mediaBreakpointUp(bp, `display: none !important;`)}
    }
    .hidden-${bp}-down {
      ${mediaBreakpointDown(bp, `display: none !important;`)}
    }
  `).join('')}


  /*/ Utilities for toggling 'display' in print */

  @media print {
    .d-print-none         { display: none !important; }
    .d-print-inline       { display: inline !important; }
    .d-print-inline-block { display: inline-block !important; }
    .d-print-block        { display: block !important; }
    .d-print-table        { display: table !important; }
    .d-print-table-row    { display: table-row !important; }
    .d-print-table-cell   { display: table-cell !important; }
    .d-print-flex         { display: flex !important; }
    .d-print-inline-flex  { display: inline-flex !important; }
  }


  /* Print utilities */
  /* Media queries are placed on the inside to be mixin-friendly. */

  .visible-print-block {
    display: none !important;

    @media print {
      display: block !important;
    }
  }
  .visible-print-inline {
    display: none !important;

    @media print {
      display: inline !important;
    }
  }
  .visible-print-inline-block {
    display: none !important;

    @media print {
      display: inline-block !important;
    }
  }

  .hidden-print {
    @media print {
      display: none !important;
    }
  }
}
`;
