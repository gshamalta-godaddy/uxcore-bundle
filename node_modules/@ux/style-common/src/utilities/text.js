import { css } from 'linaria';
import intents from '../intents.config.js';
import { gridBreakpoints, mediaBreakpointUp, breakpointInfix } from '../mixins/breakpoints';
import { ms } from '../constants';

const themeColors = {
  'white': intents.ux.boxHighContrast.foregroundColor,
  'black': intents.ux.box.foregroundColor,
  'gray': intents.ux.feedbackHighContrastPassive.feedbackColor,
  'product': intents.ux.feedbackHighContrastPassive.feedbackColor,
  'primary': intents.ux.feedback.feedbackColor,
  'primary-o': intents.ux.feedbackHighContrastHighlight.feedbackColor,
  'success': intents.ux.feedbackSuccess.feedbackColor,
  'secondary': intents.ux.feedbackNeutral.feedbackColor,
  'secondary-o': intents.ux.feedbackNeutral.feedbackColor,
  'nav': intents.ux.feedbackWarning.feedbackColor,
  'info': intents.ux.feedbackInfo.feedbackColor,
  'warning': intents.ux.feedbackWarning.feedbackColor,
  'danger': intents.ux.feedbackHighContrastCritical.feedbackColor,
  'feature': intents.ux.feedbackInternal.feedbackColor,
  'muted': intents.ux.feedbackHighContrastPassive.feedbackColor
};

const textUtils = Object.keys(gridBreakpoints).map((breakpoint) => {
  const infix = breakpointInfix(breakpoint, gridBreakpoints);
  return `
  ${mediaBreakpointUp(breakpoint, `
    .text${infix}-left {
      text-align: left !important;
      justify-content: left !important;
    }
    .text${infix}-right {
      text-align: right !important;
      justify-content: right !important;
    }
    .text${infix}-center {
      text-align: center !important;
      justify-content: center !important;
    }
  `)}
`;
}).join('');

export default css`
:global() {
  /* Text */

  /* stylelint-disable block-opening-brace-space-before, selector-no-qualifying-type */

  /* Alignment */

  .text-justify        { text-align: justify !important; }
  .text-nowrap         { white-space: nowrap !important; }
  .text-truncate       { overflow: hidden; text-overflow: ellipsis; white-space: nowrap; }

  /* Responsive alignment */

  ${textUtils}

  /* Transformation */

  .text-lowercase      { text-transform: lowercase !important; }
  .text-uppercase      { text-transform: uppercase !important; }
  .text-capitalize     { text-transform: capitalize !important; }

  /* Weight and italics */

  .font-weight-normal  { font-weight: ${intents.ux.text.fontWeight}; }
  .font-weight-bold    { font-weight: bolder; }
  .font-italic         { font-style: italic; }
  .strong-link         { font-weight: bolder; }


  /* Contextual colors */

  ${Object.entries(themeColors).map(([color, value]) => `
    .text-${color} {
      color: ${value} !important;
    }
    a.text-${color}:focus,
    a.text-${color}:hover {
      color: ${value} !important;
    }
  `).join('')}

  /* Misc */

  .text-hide {
    font: 0/0 a;
    color: transparent;
    text-shadow: none;
    background-color: transparent;
    border: 0;
  }

  .text-decoration-none { text-decoration: none !important; }

  /* Reset */

  .text-reset { color: inherit !important; }


  .secondary-link {
    font-size: ${ms(1)};
  }

  .ms-3 {
    font-size: ${ms(-3)};
  }
  .ms-2 {
    font-size: ${ms(-2)};
  }
  .ms-1 {
    font-size: ${ms(-1)};
  }
  .ms0 {
    font-size: ${ms(0)};
  }
  .ms1 {
    font-size: ${ms(1)};
  }
  .ms2 {
    font-size: ${ms(2)};
  }
  .ms3 {
    font-size: ${ms(3)};
  }
  .ms4 {
    font-size: ${ms(4)};
  }
  .ms5 {
    font-size: ${ms(5)};
  }
  .ms6 {
    font-size: ${ms(6)};
  }
  .ms7 {
    font-size: ${ms(7)};
  }
  .ms8 {
    font-size: ${ms(8)};
  }
  .ms9 {
    font-size: ${ms(9)};
  }
  .ms10 {
    font-size: ${ms(10)};
  }

  a {
    &.text-black {
      &:hover,
      &:focus {
        color: ${intents.ux.navigateHovered.foregroundColor} !important;
      }
      &:active {
        color: ${intents.ux.navigateChosen.foregroundColor} !important;
      }
    }

    &.text-white {
      &:hover,
      &:focus {
        color: ${intents.ux.navigateHovered.foregroundColor} !important;
        filter: brightness(1.5);
      }
      &:active {
        color: ${intents.ux.navigateChosen.foregroundColor} !important;
        filter: brightness(1.5);
      }
    }
  }
}
`;
