"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buttonSize = buttonSize;
exports.buttonVariantCustom = buttonVariantCustom;

var _shadows = require("./shadows");

var _borderRadius = require("./border-radius");

var _button = require("../functions/button");

var _variables = require("../variables/_variables");

var _buttons = require("../variables/_buttons");

/* eslint-disable max-statements, max-params */
function buttonVariantCustom(variant) {
  const color = (0, _button.buttonGet)(variant, 'color');
  const background = (0, _button.buttonGet)(variant, 'bg');
  const border = (0, _button.buttonGet)(variant, 'border');
  const boxShadow = (0, _button.buttonGet)(variant, 'box-shadow');
  const colorHover = (0, _button.buttonGet)(variant, 'color-hover');
  const backgroundHover = (0, _button.buttonGet)(variant, 'bg-hover');
  const borderHover = (0, _button.buttonGet)(variant, 'border-hover');
  const boxShadowHover = (0, _button.buttonGet)(variant, 'box-shadow-hover');
  const colorActive = (0, _button.buttonGet)(variant, 'color-active');
  const backgroundActive = (0, _button.buttonGet)(variant, 'bg-active');
  const borderActive = (0, _button.buttonGet)(variant, 'border-active');
  const boxShadowActive = (0, _button.buttonGet)(variant, 'box-shadow-active');
  const borderFocus = (0, _button.buttonGet)(variant, 'border-focus');
  const textTransform = (0, _button.buttonGet)(variant, 'text-transform');

  function getBackground() {
    if (background === 'transparent') {
      return 'background-color: transparent !important;';
    } else if (background === '#fff') {
      return 'background-color: #fff !important;';
    }

    return `background-color: ${_buttons.btnBgDisabled} !important;`;
  }

  return `
    color: ${color} !important;
    background: ${background} !important;
    border-color: ${border} !important;
    ${boxShadow ? (0, _shadows.boxShadow)(`${boxShadow} !important`) : ''}

    ${textTransform ? `text-transform: ${textTransform}` : ''}

    &:hover {
      color: ${colorHover} !important;
      background: ${backgroundHover} !important;
      border-color: ${borderHover} !important;
      ${boxShadowHover ? boxShadow(`${boxShadowHover} !important`) : ''}
    }

    &:focus,
    &.focus {
      color: ${colorHover} !important;
      background-color: ${backgroundHover} !important;
      border-color: ${borderFocus} !important;
      ${boxShadowHover ? boxShadow(`${boxShadowHover} !important`) : ''}
    }

    &:active,
    &.active,
    .open > &.dropdown-toggle {
      color: ${colorActive} !important;
      background: ${backgroundActive} !important;
      border-color: ${borderActive} !important;
      ${boxShadowActive ? boxShadow(`${boxShadowActive} !important`) : ''}
    }

    ${_buttons.btnDisabledColorsOn ? `&.disabled,
      &:disabled {
        &,
        &:focus,
        &:active,
        &:hover {
          color: ${_buttons.btnColorDisabled} !important;
          border-color: ${_buttons.btnBorderDisabled} !important;
          ${_buttons.btnBoxShadowDisabled ? boxShadow(`${_buttons.btnBoxShadowDisabled} !important`) : ''}
          ${getBackground()}
        }
      }` : `
      &.disabled,
      &:disabled {
        &:focus,
        &:active,
        &:hover {
          cursor: ${_variables.cursorDisabled};
          color: ${color} !important;
          background: ${background} !important;
          border-color: ${border} !important;
          ${boxShadow ? (0, _shadows.boxShadow)(`${boxShadow} !important`) : ''}
        }
      }
      `}
  `;
}

function buttonSize(padding, fontSize, lineHeight, radius) {
  let borderWidth = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
  return `
    padding: ${padding};
    font-size: ${fontSize};
    line-height: ${lineHeight};
    ${(0, _borderRadius.borderRadius)(radius)}
    border-width: ${borderWidth}
  `;
}