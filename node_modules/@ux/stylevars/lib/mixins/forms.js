"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.customCheckbox = customCheckbox;
exports.formControlFocus = formControlFocus;
exports.formControlValidationCustom = formControlValidationCustom;
exports.formValidationState = formValidationState;
exports.inputIconPosition = inputIconPosition;

var _polished = require("polished");

var vars = _interopRequireWildcard(require("../variables/_variables"));

var _shadows = require("./shadows");

var _palette = _interopRequireDefault(require("../functions/palette"));

var _uxicons = require("./uxicons");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/* eslint-disable no-useless-escape, max-params */
function formControlFocus() {
  return `
    &:focus {
      color: ${vars.inputFocusColor};
      background-color: ${vars.inputFocusBg};
      border: ${vars.inputFocusBorderWidth} solid ${vars.inputFocusBorderColor};
      outline: none;
      ${(0, _shadows.boxShadow)(vars.inputFocusBoxShadow)}
    }
  `;
}

function formValidationState(state, color) {
  return `
    .${state}-feedback {
      display: none;
      margin-top: .25rem;
      font-size: .875rem;
      color: ${color};
    }

    .${state}-tooltip {
      position: absolute;
      top: 100%;
      z-index: 5;
      display: none;
      width: 250px;
      padding: .5rem;
      margin-top: .1rem;
      font-size: .875rem;
      line-height: 1;
      color: #fff;
      background-color: ${(0, _polished.rgba)(color, 0.8)};
      border-radius: .2rem;
    }
  
    .form-control,
    .custom-select {
      .was-validated &:${state},
      &.is-${state} {
        border-color: ${color};
  
        &:focus {
          box-shadow: 0 0 0 .2rem ${(0, _polished.rgba)(color, 0.25)};
        }
  
        ~ .${state}-feedback,
        ~ .${state}-tooltip {
          display: block;
        }
      }
    }
  
    .form-check-input {
      .was-validated &:${state},
      &.is-${state} {
        + .form-check-label {
          color: ${color};
        }
      }
    }
  
    .custom-control-input {
      .was-validated &:${state},
      &.is-${state} {
        ~ .custom-control-indicator {
          background-color: ${(0, _polished.rgba)(color, 0.25)};
        }
        ~ .custom-control-description {
          color: ${color};
        }
      }
    }
  
    .custom-file-input {
      .was-validated &:${state},
      &.is-${state} {
        ~ .custom-file-control {
          border-color: ${color};
  
          &::before { border-color: inherit; }
        }
        &:focus {
          box-shadow: 0 0 0 .2rem ${(0, _polished.rgba)(color, 0.25)};
        }
      }
    }
  `;
}

function formControlValidationCustom(color, bg, bxShadow, boxShadowFocus) {
  let textColor = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : (0, _palette.default)('gray', 'dark');
  return `
  .form-text,
  .form-control-label,
  &.form-check,
  &.form-check-inline,
  .custom-control {
    color: ${color};
  }
  .form-control {
    color: ${textColor};
    border-color: ${color};
    background-color: ${bg};
    ${bxShadow ? (0, _shadows.boxShadow)(bxShadow) : ''}

    &:focus {
      border-color: ${color};
      ${boxShadowFocus ? (0, _shadows.boxShadow)(boxShadowFocus) : ''}
    }
  }
  .input-group-addon {
    color: ${color};
    border-color: ${color};
    background-color: ${bg};
  }
  `;
}

function inputIconPosition() {
  let float = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'left';
  return `
    .form-control {
      padding-${float}: ${(0, _polished.math)(`(${vars.inputIconSpacing} + ${vars.inputBtnPaddingX}) * 1.15`)};
    }
    .form-control.form-control-sm {
      padding-${float}: ${(0, _polished.math)(`(${vars.inputIconSpacingSm} + ${vars.inputBtnPaddingXSm}) * 1.15`)};
    }
    .form-control.form-control-lg {
      padding-${float}: ${(0, _polished.math)(`(${vars.inputIconSpacingLg} + ${vars.inputBtnPaddingXLg}) * 1.15`)};
    }
    .uxicon  {
      ${float}: ${vars.inputBtnPaddingX};
    }
    .form-control-sm + .uxicon  {
      ${float}: ${vars.inputBtnPaddingXSm};
    }
    .form-control-lg + .uxicon  {
      ${float}: ${vars.inputBtnPaddingXLg};
    }
  `;
}

function customCheckbox() {
  let topPadding = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '2px';
  return `
    &:before {
      content: '\e207';
      ${(0, _uxicons.rtlIcon)()};
      font-family: ${vars.iconFontName};
      font-size: ${vars.customCheckboxIconSize};
      color: ${vars.customControlIndicatorCheckedColor};
      line-height: .8;
      padding-top: ${topPadding};
    }
  `;
}