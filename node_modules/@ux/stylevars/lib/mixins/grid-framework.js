"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = makeGridColumns;

var _polished = require("polished");

var _variables = require("../variables/_variables");

var _breakpoints = require("./breakpoints");

var _grid = require("./grid");

function makeGridColumns() {
  let columns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _variables.gridColumns;
  let gutter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _variables.gridGutterWidth;
  let breakpoints = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _variables.gridBreakpoints;
  const colIds = Array.from({
    length: parseInt(columns, 10)
  }, (_, i) => i + 1);
  const modifiers = ['pull', 'push'];
  const cols = [];
  const mediaArry = [];

  function createContent(breakpoint) {
    const gridArry = [];

    if (_variables.enableFlex) {
      gridArry.push(`
      .col-${breakpoint} {
        position: relative;
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
        min-height: 1px;
        padding-right: ${(0, _polished.math)(`${_variables.gridGutterWidth} / 2`)};
        padding-left:  ${(0, _polished.math)(`${_variables.gridGutterWidth} / 2`)};
      }`);
    } // specific for 1-12


    colIds.forEach(colId => {
      gridArry.push(`
      .col-${breakpoint}-${colId} {
        ${(0, _grid.makeCol)(colId, columns)}
      }`);
    });
    modifiers.forEach(modifier => {
      // push and pull for 0-12
      [0, ...colIds].forEach(colId => {
        gridArry.push(`.${modifier}-${breakpoint}-${colId} {
          ${(0, _grid.makeColModifier)(modifier, colId, columns)}
        }`);
      });
    }); // offset for 0-11

    colIds.map(n => n - 1).forEach(colId => {
      gridArry.push(`.offset-${breakpoint}-${colId} {
        ${(0, _grid.makeColModifier)('offset', colId, columns)}
      }`);
    });
    return gridArry.join('\n');
  }

  Object.keys(breakpoints).forEach(breakpoint => {
    // shared for 1-12
    colIds.forEach(colId => {
      cols.push(`.col-${breakpoint}-${colId}`);
    });
    mediaArry.push((0, _breakpoints.mediaBreakpointUp)(breakpoint, createContent(breakpoint)));
  });
  return `
    ${cols.join(', ')} {
      position: relative;
      min-height: 1px;
      padding-right: ${(0, _polished.math)(`${gutter} / 2`)};
      padding-left: ${(0, _polished.math)(`${gutter} / 2`)};
      ${_variables.enableFlex ? `width: 100%;` : ''}
    }
    ${mediaArry.join('\n')}
  `;
}