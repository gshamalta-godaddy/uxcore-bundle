"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fixedCol = fixedCol;
exports.fixedColOffset = fixedColOffset;
exports.makeCol = makeCol;
exports.makeColModifier = makeColModifier;
exports.makeColOffset = makeColOffset;
exports.makeColPull = makeColPull;
exports.makeColPush = makeColPush;
exports.makeColReady = makeColReady;
exports.makeContainer = makeContainer;
exports.makeContainerMaxWidths = makeContainerMaxWidths;
exports.makeRow = makeRow;

var _polished = require("polished");

var vars = _interopRequireWildcard(require("../variables/_variables"));

var _clearfix = _interopRequireDefault(require("./clearfix"));

var _breakpoints = require("./breakpoints");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const percent = (size, columns) => size / columns * 100;

function fixedColOffset(size, value) {
  const {
    fixedColSm,
    fixedColMd,
    fixedColLg,
    fixedColXl,
    gridGutterWidth
  } = vars;
  const sizeMap = {
    sm: fixedColSm,
    md: fixedColMd,
    lg: fixedColLg,
    xl: fixedColXl
  };
  const colSize = sizeMap[size];
  return (0, _polished.math)(`(${colSize} + ${gridGutterWidth}) * ${value}`);
}

function fixedCol(size, value) {
  return (0, _polished.math)(`${fixedColOffset(size, value)} - ${vars.gridGutterWidth}`);
}

function makeContainer() {
  let gutter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : vars.gridGutterWidth;
  return `
    margin-left: auto;
    margin-right: auto;
    padding-left:  ${(0, _polished.math)(`${gutter} / 2`)};
    padding-right: ${(0, _polished.math)(`${gutter} / 2`)};
    ${!vars.enableFlex ? (0, _clearfix.default)() : ''}
  `;
}

function makeContainerMaxWidths() {
  let maxWidths = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : vars.containerMaxWidths;
  let breakpoints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : vars.gridBreakpoints;
  const includes = [];
  Object.keys(breakpoints).forEach((breakpoint, idx) => {
    if (idx !== 0) {
      includes.push((0, _breakpoints.mediaBreakpointUp)(breakpoint, `max-width: ${maxWidths[breakpoint]}`));
    }
  });
  return includes.join('\n');
}

function makeRow() {
  let gutter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : vars.gridGutterWidth;
  return `
    ${vars.enableFlex ? `
      display: flex;
      flex-wrap: wrap;
    ` : (0, _clearfix.default)()}
    margin-left: ${(0, _polished.math)(`${gutter} / -2`)};
    margin-right: ${(0, _polished.math)(`${gutter} / -2`)};
  `;
}

function makeColReady() {
  let gutter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : vars.gridGutterWidth;
  return `
    position: relative;
    min-height: 1px;
    padding-right: ${(0, _polished.math)(`${gutter} / 2`)};
    padding-left: ${(0, _polished.math)(`${gutter} / 2`)}; 
    ${vars.enableFlex ? `width: 100%` : ''}
  `;
}

function makeCol(size) {
  let columns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : vars.gridColumns;

  if (vars.enableFlex) {
    return `
      flex: 0 0 ${percent(size, parseInt(columns, 10)).toFixed(5)}%;
      max-width: ${percent(size, parseInt(columns, 10)).toFixed(5)}%;
    `;
  }

  return `
    float: left;
    width: ${percent(size, parseInt(columns, 10)).toFixed(5)}%;
  `;
}

function makeColOffset(size) {
  let columns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : vars.gridColumns;
  return `margin-left: ${percent(size, parseInt(columns, 10)).toFixed(5)}%`;
}

function makeColPush(size) {
  let columns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : vars.gridColumns;
  return `left: ${size > 0 ? `${percent(size, parseInt(columns, 10)).toFixed(5)}%` : 'auto'};`;
}

function makeColPull(size) {
  let columns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : vars.gridColumns;
  return `right: ${size > 0 ? `${percent(size, parseInt(columns, 10)).toFixed(5)}%` : 'auto'};`;
}

function makeColModifier(type, size, columns) {
  if (type === 'push') {
    return makeColPush(size, columns);
  } else if (type === 'pull') {
    return makeColPull(size, columns);
  } else if (type === 'offset') {
    return makeColOffset(size, columns);
  }
}