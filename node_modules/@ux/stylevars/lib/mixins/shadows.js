"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.boxShadow = boxShadow;
exports.mrShadow = mrShadow;
exports.shadow1 = shadow1;
exports.shadow2 = shadow2;
exports.shadow3 = shadow3;
exports.shadow4 = shadow4;
exports.shadowX = shadowX;

var _polished = require("polished");

var vars = _interopRequireWildcard(require("../variables/_variables"));

var _palette = _interopRequireDefault(require("../functions/palette"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/* eslint-disable max-params */
function boxShadow(shadow) {
  if (vars.enableShadows) {
    return `box-shadow: ${shadow}`;
  }

  return '';
}

function mrShadow() {
  let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '4px';
  let opacity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.1;
  let dir = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'default';
  let color = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : (0, _palette.default)('black', 'dark');
  let sizeH = size;

  if (dir === 'down') {
    sizeH = '0';
  }

  return boxShadow(`${sizeH} ${size} 0 0 ${(0, _polished.rgba)(color, opacity)}`);
}

function shadowX(size, opacity, blur, spread) {
  let color = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : (0, _palette.default)('gray');
  const sizeH = '0';
  return boxShadow(`${sizeH} ${size} ${blur} ${spread} ${(0, _polished.rgba)(color, opacity)}`);
}

function shadow1() {
  const {
    shadow1Size,
    shadow1Opacity,
    shadow1Blur,
    shadow1Spread
  } = vars;
  return shadowX(shadow1Size, shadow1Opacity, shadow1Blur, shadow1Spread);
}

function shadow2() {
  const {
    shadow2Size,
    shadow2Opacity,
    shadow2Blur,
    shadow2Spread
  } = vars;
  return shadowX(shadow2Size, shadow2Opacity, shadow2Blur, shadow2Spread);
}

function shadow3() {
  const {
    shadow3Size,
    shadow3Opacity,
    shadow3Blur,
    shadow3Spread
  } = vars;
  return shadowX(shadow3Size, shadow3Opacity, shadow3Blur, shadow3Spread);
}

function shadow4() {
  const {
    shadow4Size,
    shadow4Opacity,
    shadow4Blur,
    shadow4Spread
  } = vars;
  return shadowX(shadow4Size, shadow4Opacity, shadow4Blur, shadow4Spread);
}