"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cardBorderRadiusInner = exports.cardBorderRadius = exports.cardBorderColor = exports.cardBorder = exports.cardBlockY = exports.cardBlockX = exports.cardBg = exports.btnTransition = exports.btnLinkDisabledColor = exports.btnGutter = exports.btnFontWeight = exports.btnFocusBoxShadow = exports.btnBoxShadow = exports.btnBorderRadiusSm = exports.btnBorderRadiusLg = exports.btnBorderRadius = exports.btnBlockSpacingY = exports.btnActiveBoxShadow = exports.breadcrumbPaddingY = exports.breadcrumbPaddingX = exports.breadcrumbMarginBottom = exports.breadcrumbItemPadding = exports.breadcrumbIconMargin = exports.breadcrumbDividerColor = exports.breadcrumbDivider = exports.breadcrumbBorderRadius = exports.breadcrumbBg = exports.breadcrumbActiveColor = exports.brandWarning = exports.brandSuccess = exports.brandSecondaryO = exports.brandSecondary = exports.brandPurchase = exports.brandPrimaryO = exports.brandPrimary = exports.brandInverse = exports.brandInfo = exports.brandGray = exports.brandFontFaces = exports.brandFeature = exports.brandDanger = exports.brandBlack = exports.borderWidth = exports.borderRadiusSm = exports.borderRadiusLg = exports.borderRadius = exports.borderColor = exports.bodyColor = exports.bodyBg = exports.blockquoteSmallColor = exports.blockquoteFontSize = exports.blockquoteBorderWidth = exports.blockquoteBorderColor = exports.black = exports.alertWarningToggleIcon = exports.alertWarningToggle = exports.alertWarningText = exports.alertWarningBorder = exports.alertWarningBg = exports.alertSuccessToggleIcon = exports.alertSuccessToggle = exports.alertSuccessText = exports.alertSuccessBorder = exports.alertSuccessBg = exports.alertPaddingY = exports.alertPaddingX = exports.alertPadding = exports.alertOfferToggleIcon = exports.alertOfferToggle = exports.alertOfferText = exports.alertOfferBorder = exports.alertOfferBg = exports.alertNoteToggleIcon = exports.alertNoteToggle = exports.alertNoteText = exports.alertNoteBorder = exports.alertNoteBg = exports.alertMarginBottom = exports.alertLinkFontWeight = exports.alertInfoToggleIcon = exports.alertInfoToggle = exports.alertInfoText = exports.alertInfoBorder = exports.alertInfoBg = exports.alertIconSize = exports.alertIconPadding = exports.alertDangerToggleIcon = exports.alertDangerToggle = exports.alertDangerText = exports.alertDangerBorder = exports.alertDangerBg = exports.alertC3ToggleIcon = exports.alertC3Toggle = exports.alertC3Text = exports.alertC3Border = exports.alertC3Bg = exports.alertBorderWidth = exports.alertBorderRadius = exports.alertActionPadding = exports._var = void 0;
exports.customSelectPaddingY = exports.customSelectPaddingX = exports.customSelectLineHeight = exports.customSelectIndicatorPadding = exports.customSelectIndicatorColor = exports.customSelectIndicator = exports.customSelectHeightSm = exports.customSelectHeight = exports.customSelectFontSizeSm = exports.customSelectFocusBoxShadow = exports.customSelectFocusBorderColor = exports.customSelectDisabledColor = exports.customSelectDisabledBg = exports.customSelectColor = exports.customSelectBorderWidth = exports.customSelectBorderRadius = exports.customSelectBorderColor = exports.customSelectBgSize = exports.customSelectBg = exports.customRadioIndicatorIconChecked = exports.customRadioIndicatorBorderRadius = exports.customFileWidth = exports.customFileText = exports.customFilePaddingY = exports.customFilePaddingX = exports.customFileLineHeight = exports.customFileHeight = exports.customFileFocusBoxShadow = exports.customFileColor = exports.customFileButtonColor = exports.customFileButtonBg = exports.customFileBoxShadow = exports.customFileBorderWidth = exports.customFileBorderRadius = exports.customFileBorderColor = exports.customFileBg = exports.customControlSpacerY = exports.customControlSpacerX = exports.customControlIndicatorSize = exports.customControlIndicatorFocusBoxShadow = exports.customControlIndicatorDisabledBg = exports.customControlIndicatorCheckedColor = exports.customControlIndicatorCheckedBoxShadow = exports.customControlIndicatorCheckedBg = exports.customControlIndicatorBoxShadow = exports.customControlIndicatorBorder = exports.customControlIndicatorBgSize = exports.customControlIndicatorBg = exports.customControlIndicatorActiveColor = exports.customControlIndicatorActiveBoxShadow = exports.customControlIndicatorActiveBg = exports.customControlGutter = exports.customControlFocusIndicatorBoxShadow = exports.customControlFocusIndicatorBorder = exports.customControlDisabledDescriptionOpacity = exports.customControlDescriptionFontWeight = exports.customControlDescriptionDisabledColor = exports.customControlCheckedRadioInsetShadow = exports.customControlCheckedRadioIndicatorBorder = exports.customControlCheckedRadioIndicatorBg = exports.customControlCheckedIndicatorBorder = exports.customCheckboxIndicatorIndeterminateColor = exports.customCheckboxIndicatorIndeterminateBoxShadow = exports.customCheckboxIndicatorIndeterminateBg = exports.customCheckboxIndicatorIconIndeterminate = exports.customCheckboxIndicatorIconChecked = exports.customCheckboxIndicatorBorderRadius = exports.customCheckboxIndeterminateBorder = exports.customCheckboxIndeterminateBg = exports.customCheckboxIconSize = exports.cursorDisabled = exports.containerMaxWidths = exports.componentActiveColor = exports.componentActiveBg = exports.codePaddingY = exports.codePaddingX = exports.codeFontSize = exports.codeColor = exports.codeBg = exports.closeTextShadow = exports.closeFontWeight = exports.closeFontSize = exports.closeColor = exports.cdnPathMap = exports.cdnPath = exports.cardTitleTransform = exports.cardTitleFontSize = exports.cardTitleAlign = exports.cardSpacerY = exports.cardSpacerX = exports.cardShadowSize = exports.cardInnerBorderRadius = exports.cardImgOverlayPadding = exports.cardGroupMargin = exports.cardDeckMargin = exports.cardColumnsMargin = exports.cardColumnsGap = exports.cardColumnsCount = exports.cardCapBg = exports.cardBorderWidth = void 0;
exports.gray600 = exports.gray500 = exports.gray400 = exports.gray300 = exports.gray200 = exports.gray100 = exports.gray = exports.formTextMarginTop = exports.formIconWarning = exports.formIconSuccess = exports.formIconDanger = exports.formGroupMarginBottom = exports.formGroupLabelTransform = exports.formGroupIconSize = exports.formFeedbackValidColor = exports.formFeedbackInvalidColor = exports.formClearIconSizeSm = exports.formClearIconSize = exports.formClearIconColor = exports.formCheckMarginBottom = exports.formCheckInputMarginY = exports.formCheckInputMarginX = exports.formCheckInputGutter = exports.formCheckInlineMarginX = exports.footerHeight = exports.fontWeightSemiBold = exports.fontWeightNormal = exports.fontWeightBold = exports.fontWeightBase = exports.fontSizeSm = exports.fontSizeRoot = exports.fontSizeMd = exports.fontSizeLg = exports.fontSizeBase = exports.fontFamilySansSerif = exports.fontFamilyMonospace = exports.fontFamilyBase = exports.focusVisibleOutline = exports.fixedColXl = exports.fixedColSm = exports.fixedColMd = exports.fixedColLg = exports.figureCaptionFontSize = exports.figureCaptionColor = exports.enableUtilityHeaderPlOverride = exports.enableTransitions = exports.enableShadows = exports.enableRoundedContainers = exports.enableRounded = exports.enablePrintStyles = exports.enableHoverMediaQuery = exports.enableGridClasses = exports.enableGradients = exports.enableFlex = exports.dtFontWeight = exports.dropdownTripleDotIconSize = exports.dropdownToggleSplitWidth = exports.dropdownSpacer = exports.dropdownPaddingY = exports.dropdownMinWidth = exports.dropdownMenuIconSize = exports.dropdownMarginTop = exports.dropdownLinkHoverColor = exports.dropdownLinkHoverBg = exports.dropdownLinkDisabledColor = exports.dropdownLinkColor = exports.dropdownLinkActiveColor = exports.dropdownLinkActiveBg = exports.dropdownItemPaddingY = exports.dropdownItemPaddingX = exports.dropdownHeaderHeight = exports.dropdownHeaderColor = exports.dropdownDividerBg = exports.dropdownBoxShadow = exports.dropdownBorderWidth = exports.dropdownBorderRadius = exports.dropdownBorderColor = exports.dropdownBg = exports.dropArrowSizeLg = exports.dropArrowSize = exports.displayLineHeight = exports.display4Weight = exports.display4SizeXxl = exports.display4SizeLg = exports.display4Size = exports.display3Weight = exports.display3SizeXxl = exports.display3SizeLg = exports.display3Size = exports.display2Weight = exports.display2SizeXxl = exports.display2SizeLg = exports.display2Size = exports.display1Weight = exports.display1SizeXxl = exports.display1SizeLg = exports.display1Size = exports.disabledOpacity = exports.customSelectSmPaddingY = exports.customSelectSmFontSize = void 0;
exports.inputTransition = exports.inputSuccessColor = exports.inputSuccessBg = exports.inputPlaceholderColor = exports.inputIconSpacingSm = exports.inputIconSpacingLg = exports.inputIconSpacing = exports.inputIconClearSizeSm = exports.inputIconClearSize = exports.inputHeightSm = exports.inputHeightMerchSm = exports.inputHeightMerchLg = exports.inputHeightMerchInnerSm = exports.inputHeightMerchInnerLg = exports.inputHeightMerchInner = exports.inputHeightMerch = exports.inputHeightLg = exports.inputHeightInnerSm = exports.inputHeightInnerLg = exports.inputHeightInner = exports.inputHeightBorder = exports.inputHeight = exports.inputGroupAddonColor = exports.inputGroupAddonBorderColor = exports.inputGroupAddonBg = exports.inputFocusColor = exports.inputFocusBoxShadowWarning = exports.inputFocusBoxShadowError = exports.inputFocusBoxShadow = exports.inputFocusBorderWidth = exports.inputFocusBorderColor = exports.inputFocusBg = exports.inputErrorTextColor = exports.inputErrorColor = exports.inputErrorBg = exports.inputDisabledToggleColor = exports.inputDisabledColor = exports.inputDisabledBorderColor = exports.inputDisabledBg = exports.inputColorHover = exports.inputColor = exports.inputBtnPaddingYSm = exports.inputBtnPaddingYLg = exports.inputBtnPaddingY = exports.inputBtnPaddingXSm = exports.inputBtnPaddingXLg = exports.inputBtnPaddingX = exports.inputBtnLineHeightSm = exports.inputBtnLineHeightLg = exports.inputBtnLineHeight = exports.inputBtnBorderWidth = exports.inputBoxShadowWarning = exports.inputBoxShadowSuccess = exports.inputBoxShadowSize = exports.inputBoxShadowError = exports.inputBoxShadow = exports.inputBorderRadiusSm = exports.inputBorderRadiusLg = exports.inputBorderRadius = exports.inputBorderDropdownOpen = exports.inputBorderColor = exports.inputBg = exports.iconFontPath = exports.iconFontName2 = exports.iconFontName = exports.hrBorderWidth = exports.hrBorderDark = exports.hrBorderColor = exports.headingsMarginBottomMd = exports.headingsMarginBottom = exports.headingsFontWeight = exports.headingsFontFamily = exports.headingsColor = exports.h6FontSizeLg = exports.h6FontSize = exports.h5FontSizeLg = exports.h5FontSize = exports.h4FontSizeLg = exports.h4FontSize = exports.h3FontSizeLg = exports.h3FontSize = exports.h2FontWeight = exports.h2FontSizeLg = exports.h2FontSize = exports.h1FontSizeLg = exports.h1FontSize = exports.h0FontSizeLg = exports.h0FontSize = exports.growlCloseIconSize = exports.gridGutterWidth = exports.gridColumns = exports.gridBreakpoints = exports.grays = exports.grayLightest = exports.grayLighter = exports.grayLight = exports.grayDark = exports.gray900 = exports.gray800 = exports.gray700 = void 0;
exports.navLinkDisabledBg = exports.navLinkColor = exports.navItemMargin = exports.navItemInlineSpacer = exports.msNeg4 = exports.msNeg3 = exports.msNeg2 = exports.msNeg1 = exports.ms9 = exports.ms8 = exports.ms7 = exports.ms6 = exports.ms5 = exports.ms4 = exports.ms3 = exports.ms2 = exports.ms16 = exports.ms15 = exports.ms14 = exports.ms13 = exports.ms12 = exports.ms11 = exports.ms10 = exports.ms1 = exports.ms0 = exports.mpSpacerHalf = exports.mpSpacer5 = exports.mpSpacer4 = exports.mpSpacer3 = exports.mpSpacer2 = exports.mpSpacer = exports.modularScales = exports.modalTransition = exports.modalTitlePaddingD = exports.modalTitlePadding = exports.modalSm = exports.modalNavPaddingD = exports.modalNavPadding = exports.modalLg = exports.modalInnerPaddingD = exports.modalInnerPadding = exports.modalFooterPaddingD = exports.modalFooterPadding = exports.modalFixedZ = exports.modalContentBorderColor = exports.modalContentBg = exports.modalBodyPaddingD = exports.modalBodyPadding = exports.modalBackdropOpacity = exports.modalBackdropBg = exports.mediaHeadingMarginBottom = exports.mediaAlignmentPaddingX = exports.markPaddingY = exports.markPaddingX = exports.markPadding = exports.markBg = exports.listInlinePadding = exports.listGroupItemPaddingY = exports.listGroupItemPaddingX = exports.listGroupHoverBg = exports.listGroupDisabledColor = exports.listGroupDisabledBg = exports.listGroupBorderWidth = exports.listGroupBorderRadius = exports.listGroupBorderColor = exports.listGroupBorder = exports.listGroupBg = exports.listGroupActiveTextColor = exports.listGroupActiveColor = exports.listGroupActiveBorderColor = exports.listGroupActiveBg = exports.listGroupActionHoverColor = exports.listGroupActionColor = exports.listGroupActionActiveColor = exports.listGroupActionActiveBg = exports.linkHoverDecorationNone = exports.linkHoverDecoration = exports.linkHoverColor = exports.linkFocusOutlineSize = exports.linkFocusOutlineColor = exports.linkFocusDecoration = exports.linkDecoration = exports.linkColor = exports.linkBorderWidth = exports.lineHeightXs = exports.lineHeightSm = exports.lineHeightLg = exports.lineHeightBase = exports.lineHeight = exports.leadFontWeight = exports.leadFontSizeMd = exports.leadFontSize = exports.labelMarginBottom = exports.kbdColor = exports.kbdBoxShadow = exports.kbdBg = exports.inputfocusboxshadowsuccess = exports.inputWarningTextColor = exports.inputWarningColor = exports.inputWarningBg = void 0;
exports.progressFontSize = exports.progressCircleXsSize = exports.progressCircleSmSize = exports.progressCircleMdSize = exports.progressCircleLgSize = exports.progressBoxShadow = exports.progressBorderRadius = exports.progressBg = exports.progressBarXsHeight = exports.progressBarXsBorderRadius = exports.progressBarTransition = exports.progressBarStripeSize = exports.progressBarStripeColor = exports.progressBarStripeAngle = exports.progressBarSmHeight = exports.progressBarSmBorderRadius = exports.progressBarHeight = exports.progressBarColor = exports.progressBarBorderRadius = exports.progressBarBg = exports.progressBarAnimationTiming = exports.preScrollableMaxHeight = exports.preColor = exports.preBg = exports.pivotY = exports.pivotX = exports.pivotGraphicLeft = exports.pivotGraphic = exports.pivotChevron = exports.paragraphMarginBottom = exports.paginationPaddingYSm = exports.paginationPaddingYLg = exports.paginationPaddingY = exports.paginationPaddingXSm = exports.paginationPaddingXLg = exports.paginationPaddingX = exports.paginationLineHeight = exports.paginationIconSizeSm = exports.paginationIconSizeLg = exports.paginationIconSize = exports.paginationHoverColor = exports.paginationHoverBorderColor = exports.paginationHoverBg = exports.paginationDisabledColor = exports.paginationDisabledBorderColor = exports.paginationDisabledBorder = exports.paginationDisabledBg = exports.paginationColor = exports.paginationBorderWidth = exports.paginationBorderColor = exports.paginationBg = exports.paginationActiveColor = exports.paginationActiveBorderColor = exports.paginationActiveBg = exports.nestedKbdFontWeight = exports.navbarTogglerPaddingY = exports.navbarTogglerPaddingX = exports.navbarTogglerFontSize = exports.navbarTogglerBorderRadius = exports.navbarPaddingY = exports.navbarPaddingX = exports.navbarLightTogglerIconBg = exports.navbarLightTogglerBorderColor = exports.navbarLightHoverColor = exports.navbarLightDisabledColor = exports.navbarLightColor = exports.navbarLightActiveColor = exports.navbarDarkTogglerIconBg = exports.navbarDarkTogglerBorderColor = exports.navbarDarkHoverColor = exports.navbarDarkDisabledColor = exports.navbarDarkColor = exports.navbarDarkActiveColor = exports.navbarBrandPaddingY = exports.navbarBrandHeight = exports.navbarBrandFontSize = exports.navTextTransform = exports.navTextColor = exports.navTabsLinkHoverBorderColor = exports.navTabsLinkDisabledColor = exports.navTabsLinkDisabledBorderColor = exports.navTabsLinkDisabledBg = exports.navTabsLinkActiveColor = exports.navTabsLinkActiveBorderColor = exports.navTabsLinkActiveBg = exports.navTabsHeight = exports.navTabsBorderWidth = exports.navTabsBorderRadius = exports.navTabsBorderColor = exports.navPillsLinkActiveColor = exports.navPillsLinkActiveBg = exports.navPillsBorderRadius = exports.navLinkPaddingY = exports.navLinkPaddingX = exports.navLinkPaddingSm = exports.navLinkPadding = exports.navLinkHoverColor = exports.navLinkHoverBg = exports.navLinkHeight = exports.navLinkDisabledColor = void 0;
exports.tooltipArrowOuterColor = exports.tooltipArrowOffset = exports.tooltipArrowHeight = exports.tooltipArrowColor = exports.toggleTransition = exports.toggleHandleSize = exports.toggleHandleColorUnchecked = exports.toggleHandleColorChecked = exports.toggleBtnColor = exports.toggleBtnBorderColorActive = exports.toggleBtnBorderColor = exports.toggleBtnBgColorActive = exports.toggleBtnBgColor = exports.toggleBorderRadius = exports.toggleBorderColorUnchecked = exports.toggleBorderColorChecked = exports.toggleBgTransition = exports.toggleBgColorUnchecked = exports.toggleBgColorChecked = exports.thumbnailTransition = exports.thumbnailPadding = exports.thumbnailBoxShadow = exports.thumbnailBorderWidth = exports.thumbnailBorderRadius = exports.thumbnailBorderColor = exports.thumbnailBg = exports.themeColors = exports.themeColorInterval = exports.textMuted = exports.tableStripedHoverBg = exports.tableStackingLabel = exports.tableIcon = exports.tableHoverBg = exports.tableHeadColor = exports.tableHeadBg = exports.tableDarkHoverBg = exports.tableDarkColor = exports.tableDarkBorderColor = exports.tableDarkBg = exports.tableDarkAccentBg = exports.tableCellPaddingSm = exports.tableCellPaddingLg = exports.tableCellPadding = exports.tableCaptionColor = exports.tableBorderWidth = exports.tableBorderColor = exports.tableBg = exports.tableActiveBg = exports.tableAccentBg = exports.stateWarningText = exports.stateWarningBorder = exports.stateWarningBg = exports.stateSuccessText = exports.stateSuccessBorder = exports.stateSuccessBg = exports.stateInfoText = exports.stateInfoBorder = exports.stateInfoBg = exports.stateDangerText = exports.stateDangerBorder = exports.stateDangerBg = exports.starsIconSize = exports.starsColorUnchecked = exports.starsColorChecked = exports.spacers = exports.spacer = exports.smallFontSize = exports.sliderThumbColor = exports.sliderThumbBorderColor = exports.sliderRightIconSize = exports.sliderLeftIconSize = exports.sliderLabelColor = exports.sizes = exports.shadow4Spread = exports.shadow4Size = exports.shadow4Opacity = exports.shadow4Blur = exports.shadow3Spread = exports.shadow3Size = exports.shadow3Opacity = exports.shadow3Blur = exports.shadow2Spread = exports.shadow2Size = exports.shadow2Opacity = exports.shadow2Blur = exports.shadow1Spread = exports.shadow1Size = exports.shadow1Opacity = exports.shadow1Blur = exports.searchBtnIconSizeSm = exports.searchBtnIconSize = exports.remSpacerHalf = exports.remSpacer5 = exports.remSpacer4 = exports.remSpacer3 = exports.remSpacer2 = exports.remSpacer = exports.remBase = exports.progressY = exports.progressHeight = void 0;
exports.zindexTooltip = exports.zindexSticky = exports.zindexPopover = exports.zindexNavbarSticky = exports.zindexNavbarFixed = exports.zindexNavbar = exports.zindexModalBg = exports.zindexModalBackdrop = exports.zindexModal = exports.zindexInappHelp = exports.zindexFixed = exports.zindexDropdownBackdrop = exports.zindexDropdown = exports.wizNumSize = exports.wizLineSize = exports.wizCircleSize = exports.white = exports.uxSpinnerSmStrokeWidth = exports.uxSpinnerSmSize = exports.uxSpinnerMdStrokeWidth = exports.uxSpinnerMdSize = exports.uxSpinnerLgStrokeWidth = exports.uxSpinnerLgSize = exports.uxSpinnerDuration = exports.uxAppBg = exports.uxAccordionBasePadding = exports.uxAccordionBaseMargin = exports.typeLeading = exports.trasitionFade = exports.transitionLinkSpeed = exports.transitionCollapse = exports.transitionBase = exports.tooltipPadding = exports.tooltipOpacity = exports.tooltipMaxWidth = exports.tooltipMargin = exports.tooltipInverseColor = exports.tooltipInverseBorder = exports.tooltipInverseBg = exports.tooltipInverseArrowOuterColor = exports.tooltipInverseArrowColor = exports.tooltipInnerPadding = exports.tooltipFontSize = exports.tooltipColor = exports.tooltipBorderWidth = exports.tooltipBorderRadius = exports.tooltipBorder = exports.tooltipBg = exports.tooltipArrowWidth = exports.tooltipArrowScaleY = exports.tooltipArrowScaleX = exports.tooltipArrowPosition = exports.tooltipArrowOuterWidth = void 0;

var _polished = require("polished");

var _functions = require("../functions/functions");

var _environment = _interopRequireDefault(require("../functions/environment"));

var _markets = require("../functions/markets");

var _palette = _interopRequireDefault(require("../functions/palette"));

var _overrides = require("./overrides");

/* eslint-disable id-length, max-len */
const _var = (varName, fallback) => varName in _overrides.variables ? _overrides.variables[varName] : fallback;

exports._var = _var;
const cdnPathMap = {
  production: 'https://img6.wsimg.com',
  test: 'https://img6.test-wsimg.com',
  development: 'https://img6.dev-wsimg.com'
};
exports.cdnPathMap = cdnPathMap;

const cdnPath = _var('cdnPath', (0, _environment.default)(cdnPathMap));

exports.cdnPath = cdnPath;

const remBase = _var('remBase', '1rem');

exports.remBase = remBase;

const ms = step => {
  return (0, _polished.modularScale)(step, remBase, 1.125);
};

const modularScales = {
  'ms-4': ms(-4),
  'ms-3': ms(-3),
  'ms-2': ms(-2),
  'ms-1': ms(-1),
  'ms0': ms(0),
  'ms1': ms(1),
  'ms2': ms(2),
  'ms3': ms(3),
  'ms4': ms(4),
  'ms5': ms(5),
  'ms6': ms(6),
  'ms7': ms(7),
  'ms8': ms(8),
  'ms9': ms(9),
  'ms10': ms(10),
  'ms11': ms(11),
  'ms12': ms(12),
  'ms13': ms(13),
  'ms14': ms(14),
  'ms15': ms(15),
  'ms16': ms(16)
};
exports.modularScales = modularScales;

const msNeg4 = _var('msNeg4', ms(-4));

exports.msNeg4 = msNeg4;

const msNeg3 = _var('msNeg3', ms(-3));

exports.msNeg3 = msNeg3;

const msNeg2 = _var('msNeg2', ms(-2));

exports.msNeg2 = msNeg2;

const msNeg1 = _var('msNeg1', ms(-1));

exports.msNeg1 = msNeg1;

const ms0 = _var('ms0', ms(0));

exports.ms0 = ms0;

const ms1 = _var('ms1', ms(1));

exports.ms1 = ms1;

const ms2 = _var('ms2', ms(2));

exports.ms2 = ms2;

const ms3 = _var('ms3', ms(3));

exports.ms3 = ms3;

const ms4 = _var('ms4', ms(4));

exports.ms4 = ms4;

const ms5 = _var('ms5', ms(5));

exports.ms5 = ms5;

const ms6 = _var('ms6', ms(6));

exports.ms6 = ms6;

const ms7 = _var('ms7', ms(7));

exports.ms7 = ms7;

const ms8 = _var('ms8', ms(8));

exports.ms8 = ms8;

const ms9 = _var('ms9', ms(9));

exports.ms9 = ms9;

const ms10 = _var('ms10', ms(10));

exports.ms10 = ms10;

const ms11 = _var('ms11', ms(11));

exports.ms11 = ms11;

const ms12 = _var('ms12', ms(12));

exports.ms12 = ms12;

const ms13 = _var('ms13', ms(13));

exports.ms13 = ms13;

const ms14 = _var('ms14', ms(14));

exports.ms14 = ms14;

const ms15 = _var('ms15', ms(15));

exports.ms15 = ms15;

const ms16 = _var('ms16', ms(16));

exports.ms16 = ms16;

const mpSpacer = _var('mpSpacer', '8px');

exports.mpSpacer = mpSpacer;

const mpSpacerHalf = _var('mpSpacerHalf', `${(0, _polished.math)(`${mpSpacer} / 2`)}`);

exports.mpSpacerHalf = mpSpacerHalf;

const mpSpacer2 = _var('mpSpacer2', `${(0, _polished.math)(`${mpSpacer} * 2`)}`);

exports.mpSpacer2 = mpSpacer2;

const mpSpacer3 = _var('mpSpacer3', `${(0, _polished.math)(`${mpSpacer} * 3`)}`);

exports.mpSpacer3 = mpSpacer3;

const mpSpacer4 = _var('mpSpacer4', `${(0, _polished.math)(`${mpSpacer} * 4`)}`);

exports.mpSpacer4 = mpSpacer4;

const mpSpacer5 = _var('mpSpacer5', `${(0, _polished.math)(`${mpSpacer} * 5`)}`); //
// matches the above spacing units but in rems so we can
// have both px and rems while we transition into rems


exports.mpSpacer5 = mpSpacer5;

const remSpacer = _var('remSpacer', '0.5rem');

exports.remSpacer = remSpacer;

const remSpacerHalf = _var('remSpacerHalf', `${(0, _polished.math)(`${remSpacer} / 2`)}`); // .25rem


exports.remSpacerHalf = remSpacerHalf;

const remSpacer2 = _var('remSpacer2', `${(0, _polished.math)(`${remSpacer} * 2`)}`); // 1rem


exports.remSpacer2 = remSpacer2;

const remSpacer3 = _var('remSpacer3', `${(0, _polished.math)(`${remSpacer} * 3`)}`); // 1.5rem


exports.remSpacer3 = remSpacer3;

const remSpacer4 = _var('remSpacer4', `${(0, _polished.math)(`${remSpacer} * 4`)}`); // 2rem


exports.remSpacer4 = remSpacer4;

const remSpacer5 = _var('remSpacer5', `${(0, _polished.math)(`${remSpacer} * 5`)}`); // 2.5rem


exports.remSpacer5 = remSpacer5;

const bodyBg = _var('bodyBg', `${(0, _palette.default)('white')}`);

exports.bodyBg = bodyBg;

const bodyColor = _var('bodyColor', `${(0, _palette.default)('black')}`);

exports.bodyColor = bodyColor;

const grayDark = _var('grayDark', `${(0, _palette.default)('gray', 'dark')}`);

exports.grayDark = grayDark;

const gray = _var('gray', `${(0, _palette.default)('gray')}`);

exports.gray = gray;

const grayLight = _var('grayLight', `${(0, _palette.default)('gray', 'light')}`);

exports.grayLight = grayLight;

const grayLighter = _var('grayLighter', (0, _palette.default)('gray', 'faint'));

exports.grayLighter = grayLighter;

const grayLightest = _var('grayLightest', `${(0, _palette.default)('gray', 'faint')}`);

exports.grayLightest = grayLightest;

const textMuted = _var('textMuted', `${(0, _palette.default)('gray')}`);

exports.textMuted = textMuted;

const brandInverse = _var('brandInverse', grayDark);

exports.brandInverse = brandInverse;

const white = _var('white', '#fff');

exports.white = white;

const gray100 = _var('gray100', '#f8f9fa');

exports.gray100 = gray100;

const gray200 = _var('gray200', '#e9ecef');

exports.gray200 = gray200;

const gray300 = _var('gray300', '#dee2e6');

exports.gray300 = gray300;

const gray400 = _var('gray400', '#ced4da');

exports.gray400 = gray400;

const gray500 = _var('gray500', '#adb5bd');

exports.gray500 = gray500;

const gray600 = _var('gray600', '#868e96');

exports.gray600 = gray600;

const gray700 = _var('gray700', '#495057');

exports.gray700 = gray700;

const gray800 = _var('gray800', '#343a40');

exports.gray800 = gray800;

const gray900 = _var('gray900', '#212529');

exports.gray900 = gray900;

const black = _var('black', '#000');

exports.black = black;
const grays = {
  100: gray100,
  200: gray200,
  300: gray300,
  400: gray400,
  500: gray500,
  600: gray600,
  700: gray700,
  800: gray800,
  900: gray900
};
exports.grays = grays;

const brandPrimary = _var('brandPrimary', (0, _palette.default)('primary'));

exports.brandPrimary = brandPrimary;

const brandPrimaryO = _var('brandPrimaryO', (0, _palette.default)('primary-o', 'midrange'));

exports.brandPrimaryO = brandPrimaryO;

const brandSecondary = _var('brandSecondary', (0, _palette.default)('secondary'));

exports.brandSecondary = brandSecondary;

const brandSecondaryO = _var('brandSecondaryO', (0, _palette.default)('secondary-o'));

exports.brandSecondaryO = brandSecondaryO;

const brandPurchase = _var('brandPurchase', brandSecondary);

exports.brandPurchase = brandPurchase;

const brandSuccess = _var('brandSuccess', (0, _palette.default)('success'));

exports.brandSuccess = brandSuccess;

const brandInfo = _var('brandInfo', (0, _palette.default)('info'));

exports.brandInfo = brandInfo;

const brandWarning = _var('brandWarning', (0, _palette.default)('warning'));

exports.brandWarning = brandWarning;

const brandDanger = _var('brandDanger', (0, _palette.default)('danger'));

exports.brandDanger = brandDanger;

const brandFeature = _var('brandFeature', (0, _palette.default)('feature'));

exports.brandFeature = brandFeature;

const brandBlack = _var('brandBlack', (0, _palette.default)('black'));

exports.brandBlack = brandBlack;

const brandGray = _var('brandGray', (0, _palette.default)('gray', 'midrange'));

exports.brandGray = brandGray;
const themeColors = {
  'primary': brandPrimary,
  'primary-o': brandPrimaryO,
  'secondary': brandSecondary,
  'secondary-o': brandSecondaryO,
  'purchase': brandPurchase,
  'success': brandSuccess,
  'info': brandInfo,
  'warning': brandWarning,
  'danger': brandDanger,
  'default': bodyColor,
  'feature': brandFeature,
  'muted': textMuted,
  'black': brandBlack,
  'gray': brandGray,
  'white': (0, _palette.default)('white')
};
exports.themeColors = themeColors;

const themeColorInterval = _var('themeColorInterval', 0.08);

exports.themeColorInterval = themeColorInterval;

const enableFlex = _var('enableFlex', false);

exports.enableFlex = enableFlex;

const enableRounded = _var('enableRounded', false);

exports.enableRounded = enableRounded;

const enableRoundedContainers = _var('enableRoundedContainers', true);

exports.enableRoundedContainers = enableRoundedContainers;

const enableShadows = _var('enableShadows', true);

exports.enableShadows = enableShadows;

const enableGradients = _var('enableGradients', false);

exports.enableGradients = enableGradients;

const enableTransitions = _var('enableTransitions', true);

exports.enableTransitions = enableTransitions;

const enableHoverMediaQuery = _var('enableHoverMediaQuery', false);

exports.enableHoverMediaQuery = enableHoverMediaQuery;

const enableGridClasses = _var('enableGridClasses', true);

exports.enableGridClasses = enableGridClasses;

const enablePrintStyles = _var('enablePrintStyles', true);

exports.enablePrintStyles = enablePrintStyles;

const enableUtilityHeaderPlOverride = _var('enableUtilityHeaderPlOverride', false); // Spacing
//
// Control the default styling of most Bootstrap elements by modifying these
// variables. Mostly focused on spacing.
// You can add more entries to the $spacers map, should you need more variation.


exports.enableUtilityHeaderPlOverride = enableUtilityHeaderPlOverride;

const spacer = _var('spacer', '1rem');

exports.spacer = spacer;
const spacers = {
  0: '0',
  1: (0, _polished.math)(`${spacer} * 0.25`),
  2: (0, _polished.math)(`${spacer} * 0.5`),
  3: spacer,
  4: (0, _polished.math)(`${spacer} * 1.5`),
  5: (0, _polished.math)(`${spacer} * 3`)
};
exports.spacers = spacers;
const sizes = {
  25: '25%',
  50: '50%',
  75: '75%',
  100: '100%'
}; // UX App

exports.sizes = sizes;

const uxAppBg = _var('uxAppBg', `${(0, _palette.default)('product', 'faint')}`); // Links
//
// Style anchor elements.


exports.uxAppBg = uxAppBg;

const linkDecoration = _var('linkDecoration', `none`);

exports.linkDecoration = linkDecoration;

const linkColor = _var('linkColor', `${(0, _palette.default)('primary-o', 'midrange')}`);

exports.linkColor = linkColor;

const linkBorderWidth = _var('linkBorderWidth', '1px');

exports.linkBorderWidth = linkBorderWidth;

const linkHoverDecoration = _var('linkHoverDecoration', 'underline');

exports.linkHoverDecoration = linkHoverDecoration;

const linkHoverDecorationNone = _var('linkHoverDecorationNone', 'none');

exports.linkHoverDecorationNone = linkHoverDecorationNone;

const linkFocusDecoration = _var('linkFocusDecoration', linkHoverDecoration);

exports.linkFocusDecoration = linkFocusDecoration;

const linkHoverColor = _var('linkHoverColor', `${(0, _palette.default)('primary-o')}`);

exports.linkHoverColor = linkHoverColor;

const linkFocusOutlineSize = _var('linkFocusOutlineSize', linkBorderWidth);

exports.linkFocusOutlineSize = linkFocusOutlineSize;

const linkFocusOutlineColor = _var('linkFocusOutlineColor', `${(0, _palette.default)('gray', 'midrange')}`); // Grid breakpoints
//
// Define the minimum dimensions at which your layout will change,
// adapting to different screen sizes, for use in media queries.


exports.linkFocusOutlineColor = linkFocusOutlineColor;
const gridBreakpoints = {
  xs: '0',
  sm: '520px',
  md: '768px',
  lg: '992px',
  xl: '1200px',
  xxl: '1720px'
}; // Grid containers
//
// Define the maximum width of `.container` for different screen sizes.

exports.gridBreakpoints = gridBreakpoints;
const containerMaxWidths = {
  sm: '480px',
  md: '720px',
  lg: '940px',
  xl: '1140px',
  xxl: '1640px'
}; // Grid columns
//
// Set the number of columns and specify the width of the gutters.

exports.containerMaxWidths = containerMaxWidths;

const gridColumns = _var('gridColumns', '12');

exports.gridColumns = gridColumns;

const gridGutterWidth = _var('gridGutterWidth', '16px'); // Components
//
// Define common padding and border radius sizes and more.


exports.gridGutterWidth = gridGutterWidth;

const borderWidth = _var('borderWidth', '0.0625rem');

exports.borderWidth = borderWidth;

const borderColor = _var('borderColor', (0, _palette.default)('product'));

exports.borderColor = borderColor;

const borderRadius = _var('borderRadius', '.25rem');

exports.borderRadius = borderRadius;

const borderRadiusLg = _var('borderRadiusLg', `calc(${borderRadius} + .125rem)`);

exports.borderRadiusLg = borderRadiusLg;

const borderRadiusSm = _var('borderRadiusSm', `calc(${borderRadius} - .125rem)`);

exports.borderRadiusSm = borderRadiusSm;

const componentActiveColor = _var('componentActiveColor', `${(0, _palette.default)('primary-o', 'midrange')}`);

exports.componentActiveColor = componentActiveColor;

const componentActiveBg = _var('componentActiveBg', `${(0, _palette.default)('gray', 'faint')}`);

exports.componentActiveBg = componentActiveBg;

const transitionBase = _var('transitionBase', '.3s all ease-in-out');

exports.transitionBase = transitionBase;

const trasitionFade = _var('trasitionFade', 'opacity .15s linear');

exports.trasitionFade = trasitionFade;

const transitionCollapse = _var('transitionCollapse', 'height .35s ease');

exports.transitionCollapse = transitionCollapse;

const transitionLinkSpeed = _var('transitionLinkSpeed', '.1s'); // Fonts
//
// Font, line-height, and color for body text, headings, and more.


exports.transitionLinkSpeed = transitionLinkSpeed;

const fontFamilySansSerif = _var('fontFamilySansSerif', `${(0, _markets.marketFont)('base')}`);

exports.fontFamilySansSerif = fontFamilySansSerif;

const fontFamilyMonospace = _var('fontFamilyMonospace', `"Courier", "Courier New", monospace`);

exports.fontFamilyMonospace = fontFamilyMonospace;

const fontFamilyBase = _var('fontFamilyBase', `${(0, _markets.marketFont)('base')}`); // Pixel value used to responsively scale all typography. Applied to the `<html>` element. ++


exports.fontFamilyBase = fontFamilyBase;

const fontSizeRoot = _var('fontSizeRoot', '16px');

exports.fontSizeRoot = fontSizeRoot;

const fontSizeBase = _var('fontSizeBase', '1rem');

exports.fontSizeBase = fontSizeBase;

const fontSizeLg = _var('fontSizeLg', '1.375rem');

exports.fontSizeLg = fontSizeLg;

const fontSizeMd = _var('fontSizeMd', fontSizeBase);

exports.fontSizeMd = fontSizeMd;

const fontSizeSm = _var('fontSizeSm', '.875rem');

exports.fontSizeSm = fontSizeSm;

const fontWeightNormal = _var('fontWeightNormal', 'var(--uxp-font-weight-normal, 500)');

exports.fontWeightNormal = fontWeightNormal;

const fontWeightSemiBold = _var('fontWeightSemiBold', 'var(--uxp-font-weight-semibold, 600)');

exports.fontWeightSemiBold = fontWeightSemiBold;

const fontWeightBold = _var('fontWeightBold', 'var(--uxp-font-weight-bold, 700)');

exports.fontWeightBold = fontWeightBold;

const fontWeightBase = _var('fontWeightBase', fontWeightNormal);

exports.fontWeightBase = fontWeightBase;

const lineHeight = _var('lineHeight', '1.5rem /*rtl:1.3rem*/');

exports.lineHeight = lineHeight;

const lineHeightBase = _var('lineHeightBase', lineHeight);

exports.lineHeightBase = lineHeightBase;

const lineHeightSm = _var('lineHeightSm', lineHeight);

exports.lineHeightSm = lineHeightSm;

const lineHeightLg = _var('lineHeightLg', '1.75rem');

exports.lineHeightLg = lineHeightLg;

const lineHeightXs = _var('lineHeightXs', '1.25rem'); // Paragraph


exports.lineHeightXs = lineHeightXs;

const paragraphMarginBottom = _var('paragraphMarginBottom', '1.5rem'); // Leading


exports.paragraphMarginBottom = paragraphMarginBottom;

const typeLeading = _var('typeLeading', lineHeight);

exports.typeLeading = typeLeading;

const leadFontWeight = _var('leadFontWeight', `300`);

exports.leadFontWeight = leadFontWeight;

const leadFontSize = _var('leadFontSize', `${modularScales.ms1}`);

exports.leadFontSize = leadFontSize;

const leadFontSizeMd = _var('leadFontSizeMd', leadFontSize);

exports.leadFontSizeMd = leadFontSizeMd;

const headingsMarginBottom = _var('headingsMarginBottom', '.5rem');

exports.headingsMarginBottom = headingsMarginBottom;

const headingsMarginBottomMd = _var('headingsMarginBottomMd', headingsMarginBottom);

exports.headingsMarginBottomMd = headingsMarginBottomMd;

const h0FontSize = _var('h0FontSize', `${modularScales.ms6}`);

exports.h0FontSize = h0FontSize;

const h0FontSizeLg = _var('h0FontSizeLg', `${modularScales.ms8}`);

exports.h0FontSizeLg = h0FontSizeLg;

const h1FontSize = _var('h1FontSize', `${modularScales.ms6}`);

exports.h1FontSize = h1FontSize;

const h1FontSizeLg = _var('h1FontSizeLg', `${modularScales.ms7}`);

exports.h1FontSizeLg = h1FontSizeLg;

const h2FontSize = _var('h2FontSize', `${modularScales.ms5}`);

exports.h2FontSize = h2FontSize;

const h2FontSizeLg = _var('h2FontSizeLg', `${modularScales.ms6}`);

exports.h2FontSizeLg = h2FontSizeLg;

const h2FontWeight = _var('h2FontWeight', `${fontWeightBold}`);

exports.h2FontWeight = h2FontWeight;

const h3FontSize = _var('h3FontSize', `${modularScales.ms4}`);

exports.h3FontSize = h3FontSize;

const h3FontSizeLg = _var('h3FontSizeLg', `${modularScales.ms5}`);

exports.h3FontSizeLg = h3FontSizeLg;

const h4FontSize = _var('h4FontSize', `${modularScales.ms3}`);

exports.h4FontSize = h4FontSize;

const h4FontSizeLg = _var('h4FontSizeLg', `${modularScales.ms4}`);

exports.h4FontSizeLg = h4FontSizeLg;

const h5FontSize = _var('h5FontSize', `${modularScales.ms2}`);

exports.h5FontSize = h5FontSize;

const h5FontSizeLg = _var('h5FontSizeLg', `${h5FontSize}`);

exports.h5FontSizeLg = h5FontSizeLg;

const h6FontSize = _var('h6FontSize', `${modularScales.ms1}`);

exports.h6FontSize = h6FontSize;

const h6FontSizeLg = _var('h6FontSizeLg', `${h6FontSize}`);

exports.h6FontSizeLg = h6FontSizeLg;

const headingsFontFamily = _var('headingsFontFamily', `inherit`);

exports.headingsFontFamily = headingsFontFamily;

const headingsFontWeight = _var('headingsFontWeight', fontWeightNormal);

exports.headingsFontWeight = headingsFontWeight;

const headingsColor = _var('headingsColor', bodyColor); //
// Display headings
//


exports.headingsColor = headingsColor;

const display1Size = _var('display1Size', modularScales.ms10);

exports.display1Size = display1Size;

const display1SizeLg = _var('display1SizeLg', modularScales.ms13);

exports.display1SizeLg = display1SizeLg;

const display1SizeXxl = _var('display1SizeXxl', modularScales.ms16);

exports.display1SizeXxl = display1SizeXxl;

const display2Size = _var('display2Size', modularScales.ms8);

exports.display2Size = display2Size;

const display2SizeLg = _var('display2SizeLg', modularScales.ms12);

exports.display2SizeLg = display2SizeLg;

const display2SizeXxl = _var('display2SizeXxl', modularScales.ms15);

exports.display2SizeXxl = display2SizeXxl;

const display3Size = _var('display3Size', modularScales.ms8);

exports.display3Size = display3Size;

const display3SizeLg = _var('display3SizeLg', modularScales.ms10);

exports.display3SizeLg = display3SizeLg;

const display3SizeXxl = _var('display3SizeXxl', modularScales.ms13);

exports.display3SizeXxl = display3SizeXxl;

const display4Size = _var('display4Size', modularScales.ms8);

exports.display4Size = display4Size;

const display4SizeLg = _var('display4SizeLg', modularScales.ms10);

exports.display4SizeLg = display4SizeLg;

const display4SizeXxl = _var('display4SizeXxl', modularScales.ms12);

exports.display4SizeXxl = display4SizeXxl;

const display1Weight = _var('display1Weight', fontWeightBold);

exports.display1Weight = display1Weight;

const display2Weight = _var('display2Weight', fontWeightBold);

exports.display2Weight = display2Weight;

const display3Weight = _var('display3Weight', fontWeightBold);

exports.display3Weight = display3Weight;

const display4Weight = _var('display4Weight', fontWeightBold);

exports.display4Weight = display4Weight;

const displayLineHeight = _var('displayLineHeight', '3.5rem');

exports.displayLineHeight = displayLineHeight;

const smallFontSize = _var('smallFontSize', '80%');

exports.smallFontSize = smallFontSize;

const blockquoteSmallColor = _var('blockquoteSmallColor', gray600);

exports.blockquoteSmallColor = blockquoteSmallColor;

const blockquoteFontSize = _var('blockquoteFontSize', `calc(${fontSizeBase} * 1.25)`);

exports.blockquoteFontSize = blockquoteFontSize;

const blockquoteBorderColor = _var('blockquoteBorderColor', grayLighter);

exports.blockquoteBorderColor = blockquoteBorderColor;

const blockquoteBorderWidth = _var('blockquoteBorderWidth', '4px');

exports.blockquoteBorderWidth = blockquoteBorderWidth;

const hrBorderColor = _var('hrBorderColor', borderColor);

exports.hrBorderColor = hrBorderColor;

const hrBorderDark = _var('hrBorderDark', (0, _palette.default)('gray'));

exports.hrBorderDark = hrBorderDark;

const hrBorderWidth = _var('hrBorderWidth', borderWidth);

exports.hrBorderWidth = hrBorderWidth;

const dtFontWeight = _var('dtFontWeight', fontWeightBold);

exports.dtFontWeight = dtFontWeight;

const kbdBoxShadow = _var('kbdBoxShadow', `inset 0 -.1rem 0 ${(0, _polished.rgba)(black, 0.25)}`);

exports.kbdBoxShadow = kbdBoxShadow;

const nestedKbdFontWeight = _var('nestedKbdFontWeight', fontWeightBold);

exports.nestedKbdFontWeight = nestedKbdFontWeight;

const listInlinePadding = _var('listInlinePadding', '.25rem');

exports.listInlinePadding = listInlinePadding;

const markBg = _var('markBg', (0, _polished.transparentize)(0.3, (0, _palette.default)('warning', 'base')));

exports.markBg = markBg;

const markPadding = _var('markPadding', '.2em');

exports.markPadding = markPadding;

const markPaddingY = _var('markPaddingY', '.08rem');

exports.markPaddingY = markPaddingY;

const markPaddingX = _var('markPaddingX', '.10rem');

exports.markPaddingX = markPaddingX;
const brandFontFaces = {}; // Uxicons
//

exports.brandFontFaces = brandFontFaces;

const iconFontPath = _var('iconFontPath', `${cdnPath}/ux/fonts/uxfont/2.0/`);

exports.iconFontPath = iconFontPath;

const iconFontName = _var('iconFontName', 'uxfont');

exports.iconFontName = iconFontName;

const iconFontName2 = _var('iconFontName2', 'uxfont-2'); // Tables
//
// Customizes the `.table` component with basic values, each used across all table variations.


exports.iconFontName2 = iconFontName2;

const tableBg = _var('tableBg', 'transparent');

exports.tableBg = tableBg;

const tableBorderColor = _var('tableBorderColor', borderColor);

exports.tableBorderColor = tableBorderColor;

const tableAccentBg = _var('tableAccentBg', (0, _palette.default)('product', 'faint'));

exports.tableAccentBg = tableAccentBg;

const tableHoverBg = _var('tableHoverBg', (0, _palette.default)('product', 'light'));

exports.tableHoverBg = tableHoverBg;

const tableStripedHoverBg = _var('tableStripedHoverBg', (0, _palette.default)('product', 'light'));

exports.tableStripedHoverBg = tableStripedHoverBg;

const tableActiveBg = _var('tableActiveBg', tableHoverBg);

exports.tableActiveBg = tableActiveBg;

const tableCellPadding = _var('tableCellPadding', '1rem');

exports.tableCellPadding = tableCellPadding;

const tableCellPaddingLg = _var('tableCellPaddingLg', '2rem');

exports.tableCellPaddingLg = tableCellPaddingLg;

const tableCellPaddingSm = _var('tableCellPaddingSm', '.25rem');

exports.tableCellPaddingSm = tableCellPaddingSm;

const tableBorderWidth = _var('tableBorderWidth', borderWidth);

exports.tableBorderWidth = tableBorderWidth;

const tableHeadBg = _var('tableHeadBg', gray200);

exports.tableHeadBg = tableHeadBg;

const tableHeadColor = _var('tableHeadColor', gray700);

exports.tableHeadColor = tableHeadColor;

const tableDarkBg = _var('tableDarkBg', gray900);

exports.tableDarkBg = tableDarkBg;

const tableDarkAccentBg = _var('tableDarkAccentBg', (0, _polished.rgba)('white', 0.05));

exports.tableDarkAccentBg = tableDarkAccentBg;

const tableDarkHoverBg = _var('tableDarkHoverBg', (0, _polished.rgba)('white', 0.075));

exports.tableDarkHoverBg = tableDarkHoverBg;

const tableDarkBorderColor = _var('tableDarkBorderColor', (0, _polished.lighten)('0.075', gray900));

exports.tableDarkBorderColor = tableDarkBorderColor;

const tableDarkColor = _var('tableDarkColor', bodyBg);

exports.tableDarkColor = tableDarkColor;

const tableCaptionColor = _var('tableCaptionColor', textMuted);

exports.tableCaptionColor = tableCaptionColor;

const tableIcon = _var('tableIcon', '1.375rem');

exports.tableIcon = tableIcon;

const tableStackingLabel = _var('tableStackingLabel', '10rem'); // Buttons
//
// For each of Bootstrap's buttons, define text, background and border color.


exports.tableStackingLabel = tableStackingLabel;

const inputBtnPaddingY = _var('inputBtnPaddingY', '0.375rem');

exports.inputBtnPaddingY = inputBtnPaddingY;

const inputBtnPaddingX = _var('inputBtnPaddingX', '0.75rem');

exports.inputBtnPaddingX = inputBtnPaddingX;

const inputBtnLineHeight = _var('inputBtnLineHeight', lineHeightBase);

exports.inputBtnLineHeight = inputBtnLineHeight;

const inputBtnPaddingYSm = _var('inputBtnPaddingYSm', `calc(${inputBtnPaddingY} - .125rem)`);

exports.inputBtnPaddingYSm = inputBtnPaddingYSm;

const inputBtnPaddingXSm = _var('inputBtnPaddingXSm', '0.75rem');

exports.inputBtnPaddingXSm = inputBtnPaddingXSm;

const inputBtnLineHeightSm = _var('inputBtnLineHeightSm', lineHeightSm);

exports.inputBtnLineHeightSm = inputBtnLineHeightSm;

const inputBtnPaddingYLg = _var('inputBtnPaddingYLg', inputBtnPaddingY);

exports.inputBtnPaddingYLg = inputBtnPaddingYLg;

const inputBtnPaddingXLg = _var('inputBtnPaddingXLg', '0.75rem');

exports.inputBtnPaddingXLg = inputBtnPaddingXLg;

const inputBtnLineHeightLg = _var('inputBtnLineHeightLg', lineHeightLg);

exports.inputBtnLineHeightLg = inputBtnLineHeightLg;

const btnFontWeight = _var('btnFontWeight', fontWeightNormal);

exports.btnFontWeight = btnFontWeight;

const btnBoxShadow = _var('btnBoxShadow', `inset 0 1px 0 ${(0, _polished.rgba)(white, 0.15)}, 0 1px 1px ${(0, _polished.rgba)(black, 0.075)}`);

exports.btnBoxShadow = btnBoxShadow;

const btnFocusBoxShadow = _var('btnFocusBoxShadow', `0 0 0 3px ${(0, _polished.rgba)((0, _functions.themeColor)('primary', themeColors), 0.25)}`);

exports.btnFocusBoxShadow = btnFocusBoxShadow;

const btnActiveBoxShadow = _var('btnActiveBoxShadow', `inset 0 3px 5px ${(0, _polished.rgba)(black, 0.125)}`);

exports.btnActiveBoxShadow = btnActiveBoxShadow;

const btnLinkDisabledColor = _var('btnLinkDisabledColor', gray600);

exports.btnLinkDisabledColor = btnLinkDisabledColor;

const btnBlockSpacingY = _var('btnBlockSpacingY', '.5rem');

exports.btnBlockSpacingY = btnBlockSpacingY;

const btnGutter = _var('btnGutter', '.5rem'); // Allows for customizing button radius independently from global border radius


exports.btnGutter = btnGutter;

const btnBorderRadius = _var('btnBorderRadius', borderRadiusSm);

exports.btnBorderRadius = btnBorderRadius;

const btnBorderRadiusLg = _var('btnBorderRadiusLg', borderRadiusSm);

exports.btnBorderRadiusLg = btnBorderRadiusLg;

const btnBorderRadiusSm = _var('btnBorderRadiusSm', borderRadiusSm);

exports.btnBorderRadiusSm = btnBorderRadiusSm;

const btnTransition = _var('btnTransition', `background-color .15s ease-in-out, border-color .15s ease-in-out, box-shadow .15s ease-in-out`); // Form states and alerts
//


exports.btnTransition = btnTransition;

const stateSuccessText = _var('stateSuccessText', (0, _palette.default)('success', 'pastel', 'contrast'));

exports.stateSuccessText = stateSuccessText;

const stateSuccessBg = _var('stateSuccessBg', (0, _palette.default)('success', 'pastel'));

exports.stateSuccessBg = stateSuccessBg;

const stateSuccessBorder = _var('stateSuccessBorder', (0, _palette.default)('success'));

exports.stateSuccessBorder = stateSuccessBorder;

const stateInfoText = _var('stateInfoText', (0, _palette.default)('info', 'pastel', 'contrast'));

exports.stateInfoText = stateInfoText;

const stateInfoBg = _var('stateInfoBg', (0, _palette.default)('info', 'pastel'));

exports.stateInfoBg = stateInfoBg;

const stateInfoBorder = _var('stateInfoBorder', (0, _palette.default)('info'));

exports.stateInfoBorder = stateInfoBorder;

const stateWarningText = _var('stateWarningText', (0, _palette.default)('warning', 'pastel', 'contrast'));

exports.stateWarningText = stateWarningText;

const stateWarningBg = _var('stateWarningBg', (0, _palette.default)('warning', 'pastel'));

exports.stateWarningBg = stateWarningBg;

const stateWarningBorder = _var('stateWarningBorder', (0, _palette.default)('warning'));

exports.stateWarningBorder = stateWarningBorder;

const stateDangerText = _var('stateDangerText', (0, _palette.default)('danger', 'pastel', 'contrast'));

exports.stateDangerText = stateDangerText;

const stateDangerBg = _var('stateDangerBg', (0, _palette.default)('danger', 'pastel'));

exports.stateDangerBg = stateDangerBg;

const stateDangerBorder = _var('stateDangerBorder', (0, _palette.default)('danger')); // Forms


exports.stateDangerBorder = stateDangerBorder;

const labelMarginBottom = _var('labelMarginBottom', '.5rem');

exports.labelMarginBottom = labelMarginBottom;

const inputIconSpacing = _var('inputIconSpacing', '1.25rem');

exports.inputIconSpacing = inputIconSpacing;

const inputIconSpacingSm = _var('inputIconSpacingSm', '1rem');

exports.inputIconSpacingSm = inputIconSpacingSm;

const inputIconSpacingLg = _var('inputIconSpacingLg', '1.75rem');

exports.inputIconSpacingLg = inputIconSpacingLg;

const inputIconClearSize = _var('inputIconClearSize', '1.4375rem');

exports.inputIconClearSize = inputIconClearSize;

const inputIconClearSizeSm = _var('inputIconClearSizeSm', '1.125rem');

exports.inputIconClearSizeSm = inputIconClearSizeSm;

const inputBg = _var('inputBg', (0, _palette.default)('white'));

exports.inputBg = inputBg;

const inputDisabledBg = _var('inputDisabledBg', (0, _palette.default)('product', 'faint'));

exports.inputDisabledBg = inputDisabledBg;

const inputDisabledColor = _var('inputDisabledColor', (0, _palette.default)('product', 'midrange'));

exports.inputDisabledColor = inputDisabledColor;

const inputDisabledBorderColor = _var('inputDisabledBorderColor', (0, _palette.default)('product'));

exports.inputDisabledBorderColor = inputDisabledBorderColor;

const inputDisabledToggleColor = _var('inputDisabledToggleColor', gray);

exports.inputDisabledToggleColor = inputDisabledToggleColor;

const inputColor = _var('inputColor', (0, _palette.default)('gray', 'dark'));

exports.inputColor = inputColor;

const inputColorHover = _var('inputColorHover', inputColor);

exports.inputColorHover = inputColorHover;

const inputBorderColor = _var('inputBorderColor', borderColor);

exports.inputBorderColor = inputBorderColor;

const inputBtnBorderWidth = _var('inputBtnBorderWidth', borderWidth); // For form controls and buttons


exports.inputBtnBorderWidth = inputBtnBorderWidth;

const inputBoxShadow = _var('inputBoxShadow', 'none');

exports.inputBoxShadow = inputBoxShadow;

const inputBoxShadowSuccess = _var('inputBoxShadowSuccess', 'none');

exports.inputBoxShadowSuccess = inputBoxShadowSuccess;

const inputBoxShadowWarning = _var('inputBoxShadowWarning', 'none');

exports.inputBoxShadowWarning = inputBoxShadowWarning;

const inputBoxShadowError = _var('inputBoxShadowError', 'none');

exports.inputBoxShadowError = inputBoxShadowError;

const inputSuccessColor = _var('inputSuccessColor', (0, _palette.default)('success'));

exports.inputSuccessColor = inputSuccessColor;

const inputSuccessBg = _var('inputSuccessBg', (0, _palette.default)('success', 'pastel'));

exports.inputSuccessBg = inputSuccessBg;

const inputWarningColor = _var('inputWarningColor', (0, _palette.default)('warning', 'dark'));

exports.inputWarningColor = inputWarningColor;

const inputWarningBg = _var('inputWarningBg', (0, _palette.default)('warning', 'pastel'));

exports.inputWarningBg = inputWarningBg;

const inputWarningTextColor = _var('inputWarningTextColor', (0, _palette.default)('warning', 'pastel', 'contrast'));

exports.inputWarningTextColor = inputWarningTextColor;

const inputErrorColor = _var('inputErrorColor', (0, _palette.default)('danger'));

exports.inputErrorColor = inputErrorColor;

const inputErrorBg = _var('inputErrorBg', 'inherit');

exports.inputErrorBg = inputErrorBg;

const inputErrorTextColor = _var('inputErrorTextColor', (0, _palette.default)('danger', 'pastel', 'contrast'));

exports.inputErrorTextColor = inputErrorTextColor;

const inputBorderRadius = _var('inputBorderRadius', borderRadius);

exports.inputBorderRadius = inputBorderRadius;

const inputBorderRadiusLg = _var('inputBorderRadiusLg', borderRadiusLg);

exports.inputBorderRadiusLg = inputBorderRadiusLg;

const inputBorderRadiusSm = _var('inputBorderRadiusSm', borderRadiusSm);

exports.inputBorderRadiusSm = inputBorderRadiusSm;

const inputFocusBg = _var('inputFocusBg', inputBg);

exports.inputFocusBg = inputFocusBg;

const inputFocusBorderColor = _var('inputFocusBorderColor', (0, _palette.default)('black', 'dark'));

exports.inputFocusBorderColor = inputFocusBorderColor;

const inputFocusBorderWidth = _var('inputFocusBorderWidth', '1px');

exports.inputFocusBorderWidth = inputFocusBorderWidth;

const inputFocusColor = _var('inputFocusColor', inputColor);

exports.inputFocusColor = inputFocusColor;

const inputFocusBoxShadow = _var('inputFocusBoxShadow', `inset 0px -1px 0px 0px ${(0, _palette.default)('black')}`);

exports.inputFocusBoxShadow = inputFocusBoxShadow;

const inputfocusboxshadowsuccess = _var('inputfocusboxshadowsuccess', `inset 0px -1px 0px 0px ${(0, _palette.default)('success')}`);

exports.inputfocusboxshadowsuccess = inputfocusboxshadowsuccess;

const inputFocusBoxShadowWarning = _var('inputFocusBoxShadowWarning', `inset 0px -1px 0px 0px ${(0, _palette.default)('warning')}`);

exports.inputFocusBoxShadowWarning = inputFocusBoxShadowWarning;

const inputFocusBoxShadowError = _var('inputFocusBoxShadowError', 'none');

exports.inputFocusBoxShadowError = inputFocusBoxShadowError;

const inputPlaceholderColor = _var('inputPlaceholderColor', inputBorderColor);

exports.inputPlaceholderColor = inputPlaceholderColor;

const inputHeightBorder = _var('inputHeightBorder', 'calc(${inputBtnBorderWidth} * 2)');

exports.inputHeightBorder = inputHeightBorder;

const inputHeight = _var('inputHeight', '2.75rem');

exports.inputHeight = inputHeight;

const inputHeightInner = _var('inputHeightInner', 'calc(${inputHeight} - .125rem)');

exports.inputHeightInner = inputHeightInner;

const inputHeightSm = _var('inputHeightSm', '2rem');

exports.inputHeightSm = inputHeightSm;

const inputHeightInnerSm = _var('inputHeightInnerSm', 'calc(${inputHeightSm} - .125rem)');

exports.inputHeightInnerSm = inputHeightInnerSm;

const inputHeightLg = _var('inputHeightLg', '3.25rem');

exports.inputHeightLg = inputHeightLg;

const inputHeightInnerLg = _var('inputHeightInnerLg', 'calc(${inputHeightLg} - .125rem)'); // Merchandising form element sizes


exports.inputHeightInnerLg = inputHeightInnerLg;

const inputHeightMerch = _var('inputHeightMerch', '3.25rem');

exports.inputHeightMerch = inputHeightMerch;

const inputHeightMerchInner = _var('inputHeightMerchInner', 'calc(${inputHeightMerch} - .125rem)');

exports.inputHeightMerchInner = inputHeightMerchInner;

const inputHeightMerchSm = _var('inputHeightMerchSm', '2.5rem');

exports.inputHeightMerchSm = inputHeightMerchSm;

const inputHeightMerchInnerSm = _var('inputHeightMerchInnerSm', 'calc(${inputHeightMerchSm} -  .125rem)');

exports.inputHeightMerchInnerSm = inputHeightMerchInnerSm;

const inputHeightMerchLg = _var('inputHeightMerchLg', '4rem');

exports.inputHeightMerchLg = inputHeightMerchLg;

const inputHeightMerchInnerLg = _var('inputHeightMerchInnerLg', 'calc(${inputHeightMerchLg} -  .125rem)');

exports.inputHeightMerchInnerLg = inputHeightMerchInnerLg;

const inputTransition = _var('inputTransition', transitionBase);

exports.inputTransition = inputTransition;

const inputBorderDropdownOpen = _var('inputBorderDropdownOpen', '1px 1px 1px 1px');

exports.inputBorderDropdownOpen = inputBorderDropdownOpen;

const inputBoxShadowSize = _var('inputBoxShadowSize', '0');

exports.inputBoxShadowSize = inputBoxShadowSize;

const inputGroupAddonColor = _var('inputGroupAddonColor', inputColor);

exports.inputGroupAddonColor = inputGroupAddonColor;

const inputGroupAddonBg = _var('inputGroupAddonBg', gray200);

exports.inputGroupAddonBg = inputGroupAddonBg;

const inputGroupAddonBorderColor = _var('inputGroupAddonBorderColor', inputBorderColor);

exports.inputGroupAddonBorderColor = inputGroupAddonBorderColor;

const formTextMarginTop = _var('formTextMarginTop', '.25rem');

exports.formTextMarginTop = formTextMarginTop;

const formCheckMarginBottom = _var('formCheckMarginBottom', '.5rem');

exports.formCheckMarginBottom = formCheckMarginBottom;

const formCheckInputGutter = _var('formCheckInputGutter', '-1.25rem');

exports.formCheckInputGutter = formCheckInputGutter;

const formCheckInputMarginY = _var('formCheckInputMarginY', '0');

exports.formCheckInputMarginY = formCheckInputMarginY;

const formCheckInputMarginX = _var('formCheckInputMarginX', '.25rem');

exports.formCheckInputMarginX = formCheckInputMarginX;

const formCheckInlineMarginX = _var('formCheckInlineMarginX', '2rem');

exports.formCheckInlineMarginX = formCheckInlineMarginX;

const formGroupMarginBottom = _var('formGroupMarginBottom', '1.5rem');

exports.formGroupMarginBottom = formGroupMarginBottom;

const formGroupLabelTransform = _var('formGroupLabelTransform', 'none');

exports.formGroupLabelTransform = formGroupLabelTransform;

const formGroupIconSize = _var('formGroupIconSize', '1.25rem');

exports.formGroupIconSize = formGroupIconSize;

const formClearIconColor = _var('formClearIconColor', (0, _palette.default)('gray'));

exports.formClearIconColor = formClearIconColor;

const formClearIconSize = _var('formClearIconSize', '1.25rem');

exports.formClearIconSize = formClearIconSize;

const formClearIconSizeSm = _var('formClearIconSizeSm', '1.25rem');

exports.formClearIconSizeSm = formClearIconSizeSm;

const customControlGutter = _var('customControlGutter', '2rem');

exports.customControlGutter = customControlGutter;

const customControlSpacerY = _var('customControlSpacerY', '.25rem');

exports.customControlSpacerY = customControlSpacerY;

const customControlSpacerX = _var('customControlSpacerX', '1rem');

exports.customControlSpacerX = customControlSpacerX;

const customControlFocusIndicatorBoxShadow = _var('customControlFocusIndicatorBoxShadow', 'none');

exports.customControlFocusIndicatorBoxShadow = customControlFocusIndicatorBoxShadow;

const customControlIndicatorSize = _var('customControlIndicatorSize', '1.25rem');

exports.customControlIndicatorSize = customControlIndicatorSize;

const customControlIndicatorBg = _var('customControlIndicatorBg', (0, _palette.default)('white'));

exports.customControlIndicatorBg = customControlIndicatorBg;

const customControlIndicatorBgSize = _var('customControlIndicatorBgSize', '50% 50%');

exports.customControlIndicatorBgSize = customControlIndicatorBgSize;

const customControlIndicatorBoxShadow = _var('customControlIndicatorBoxShadow', 'none');

exports.customControlIndicatorBoxShadow = customControlIndicatorBoxShadow;

const customControlIndicatorBorder = _var('customControlIndicatorBorder', `1px solid ${(0, _palette.default)('product', 'dark')}`);

exports.customControlIndicatorBorder = customControlIndicatorBorder;

const customControlDescriptionFontWeight = _var('customControlDescriptionFontWeight', fontWeightNormal);

exports.customControlDescriptionFontWeight = customControlDescriptionFontWeight;

const customControlIndicatorDisabledBg = _var('customControlIndicatorDisabledBg', (0, _palette.default)('gray', 'faint'));

exports.customControlIndicatorDisabledBg = customControlIndicatorDisabledBg;

const customControlDescriptionDisabledColor = _var('customControlDescriptionDisabledColor', gray600);

exports.customControlDescriptionDisabledColor = customControlDescriptionDisabledColor;

const customControlDisabledDescriptionOpacity = _var('customControlDisabledDescriptionOpacity', '.6');

exports.customControlDisabledDescriptionOpacity = customControlDisabledDescriptionOpacity;

const customControlIndicatorCheckedColor = _var('customControlIndicatorCheckedColor', (0, _palette.default)('white'));

exports.customControlIndicatorCheckedColor = customControlIndicatorCheckedColor;

const customControlIndicatorCheckedBg = _var('customControlIndicatorCheckedBg', (0, _palette.default)('primary-o'));

exports.customControlIndicatorCheckedBg = customControlIndicatorCheckedBg;

const customControlIndicatorCheckedBoxShadow = _var('customControlIndicatorCheckedBoxShadow', 'none');

exports.customControlIndicatorCheckedBoxShadow = customControlIndicatorCheckedBoxShadow;

const customControlCheckedIndicatorBorder = _var('customControlCheckedIndicatorBorder', (0, _palette.default)('primary-o'));

exports.customControlCheckedIndicatorBorder = customControlCheckedIndicatorBorder;

const customControlIndicatorFocusBoxShadow = _var('customControlIndicatorFocusBoxShadow', customControlIndicatorCheckedBoxShadow);

exports.customControlIndicatorFocusBoxShadow = customControlIndicatorFocusBoxShadow;

const customControlFocusIndicatorBorder = _var('customControlFocusIndicatorBorder', (0, _palette.default)('primary-o'));

exports.customControlFocusIndicatorBorder = customControlFocusIndicatorBorder;

const customControlIndicatorActiveColor = _var('customControlIndicatorActiveColor', (0, _palette.default)('white'));

exports.customControlIndicatorActiveColor = customControlIndicatorActiveColor;

const customControlIndicatorActiveBg = _var('customControlIndicatorActiveBg', (0, _palette.default)('white'));

exports.customControlIndicatorActiveBg = customControlIndicatorActiveBg;

const customControlIndicatorActiveBoxShadow = _var('customControlIndicatorActiveBoxShadow', 'none');

exports.customControlIndicatorActiveBoxShadow = customControlIndicatorActiveBoxShadow;

const customCheckboxIndicatorBorderRadius = _var('customCheckboxIndicatorBorderRadius', '0');

exports.customCheckboxIndicatorBorderRadius = customCheckboxIndicatorBorderRadius;

const customCheckboxIndicatorIconChecked = _var('customCheckboxIndicatorIconChecked', `url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3E%3Cpath fill='${customControlIndicatorCheckedColor}' d='M6.564.75l-3.59 3.612-1.538-1.55L0 4.26 2.974 7.25 8 2.193z'/%3E%3C/svg%3E")`.replace('#', '%23'));

exports.customCheckboxIndicatorIconChecked = customCheckboxIndicatorIconChecked;

const customCheckboxIconSize = _var('customCheckboxIconSize', '1rem');

exports.customCheckboxIconSize = customCheckboxIconSize;

const customControlCheckedRadioIndicatorBorder = _var('customControlCheckedRadioIndicatorBorder', `1px solid ${(0, _palette.default)('primary-o', 'midrange')}`);

exports.customControlCheckedRadioIndicatorBorder = customControlCheckedRadioIndicatorBorder;

const customControlCheckedRadioIndicatorBg = _var('customControlCheckedRadioIndicatorBg', (0, _palette.default)('primary-o'));

exports.customControlCheckedRadioIndicatorBg = customControlCheckedRadioIndicatorBg;

const customControlCheckedRadioInsetShadow = _var('customControlCheckedRadioInsetShadow', `inset 0 0 0 4px ${(0, _palette.default)('white')}`);

exports.customControlCheckedRadioInsetShadow = customControlCheckedRadioInsetShadow;

const customCheckboxIndeterminateBg = _var('customCheckboxIndeterminateBg', customControlIndicatorCheckedBg);

exports.customCheckboxIndeterminateBg = customCheckboxIndeterminateBg;

const customCheckboxIndeterminateBorder = _var('customCheckboxIndeterminateBorder', customControlCheckedRadioIndicatorBorder);

exports.customCheckboxIndeterminateBorder = customCheckboxIndeterminateBorder;

const customCheckboxIndicatorIndeterminateBg = _var('customCheckboxIndicatorIndeterminateBg', (0, _functions.themeColor)('primary-o', themeColors));

exports.customCheckboxIndicatorIndeterminateBg = customCheckboxIndicatorIndeterminateBg;

const customCheckboxIndicatorIndeterminateColor = _var('customCheckboxIndicatorIndeterminateColor', customControlIndicatorCheckedColor);

exports.customCheckboxIndicatorIndeterminateColor = customCheckboxIndicatorIndeterminateColor;

const customCheckboxIndicatorIconIndeterminate = _var('customCheckboxIndicatorIconIndeterminate', `url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 4 4'%3E%3Cpath stroke='${customCheckboxIndicatorIndeterminateColor}' d='M0 2h4'/%3E%3C/svg%3E")`.replace('#', '%23'));

exports.customCheckboxIndicatorIconIndeterminate = customCheckboxIndicatorIconIndeterminate;

const customCheckboxIndicatorIndeterminateBoxShadow = _var('customCheckboxIndicatorIndeterminateBoxShadow', 'none');

exports.customCheckboxIndicatorIndeterminateBoxShadow = customCheckboxIndicatorIndeterminateBoxShadow;

const customRadioIndicatorBorderRadius = _var('customRadioIndicatorBorderRadius', '50%');

exports.customRadioIndicatorBorderRadius = customRadioIndicatorBorderRadius;

const customRadioIndicatorIconChecked = _var('customRadioIndicatorIconChecked', `url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3E%3Ccircle r='3' fill=${customControlIndicatorCheckedColor}'/%3E%3C/svg%3E")`.replace('#', '%23'));

exports.customRadioIndicatorIconChecked = customRadioIndicatorIconChecked;

const customSelectPaddingY = _var('customSelectPaddingY', '.375rem');

exports.customSelectPaddingY = customSelectPaddingY;

const customSelectPaddingX = _var('customSelectPaddingX', '.75rem');

exports.customSelectPaddingX = customSelectPaddingX;

const customSelectHeight = _var('customSelectHeight', inputHeight);

exports.customSelectHeight = customSelectHeight;

const customSelectIndicatorPadding = _var('customSelectIndicatorPadding', '1rem'); // Extra padding to account for the presence of the backgroundImage based indicator


exports.customSelectIndicatorPadding = customSelectIndicatorPadding;

const customSelectLineHeight = _var('customSelectLineHeight', inputBtnLineHeight);

exports.customSelectLineHeight = customSelectLineHeight;

const customSelectColor = _var('customSelectColor', inputColor);

exports.customSelectColor = customSelectColor;

const customSelectDisabledColor = _var('customSelectDisabledColor', gray600);

exports.customSelectDisabledColor = customSelectDisabledColor;

const customSelectBg = _var('customSelectBg', white);

exports.customSelectBg = customSelectBg;

const customSelectDisabledBg = _var('customSelectDisabledBg', gray200);

exports.customSelectDisabledBg = customSelectDisabledBg;

const customSelectBgSize = _var('customSelectBgSize', '8px 10px'); // In pixels because image dimensions


exports.customSelectBgSize = customSelectBgSize;

const customSelectIndicatorColor = _var('customSelectIndicatorColor', '#333');

exports.customSelectIndicatorColor = customSelectIndicatorColor;

const customSelectIndicator = _var('customSelectIndicator', `url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 4 5'%3E%3Cpath fill='${customSelectIndicatorColor}' d='M2 0L0 2h4zm0 5L0 3h4z'/%3E%3C/svg%3E")`.replace('#', '%23'));

exports.customSelectIndicator = customSelectIndicator;

const customSelectBorderWidth = _var('customSelectBorderWidth', inputBtnBorderWidth);

exports.customSelectBorderWidth = customSelectBorderWidth;

const customSelectBorderColor = _var('customSelectBorderColor', inputBorderColor);

exports.customSelectBorderColor = customSelectBorderColor;

const customSelectBorderRadius = _var('customSelectBorderRadius', borderRadius);

exports.customSelectBorderRadius = customSelectBorderRadius;

const customSelectFocusBorderColor = _var('customSelectFocusBorderColor', (0, _polished.lighten)('0.25', (0, _functions.themeColor)('primary', themeColors)));

exports.customSelectFocusBorderColor = customSelectFocusBorderColor;

const customSelectFocusBoxShadow = _var('customSelectFocusBoxShadow', `inset 0 1px 2px ${(0, _polished.rgba)(black, 0.075)}, 0 0 5px ${(0, _polished.rgba)(customSelectFocusBorderColor, 0.5)}`);

exports.customSelectFocusBoxShadow = customSelectFocusBoxShadow;

const customSelectFontSizeSm = _var('customSelectFontSizeSm', '75%');

exports.customSelectFontSizeSm = customSelectFontSizeSm;

const customSelectHeightSm = _var('customSelectHeightSm', inputHeightSm);

exports.customSelectHeightSm = customSelectHeightSm;

const customSelectSmPaddingY = _var('customSelectSmPaddingY', customSelectHeightSm); // ++


exports.customSelectSmPaddingY = customSelectSmPaddingY;

const customSelectSmFontSize = _var('customSelectSmFontSize', customSelectFontSizeSm); // ++


exports.customSelectSmFontSize = customSelectSmFontSize;

const customFileHeight = _var('customFileHeight', inputHeight); // $inputHeight needs to be checked.


exports.customFileHeight = customFileHeight;

const customFileWidth = _var('customFileWidth', '14rem');

exports.customFileWidth = customFileWidth;

const customFileFocusBoxShadow = _var('customFileFocusBoxShadow', `0 0' 0 .'075rem ${white}, 0 0 0 .2rem ${(0, _functions.themeColor)('primary', themeColors)}`);

exports.customFileFocusBoxShadow = customFileFocusBoxShadow;

const customFilePaddingY = _var('customFilePaddingY', inputBtnPaddingY);

exports.customFilePaddingY = customFilePaddingY;

const customFilePaddingX = _var('customFilePaddingX', inputBtnPaddingX);

exports.customFilePaddingX = customFilePaddingX;

const customFileLineHeight = _var('customFileLineHeight', inputBtnLineHeight);

exports.customFileLineHeight = customFileLineHeight;

const customFileColor = _var('customFileColor', inputColor);

exports.customFileColor = customFileColor;

const customFileBg = _var('customFileBg', inputBg);

exports.customFileBg = customFileBg;

const customFileBorderWidth = _var('customFileBorderWidth', inputBtnBorderWidth);

exports.customFileBorderWidth = customFileBorderWidth;

const customFileBorderColor = _var('customFileBorderColor', inputBorderColor);

exports.customFileBorderColor = customFileBorderColor;

const customFileBorderRadius = _var('customFileBorderRadius', inputBorderRadius);

exports.customFileBorderRadius = customFileBorderRadius;

const customFileBoxShadow = _var('customFileBoxShadow', inputBoxShadow);

exports.customFileBoxShadow = customFileBoxShadow;

const customFileButtonColor = _var('customFileButtonColor', customFileColor);

exports.customFileButtonColor = customFileButtonColor;

const customFileButtonBg = _var('customFileButtonBg', inputGroupAddonBg);

exports.customFileButtonBg = customFileButtonBg;
const customFileText = {
  placeholder: {
    en: '"Choose file..."'
  },
  buttonLabel: {
    en: 'Browse'
  }
};
exports.customFileText = customFileText;

const cursorDisabled = _var('cursorDisabled', 'not-allowed');

exports.cursorDisabled = cursorDisabled;

const disabledOpacity = _var('disabledOpacity', '.4'); // Form validation


exports.disabledOpacity = disabledOpacity;

const formFeedbackValidColor = _var('formFeedbackValidColor', (0, _functions.themeColor)('success', themeColors));

exports.formFeedbackValidColor = formFeedbackValidColor;

const formFeedbackInvalidColor = _var('formFeedbackInvalidColor', (0, _functions.themeColor)('danger', themeColors)); // Form validation icons


exports.formFeedbackInvalidColor = formFeedbackInvalidColor;

const formIconSuccess = _var('formIconSuccess', `url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3E%3Cpath fill='%235cb85c' d='M2.3 6.73L.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3E%3C/svg%3E")`); // ++


exports.formIconSuccess = formIconSuccess;

const formIconWarning = _var('formIconWarning', `url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3E%3Cpath fill='%23f0ad4e' d='M4.4 5.324h-.8v-2.46h.8zm0 1.42h-.8V5.89h.8zM3.76.63L.04 7.075c-.115.2.016.425.26.426h7.397c.242 0 .372-.226.258-.426C6.726 4.924 5.47 2.79 4.253.63c-.113-.174-.39-.174-.494 0z'/%3E%3C/svg%3E")`); // ++


exports.formIconWarning = formIconWarning;

const formIconDanger = _var('formIconDanger', `url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23d9534f' viewBox='-2 -2 7 7'%3E%3Cpath stroke='%23d9534f' d='M0 0l3 3m0-3L0 3'/%3E%3Ccircle r='.5'/%3E%3Ccircle cx='3' r='.5'/%3E%3Ccircle cy='3' r='.5'/%3E%3Ccircle cx='3' cy='3' r='.5'/%3E%3C/svg%3E")`); // ++
// Dropdowns
//
// Dropdown menu container and contents.


exports.formIconDanger = formIconDanger;

const dropdownMinWidth = _var('dropdownMinWidth', '10rem');

exports.dropdownMinWidth = dropdownMinWidth;

const dropdownPaddingY = _var('dropdownPaddingY', '.5rem');

exports.dropdownPaddingY = dropdownPaddingY;

const dropdownSpacer = _var('dropdownSpacer', '.125rem'); // .125 = 2px


exports.dropdownSpacer = dropdownSpacer;

const dropdownBg = _var('dropdownBg', (0, _palette.default)('white'));

exports.dropdownBg = dropdownBg;

const dropdownBorderColor = _var('dropdownBorderColor', (0, _palette.default)('black'));

exports.dropdownBorderColor = dropdownBorderColor;

const dropdownBorderRadius = _var('dropdownBorderRadius', '0');

exports.dropdownBorderRadius = dropdownBorderRadius;

const dropdownBorderWidth = _var('dropdownBorderWidth', borderWidth);

exports.dropdownBorderWidth = dropdownBorderWidth;

const dropdownDividerBg = _var('dropdownDividerBg', (0, _palette.default)('product', 'faint'));

exports.dropdownDividerBg = dropdownDividerBg;

const dropdownBoxShadow = _var('dropdownBoxShadow', `0 .5rem 1rem ${(0, _polished.rgba)('black', 0.175)}`);

exports.dropdownBoxShadow = dropdownBoxShadow;

const dropdownMarginTop = _var('dropdownMarginTop', '2px'); // px for border width


exports.dropdownMarginTop = dropdownMarginTop;

const dropdownLinkColor = _var('dropdownLinkColor', (0, _palette.default)('black'));

exports.dropdownLinkColor = dropdownLinkColor;

const dropdownLinkHoverColor = _var('dropdownLinkHoverColor', (0, _palette.default)('primary-o', 'midrange'));

exports.dropdownLinkHoverColor = dropdownLinkHoverColor;

const dropdownLinkHoverBg = _var('dropdownLinkHoverBg', (0, _palette.default)('product', 'faint'));

exports.dropdownLinkHoverBg = dropdownLinkHoverBg;

const dropdownLinkActiveColor = _var('dropdownLinkActiveColor', componentActiveColor);

exports.dropdownLinkActiveColor = dropdownLinkActiveColor;

const dropdownLinkActiveBg = _var('dropdownLinkActiveBg', componentActiveBg);

exports.dropdownLinkActiveBg = dropdownLinkActiveBg;

const dropdownLinkDisabledColor = _var('dropdownLinkDisabledColor', gray600);

exports.dropdownLinkDisabledColor = dropdownLinkDisabledColor;

const dropdownItemPaddingY = _var('dropdownItemPaddingY', '.75rem');

exports.dropdownItemPaddingY = dropdownItemPaddingY;

const dropdownItemPaddingX = _var('dropdownItemPaddingX', '1rem');

exports.dropdownItemPaddingX = dropdownItemPaddingX;

const dropdownHeaderHeight = _var('dropdownHeaderHeight', '2rem');

exports.dropdownHeaderHeight = dropdownHeaderHeight;

const dropdownHeaderColor = _var('dropdownHeaderColor', (0, _palette.default)('primary-o'));

exports.dropdownHeaderColor = dropdownHeaderColor;

const dropdownToggleSplitWidth = _var('dropdownToggleSplitWidth', '1.8125rem');

exports.dropdownToggleSplitWidth = dropdownToggleSplitWidth;

const dropdownMenuIconSize = _var('dropdownMenuIconSize', '1.25rem');

exports.dropdownMenuIconSize = dropdownMenuIconSize;

const dropdownTripleDotIconSize = _var('dropdownTripleDotIconSize', '1.3125rem'); // ZIndex main list
//
// Warning: Avoid customizing these values. They're used for a bird's eye view
// of components dependent on the zAxis and are designed to all work together.


exports.dropdownTripleDotIconSize = dropdownTripleDotIconSize;

const zindexDropdown = _var('zindexDropdown', '1000');

exports.zindexDropdown = zindexDropdown;

const zindexSticky = _var('zindexSticky', '1020');

exports.zindexSticky = zindexSticky;

const zindexFixed = _var('zindexFixed', '1030');

exports.zindexFixed = zindexFixed;

const zindexModalBackdrop = _var('zindexModalBackdrop', '1040');

exports.zindexModalBackdrop = zindexModalBackdrop;

const zindexModal = _var('zindexModal', '1050');

exports.zindexModal = zindexModal;

const zindexPopover = _var('zindexPopover', '1060');

exports.zindexPopover = zindexPopover;

const zindexTooltip = _var('zindexTooltip', '1070');

exports.zindexTooltip = zindexTooltip;

const zindexDropdownBackdrop = _var('zindexDropdownBackdrop', '990'); // ++


exports.zindexDropdownBackdrop = zindexDropdownBackdrop;

const zindexNavbar = _var('zindexNavbar', zindexDropdown); // ++


exports.zindexNavbar = zindexNavbar;

const zindexNavbarSticky = _var('zindexNavbarSticky', zindexSticky); // ++


exports.zindexNavbarSticky = zindexNavbarSticky;

const zindexModalBg = _var('zindexModalBg', zindexModalBackdrop); // ++


exports.zindexModalBg = zindexModalBg;

const zindexNavbarFixed = _var('zindexNavbarFixed', zindexFixed); // ++


exports.zindexNavbarFixed = zindexNavbarFixed;

const zindexInappHelp = _var('zindexInappHelp', '200000001'); // Navs


exports.zindexInappHelp = zindexInappHelp;

const navLinkPaddingY = _var('navLinkPaddingY', '0.5rem');

exports.navLinkPaddingY = navLinkPaddingY;

const navLinkPaddingX = _var('navLinkPaddingX', '1rem');

exports.navLinkPaddingX = navLinkPaddingX;

const navLinkDisabledColor = _var('navLinkDisabledColor', gray600);

exports.navLinkDisabledColor = navLinkDisabledColor;

const navLinkDisabledBg = _var('navLinkDisabledBg', 'transparent');

exports.navLinkDisabledBg = navLinkDisabledBg;

const navLinkPadding = _var('navLinkPadding', '.25rem 2rem');

exports.navLinkPadding = navLinkPadding;

const navLinkPaddingSm = _var('navLinkPaddingSm', '.25rem 1rem');

exports.navLinkPaddingSm = navLinkPaddingSm;

const navItemMargin = _var('navItemMargin', '.2rem'); // ++


exports.navItemMargin = navItemMargin;

const navItemInlineSpacer = _var('navItemInlineSpacer', '1rem'); // ++
// Nav top (text, links)
//


exports.navItemInlineSpacer = navItemInlineSpacer;

const navTextColor = _var('navTextColor', (0, _palette.default)('gray', 'dark'));

exports.navTextColor = navTextColor;

const navTextTransform = _var('navTextTransform', 'none');

exports.navTextTransform = navTextTransform;

const navLinkColor = _var('navLinkColor', (0, _palette.default)('gray', 'dark'));

exports.navLinkColor = navLinkColor;

const navLinkHoverColor = _var('navLinkHoverColor', (0, _palette.default)('gray', 'dark'));

exports.navLinkHoverColor = navLinkHoverColor;

const navLinkHoverBg = _var('navLinkHoverBg', (0, _palette.default)('product')); // Nav tabs


exports.navLinkHoverBg = navLinkHoverBg;

const navTabsHeight = _var('navTabsHeight', '3.25rem'); // export const navTabsOverflowHeight = _var('navTabsOverflowHeight', navTabsHeight + rem('17.5px'));


exports.navTabsHeight = navTabsHeight;

const navTabsBorderColor = _var('navTabsBorderColor', (0, _palette.default)('gray', 'light'));

exports.navTabsBorderColor = navTabsBorderColor;

const navTabsBorderWidth = _var('navTabsBorderWidth', borderWidth);

exports.navTabsBorderWidth = navTabsBorderWidth;

const navTabsBorderRadius = _var('navTabsBorderRadius', borderRadius);

exports.navTabsBorderRadius = navTabsBorderRadius;

const navTabsLinkHoverBorderColor = _var('navTabsLinkHoverBorderColor', (0, _palette.default)('gray', 'light'));

exports.navTabsLinkHoverBorderColor = navTabsLinkHoverBorderColor;

const navTabsLinkActiveColor = _var('navTabsLinkActiveColor', gray700);

exports.navTabsLinkActiveColor = navTabsLinkActiveColor;

const navTabsLinkActiveBg = _var('navTabsLinkActiveBg', bodyBg);

exports.navTabsLinkActiveBg = navTabsLinkActiveBg;

const navTabsLinkActiveBorderColor = _var('navTabsLinkActiveBorderColor', '#ddd');

exports.navTabsLinkActiveBorderColor = navTabsLinkActiveBorderColor;

const navTabsLinkDisabledColor = _var('navTabsLinkDisabledColor', inputDisabledColor);

exports.navTabsLinkDisabledColor = navTabsLinkDisabledColor;

const navTabsLinkDisabledBg = _var('navTabsLinkDisabledBg', inputDisabledBg);

exports.navTabsLinkDisabledBg = navTabsLinkDisabledBg;

const navTabsLinkDisabledBorderColor = _var('navTabsLinkDisabledBorderColor', inputDisabledBorderColor);

exports.navTabsLinkDisabledBorderColor = navTabsLinkDisabledBorderColor;

const navPillsBorderRadius = _var('navPillsBorderRadius', borderRadius);

exports.navPillsBorderRadius = navPillsBorderRadius;

const navPillsLinkActiveColor = _var('navPillsLinkActiveColor', componentActiveColor);

exports.navPillsLinkActiveColor = navPillsLinkActiveColor;

const navPillsLinkActiveBg = _var('navPillsLinkActiveBg', componentActiveBg); // Nav bottom
// *NOTE:* No variables exist for navBottom link / text coloring
//
// export const navBotPadding = _var('navBotPadding', '11px 15px');
// Navbar


exports.navPillsLinkActiveBg = navPillsLinkActiveBg;

const navbarPaddingY = _var('navbarPaddingY', (0, _polished.math)(`${spacer} / 2`));

exports.navbarPaddingY = navbarPaddingY;

const navbarPaddingX = _var('navbarPaddingX', spacer);

exports.navbarPaddingX = navbarPaddingX;

const navbarBrandFontSize = _var('navbarBrandFontSize', fontSizeLg); // Compute the navbarBrand paddingY so the navbarBrand will have the same height as navbarText and navLink


exports.navbarBrandFontSize = navbarBrandFontSize;

const navLinkHeight = _var('navLinkHeight', (0, _polished.math)(`${navbarBrandFontSize} * 1.5`)); // 1.25 * 1.5 = 1.875


exports.navLinkHeight = navLinkHeight;

const navbarBrandHeight = _var('navbarBrandHeight', (0, _polished.math)(`${fontSizeBase} * 1.5 + ${navLinkPaddingY} * 2`)); // 1 * 1.5 + .5 * 2 = 2.5


exports.navbarBrandHeight = navbarBrandHeight;

const navbarBrandPaddingY = _var('navbarBrandPaddingY', (0, _polished.math)(`(${navbarBrandHeight} - ${navLinkHeight}) / 2`)); // 2.5  1.875 = .625 // Original on old variables was .25rem;


exports.navbarBrandPaddingY = navbarBrandPaddingY;

const navbarTogglerPaddingY = _var('navbarTogglerPaddingY', '.25rem');

exports.navbarTogglerPaddingY = navbarTogglerPaddingY;

const navbarTogglerPaddingX = _var('navbarTogglerPaddingX', '.75rem');

exports.navbarTogglerPaddingX = navbarTogglerPaddingX;

const navbarTogglerFontSize = _var('navbarTogglerFontSize', fontSizeLg);

exports.navbarTogglerFontSize = navbarTogglerFontSize;

const navbarTogglerBorderRadius = _var('navbarTogglerBorderRadius', btnBorderRadius);

exports.navbarTogglerBorderRadius = navbarTogglerBorderRadius;

const navbarDarkColor = _var('navbarDarkColor', (0, _polished.rgba)(white, 0.5));

exports.navbarDarkColor = navbarDarkColor;

const navbarDarkHoverColor = _var('navbarDarkHoverColor', (0, _polished.rgba)(white, 0.75));

exports.navbarDarkHoverColor = navbarDarkHoverColor;

const navbarDarkActiveColor = _var('navbarDarkActiveColor', (0, _polished.rgba)(white, 1));

exports.navbarDarkActiveColor = navbarDarkActiveColor;

const navbarDarkDisabledColor = _var('navbarDarkDisabledColor', (0, _polished.rgba)(white, 0.25));

exports.navbarDarkDisabledColor = navbarDarkDisabledColor;

const navbarDarkTogglerIconBg = _var('navbarDarkTogglerIconBg', `url("data:image/svg+xml;charset=utf8,%3Csvg viewBox='0 0 30 30' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath stroke=${navbarDarkColor}' stroke-width='2' stroke-linecap='round' stroke-miterlimit='10' d='M4 7h22M4 15h22M4 23h22'/%3E%3C/svg%3E")`.replace('#', '%23'));

exports.navbarDarkTogglerIconBg = navbarDarkTogglerIconBg;

const navbarDarkTogglerBorderColor = _var('navbarDarkTogglerBorderColor', (0, _polished.rgba)(white, 0.1));

exports.navbarDarkTogglerBorderColor = navbarDarkTogglerBorderColor;

const navbarLightColor = _var('navbarLightColor', (0, _polished.rgba)(black, 0.5));

exports.navbarLightColor = navbarLightColor;

const navbarLightHoverColor = _var('navbarLightHoverColor', (0, _polished.rgba)(black, 0.7));

exports.navbarLightHoverColor = navbarLightHoverColor;

const navbarLightActiveColor = _var('navbarLightActiveColor', (0, _polished.rgba)(black, 0.9));

exports.navbarLightActiveColor = navbarLightActiveColor;

const navbarLightDisabledColor = _var('navbarLightDisabledColor', (0, _polished.rgba)(black, 0.3));

exports.navbarLightDisabledColor = navbarLightDisabledColor;

const navbarLightTogglerIconBg = _var('navbarLightTogglerIconBg', `url("data:image/svg+xml;charset=utf8,%3Csvg viewBox='0 0 30 30' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath stroke='${navbarLightColor}' stroke-width='2' stroke-linecap='round' stroke-miterlimit='10' d='M4 7h22M4 15h22M4 23h22'/%3E%3C/svg%3E")`.replace('#', '%23'));

exports.navbarLightTogglerIconBg = navbarLightTogglerIconBg;

const navbarLightTogglerBorderColor = _var('navbarLightTogglerBorderColor', (0, _polished.rgba)(black, 0.1)); // Pagination


exports.navbarLightTogglerBorderColor = navbarLightTogglerBorderColor;

const paginationPaddingY = _var('paginationPaddingY', '.5rem');

exports.paginationPaddingY = paginationPaddingY;

const paginationPaddingX = _var('paginationPaddingX', '.75rem');

exports.paginationPaddingX = paginationPaddingX;

const paginationPaddingYSm = _var('paginationPaddingYSm', '.25rem');

exports.paginationPaddingYSm = paginationPaddingYSm;

const paginationPaddingXSm = _var('paginationPaddingXSm', '.5rem');

exports.paginationPaddingXSm = paginationPaddingXSm;

const paginationPaddingYLg = _var('paginationPaddingYLg', '.75rem');

exports.paginationPaddingYLg = paginationPaddingYLg;

const paginationPaddingXLg = _var('paginationPaddingXLg', '1.5rem');

exports.paginationPaddingXLg = paginationPaddingXLg;

const paginationLineHeight = _var('paginationLineHeight', '1.25');

exports.paginationLineHeight = paginationLineHeight;

const paginationIconSize = _var('paginationIconSize', '1.25rem');

exports.paginationIconSize = paginationIconSize;

const paginationIconSizeSm = _var('paginationIconSizeSm', '1rem');

exports.paginationIconSizeSm = paginationIconSizeSm;

const paginationIconSizeLg = _var('paginationIconSizeLg', '1.875rem');

exports.paginationIconSizeLg = paginationIconSizeLg;

const paginationColor = _var('paginationColor', bodyColor);

exports.paginationColor = paginationColor;

const paginationBg = _var('paginationBg', 'transparent');

exports.paginationBg = paginationBg;

const paginationBorderWidth = _var('paginationBorderWidth', borderWidth);

exports.paginationBorderWidth = paginationBorderWidth;

const paginationBorderColor = _var('paginationBorderColor', '#ddd');

exports.paginationBorderColor = paginationBorderColor;

const paginationHoverColor = _var('paginationHoverColor', (0, _palette.default)('primary'));

exports.paginationHoverColor = paginationHoverColor;

const paginationHoverBg = _var('paginationHoverBg', 'transparent');

exports.paginationHoverBg = paginationHoverBg;

const paginationHoverBorderColor = _var('paginationHoverBorderColor', '#ddd');

exports.paginationHoverBorderColor = paginationHoverBorderColor;

const paginationActiveColor = _var('paginationActiveColor', (0, _palette.default)('primary', 'base', 'contrast'));

exports.paginationActiveColor = paginationActiveColor;

const paginationActiveBg = _var('paginationActiveBg', (0, _palette.default)('primary'));

exports.paginationActiveBg = paginationActiveBg;

const paginationActiveBorderColor = _var('paginationActiveBorderColor', (0, _functions.themeColor)('primary', themeColors));

exports.paginationActiveBorderColor = paginationActiveBorderColor;

const paginationDisabledColor = _var('paginationDisabledColor', (0, _palette.default)('gray'));

exports.paginationDisabledColor = paginationDisabledColor;

const paginationDisabledBg = _var('paginationDisabledBg', 'transparent');

exports.paginationDisabledBg = paginationDisabledBg;

const paginationDisabledBorderColor = _var('paginationDisabledBorderColor', '#ddd');

exports.paginationDisabledBorderColor = paginationDisabledBorderColor;

const paginationDisabledBorder = _var('paginationDisabledBorder', 'transparent'); // Cards


exports.paginationDisabledBorder = paginationDisabledBorder;

const cardSpacerY = _var('cardSpacerY', '.75rem');

exports.cardSpacerY = cardSpacerY;

const cardSpacerX = _var('cardSpacerX', '1.25rem');

exports.cardSpacerX = cardSpacerX;

const cardBorderWidth = _var('cardBorderWidth', borderWidth);

exports.cardBorderWidth = cardBorderWidth;

const cardBorderRadius = _var('cardBorderRadius', borderRadius);

exports.cardBorderRadius = cardBorderRadius;

const cardBorderRadiusInner = _var('cardBorderRadiusInner', '0');

exports.cardBorderRadiusInner = cardBorderRadiusInner;

const cardBorder = _var('cardBorder', `1px solid ${(0, _palette.default)('product')}`);

exports.cardBorder = cardBorder;

const cardBorderColor = _var('cardBorderColor', (0, _palette.default)('product'));

exports.cardBorderColor = cardBorderColor;

const cardInnerBorderRadius = _var('cardInnerBorderRadius', `calc(${cardBorderRadius} - ${cardBorderWidth})`);

exports.cardInnerBorderRadius = cardInnerBorderRadius;

const cardCapBg = _var('cardCapBg', (0, _polished.rgba)(black, 0.03));

exports.cardCapBg = cardCapBg;

const cardBg = _var('cardBg', (0, _palette.default)('white'));

exports.cardBg = cardBg;

const cardBlockX = _var('cardBlockX', '1.25rem');

exports.cardBlockX = cardBlockX;

const cardBlockY = _var('cardBlockY', '1.25rem');

exports.cardBlockY = cardBlockY;

const cardShadowSize = _var('cardShadowSize', '.25rem');

exports.cardShadowSize = cardShadowSize;

const cardTitleFontSize = _var('cardTitleFontSize', 'inherit');

exports.cardTitleFontSize = cardTitleFontSize;

const cardTitleAlign = _var('cardTitleAlign', 'center');

exports.cardTitleAlign = cardTitleAlign;

const cardTitleTransform = _var('cardTitleTransform', 'none');

exports.cardTitleTransform = cardTitleTransform;

const cardImgOverlayPadding = _var('cardImgOverlayPadding', '1.25rem');

exports.cardImgOverlayPadding = cardImgOverlayPadding;

const cardGroupMargin = _var('cardGroupMargin', 'calc(${gridGutterWidth} / 2)'); // cardDeckMargin:                  cardGroupMargin;


exports.cardGroupMargin = cardGroupMargin;

const cardDeckMargin = _var('cardDeckMargin', '.625rem'); // ++


exports.cardDeckMargin = cardDeckMargin;

const cardColumnsCount = _var('cardColumnsCount', '3');

exports.cardColumnsCount = cardColumnsCount;

const cardColumnsGap = _var('cardColumnsGap', '1.25rem');

exports.cardColumnsGap = cardColumnsGap;

const cardColumnsMargin = _var('cardColumnsMargin', cardSpacerY); // Tooltips


exports.cardColumnsMargin = cardColumnsMargin;

const tooltipFontSize = _var('tooltipFontSize', modularScales.ms1);

exports.tooltipFontSize = tooltipFontSize;

const tooltipMaxWidth = _var('tooltipMaxWidth', '22rem');

exports.tooltipMaxWidth = tooltipMaxWidth;

const tooltipColor = _var('tooltipColor', (0, _palette.default)('gray', 'dark', 'contrast'));

exports.tooltipColor = tooltipColor;

const tooltipBg = _var('tooltipBg', (0, _palette.default)('gray', 'dark'));

exports.tooltipBg = tooltipBg;

const tooltipBorderRadius = _var('tooltipBorderRadius', borderRadius);

exports.tooltipBorderRadius = tooltipBorderRadius;

const tooltipOpacity = _var('tooltipOpacity', 1);

exports.tooltipOpacity = tooltipOpacity;

const tooltipInnerPadding = _var('tooltipInnerPadding', '1.25rem');

exports.tooltipInnerPadding = tooltipInnerPadding;

const tooltipMargin = _var('tooltipMargin', '.25rem');

exports.tooltipMargin = tooltipMargin;

const tooltipArrowWidth = _var('tooltipArrowWidth', '9px'); // border width for arrow tip


exports.tooltipArrowWidth = tooltipArrowWidth;

const tooltipArrowHeight = _var('tooltipArrowHeight', '.4rem');

exports.tooltipArrowHeight = tooltipArrowHeight;

const tooltipArrowColor = _var('tooltipArrowColor', tooltipBg);

exports.tooltipArrowColor = tooltipArrowColor;

const tooltipArrowOuterWidth = _var('tooltipArrowOuterWidth', (0, _polished.math)(`${tooltipArrowWidth} + 1`));

exports.tooltipArrowOuterWidth = tooltipArrowOuterWidth;

const tooltipArrowOuterColor = _var('tooltipArrowOuterColor', tooltipBg);

exports.tooltipArrowOuterColor = tooltipArrowOuterColor;

const tooltipArrowScaleX = _var('tooltipArrowScaleX', 'scaleX(1.6)');

exports.tooltipArrowScaleX = tooltipArrowScaleX;

const tooltipArrowScaleY = _var('tooltipArrowScaleY', 'scaleY(1.6)');

exports.tooltipArrowScaleY = tooltipArrowScaleY;

const tooltipArrowPosition = _var('tooltipArrowPosition', `- ${(0, _polished.math)(`${tooltipArrowOuterWidth} / 2`)}`);

exports.tooltipArrowPosition = tooltipArrowPosition;

const tooltipArrowOffset = _var('tooltipArrowOffset', (0, _polished.math)(`(${tooltipArrowOuterWidth} * 1.6) + 30px`));

exports.tooltipArrowOffset = tooltipArrowOffset;

const tooltipPadding = _var('tooltipPadding', tooltipArrowWidth);

exports.tooltipPadding = tooltipPadding;

const tooltipBorder = _var('tooltipBorder', tooltipBg);

exports.tooltipBorder = tooltipBorder;

const tooltipBorderWidth = _var('tooltipBorderWidth', '1px');

exports.tooltipBorderWidth = tooltipBorderWidth;

const tooltipInverseColor = _var('tooltipInverseColor', bodyColor);

exports.tooltipInverseColor = tooltipInverseColor;

const tooltipInverseBg = _var('tooltipInverseBg', (0, _palette.default)('white'));

exports.tooltipInverseBg = tooltipInverseBg;

const tooltipInverseBorder = _var('tooltipInverseBorder', (0, _palette.default)('gray', 'light'));

exports.tooltipInverseBorder = tooltipInverseBorder;

const tooltipInverseArrowColor = _var('tooltipInverseArrowColor', tooltipInverseBg);

exports.tooltipInverseArrowColor = tooltipInverseArrowColor;

const tooltipInverseArrowOuterColor = _var('tooltipInverseArrowOuterColor', (0, _palette.default)('gray', 'light')); // Modals
// Padding applied to the modal body


exports.tooltipInverseArrowOuterColor = tooltipInverseArrowOuterColor;

const modalInnerPadding = _var('modalInnerPadding', remSpacer3);

exports.modalInnerPadding = modalInnerPadding;

const modalInnerPaddingD = _var('modalInnerPaddingD', `calc(${remSpacer} * 4)`); // 2rem


exports.modalInnerPaddingD = modalInnerPaddingD;

const modalTitlePadding = _var('modalTitlePadding', `${remSpacer4} ${modalInnerPadding} ${remSpacer2}`); // ++


exports.modalTitlePadding = modalTitlePadding;

const modalTitlePaddingD = _var('modalTitlePaddingD', `${remSpacer5} ${modalInnerPaddingD} ${remSpacer3}`);

exports.modalTitlePaddingD = modalTitlePaddingD;

const modalNavPadding = _var('modalNavPadding', `0 ${modalInnerPadding} ${modalInnerPadding}`);

exports.modalNavPadding = modalNavPadding;

const modalNavPaddingD = _var('modalNavPaddingD', `0 ${modalInnerPaddingD} ${modalInnerPadding}`);

exports.modalNavPaddingD = modalNavPaddingD;

const modalBodyPaddingD = _var('modalBodyPaddingD', `0 ${modalInnerPaddingD} ${remSpacer5}`);

exports.modalBodyPaddingD = modalBodyPaddingD;

const modalBodyPadding = _var('modalBodyPadding', `0 ${modalInnerPadding} ${remSpacer4}`);

exports.modalBodyPadding = modalBodyPadding;

const modalFooterPadding = _var('modalFooterPadding', `0 ${modalInnerPadding} ${remSpacer4}`);

exports.modalFooterPadding = modalFooterPadding;

const modalFooterPaddingD = _var('modalFooterPaddingD', `0 ${modalInnerPaddingD} ${remSpacer4}`);

exports.modalFooterPaddingD = modalFooterPaddingD;

const modalContentBg = _var('modalContentBg', (0, _palette.default)('white'));

exports.modalContentBg = modalContentBg;

const modalContentBorderColor = _var('modalContentBorderColor', grayDark);

exports.modalContentBorderColor = modalContentBorderColor;

const modalBackdropBg = _var('modalBackdropBg', (0, _polished.rgba)((0, _palette.default)('black', 'dark'), 0.1));

exports.modalBackdropBg = modalBackdropBg;

const modalBackdropOpacity = _var('modalBackdropOpacity', '1');

exports.modalBackdropOpacity = modalBackdropOpacity;

const modalLg = _var('modalLg', 'auto');

exports.modalLg = modalLg;

const modalSm = _var('modalSm', 'auto');

exports.modalSm = modalSm;

const modalFixedZ = _var('modalFixedZ', '1');

exports.modalFixedZ = modalFixedZ;

const modalTransition = _var('modalTransition', `transform .3s ease-out`); // Grid (cards, modals)
//


exports.modalTransition = modalTransition;

const fixedColSm = _var('fixedColSm', (0, _polished.math)(`(${containerMaxWidths.sm} - (${gridGutterWidth} * 12)) / 12`));

exports.fixedColSm = fixedColSm;

const fixedColMd = _var('fixedColMd', (0, _polished.math)(`(${containerMaxWidths.md} - (${gridGutterWidth} * 12)) / 12`));

exports.fixedColMd = fixedColMd;

const fixedColLg = _var('fixedColLg', (0, _polished.math)(`(${containerMaxWidths.lg} - (${gridGutterWidth} * 12)) / 12`));

exports.fixedColLg = fixedColLg;

const fixedColXl = _var('fixedColXl', (0, _polished.math)(`(${containerMaxWidths.xl} - (${gridGutterWidth} * 12)) / 12`)); // Alerts
//
// Define alert colors, border radius, and padding.


exports.fixedColXl = fixedColXl;

const alertPadding = _var('alertPadding', '1.25rem');

exports.alertPadding = alertPadding;

const alertPaddingY = _var('alertPaddingY', alertPadding);

exports.alertPaddingY = alertPaddingY;

const alertPaddingX = _var('alertPaddingX', '1rem');

exports.alertPaddingX = alertPaddingX;

const alertMarginBottom = _var('alertMarginBottom', '1rem');

exports.alertMarginBottom = alertMarginBottom;

const alertBorderRadius = _var('alertBorderRadius', borderRadius);

exports.alertBorderRadius = alertBorderRadius;

const alertLinkFontWeight = _var('alertLinkFontWeight', fontWeightNormal);

exports.alertLinkFontWeight = alertLinkFontWeight;

const alertActionPadding = _var('alertActionPadding', '3rem');

exports.alertActionPadding = alertActionPadding;

const alertIconPadding = _var('alertIconPadding', '3.5rem');

exports.alertIconPadding = alertIconPadding;

const alertIconSize = _var('alertIconSize', '1.5rem');

exports.alertIconSize = alertIconSize;

const alertBorderWidth = _var('alertBorderWidth', '.125rem');

exports.alertBorderWidth = alertBorderWidth;

const alertOfferBg = _var('alertOfferBg', (0, _palette.default)('primary', 'highlight'));

exports.alertOfferBg = alertOfferBg;

const alertOfferText = _var('alertOfferText', (0, _palette.default)('primary', 'highlight', 'contrast'));

exports.alertOfferText = alertOfferText;

const alertOfferBorder = _var('alertOfferBorder', (0, _palette.default)('primary', 'highlight'));

exports.alertOfferBorder = alertOfferBorder;

const alertOfferToggle = _var('alertOfferToggle', alertOfferBorder);

exports.alertOfferToggle = alertOfferToggle;

const alertOfferToggleIcon = _var('alertOfferToggleIcon', (0, _palette.default)('primary', 'highlight', 'contrast'));

exports.alertOfferToggleIcon = alertOfferToggleIcon;

const alertSuccessBg = _var('alertSuccessBg', (0, _palette.default)('success', 'highlight'));

exports.alertSuccessBg = alertSuccessBg;

const alertSuccessText = _var('alertSuccessText', (0, _palette.default)('success', 'highlight', 'contrast'));

exports.alertSuccessText = alertSuccessText;

const alertSuccessBorder = _var('alertSuccessBorder', (0, _palette.default)('success', 'highlight'));

exports.alertSuccessBorder = alertSuccessBorder;

const alertSuccessToggle = _var('alertSuccessToggle', alertSuccessBorder);

exports.alertSuccessToggle = alertSuccessToggle;

const alertSuccessToggleIcon = _var('alertSuccessToggleIcon', (0, _palette.default)('success', 'highlight', 'contrast'));

exports.alertSuccessToggleIcon = alertSuccessToggleIcon;

const alertInfoBg = _var('alertInfoBg', (0, _palette.default)('info', 'highlight'));

exports.alertInfoBg = alertInfoBg;

const alertInfoText = _var('alertInfoText', (0, _palette.default)('info', 'highlight', 'contrast'));

exports.alertInfoText = alertInfoText;

const alertInfoBorder = _var('alertInfoBorder', (0, _palette.default)('info', 'highlight'));

exports.alertInfoBorder = alertInfoBorder;

const alertInfoToggle = _var('alertInfoToggle', alertInfoBorder);

exports.alertInfoToggle = alertInfoToggle;

const alertInfoToggleIcon = _var('alertInfoToggleIcon', (0, _palette.default)('info', 'highlight', 'contrast'));

exports.alertInfoToggleIcon = alertInfoToggleIcon;

const alertWarningBg = _var('alertWarningBg', (0, _palette.default)('warning', 'highlight'));

exports.alertWarningBg = alertWarningBg;

const alertWarningText = _var('alertWarningText', (0, _palette.default)('warning', 'highlight', 'contrast'));

exports.alertWarningText = alertWarningText;

const alertWarningBorder = _var('alertWarningBorder', (0, _palette.default)('warning', 'highlight'));

exports.alertWarningBorder = alertWarningBorder;

const alertWarningToggle = _var('alertWarningToggle', alertWarningBorder);

exports.alertWarningToggle = alertWarningToggle;

const alertWarningToggleIcon = _var('alertWarningToggleIcon', (0, _palette.default)('warning', 'highlight', 'contrast'));

exports.alertWarningToggleIcon = alertWarningToggleIcon;

const alertDangerBg = _var('alertDangerBg', (0, _palette.default)('danger', 'highlight'));

exports.alertDangerBg = alertDangerBg;

const alertDangerText = _var('alertDangerText', (0, _palette.default)('danger', 'highlight', 'contrast'));

exports.alertDangerText = alertDangerText;

const alertDangerBorder = _var('alertDangerBorder', (0, _palette.default)('danger', 'highlight'));

exports.alertDangerBorder = alertDangerBorder;

const alertDangerToggle = _var('alertDangerToggle', alertDangerBorder);

exports.alertDangerToggle = alertDangerToggle;

const alertDangerToggleIcon = _var('alertDangerToggleIcon', (0, _palette.default)('danger', 'highlight', 'contrast'));

exports.alertDangerToggleIcon = alertDangerToggleIcon;

const alertNoteBg = _var('alertNoteBg', (0, _palette.default)('secondary', 'pastel'));

exports.alertNoteBg = alertNoteBg;

const alertNoteText = _var('alertNoteText', (0, _palette.default)('secondary', 'pastel', 'contrast'));

exports.alertNoteText = alertNoteText;

const alertNoteBorder = _var('alertNoteBorder', (0, _palette.default)('secondary', 'base'));

exports.alertNoteBorder = alertNoteBorder;

const alertNoteToggle = _var('alertNoteToggle', alertNoteBorder);

exports.alertNoteToggle = alertNoteToggle;

const alertNoteToggleIcon = _var('alertNoteToggleIcon', (0, _palette.default)('secondary', 'base', 'contrast'));

exports.alertNoteToggleIcon = alertNoteToggleIcon;

const alertC3Bg = _var('alertC3Bg', (0, _palette.default)('feature', 'pastel'));

exports.alertC3Bg = alertC3Bg;

const alertC3Text = _var('alertC3Text', (0, _palette.default)('feature', 'pastel', 'contrast'));

exports.alertC3Text = alertC3Text;

const alertC3Border = _var('alertC3Border', (0, _palette.default)('feature', 'base'));

exports.alertC3Border = alertC3Border;

const alertC3Toggle = _var('alertC3Toggle', alertC3Border);

exports.alertC3Toggle = alertC3Toggle;

const alertC3ToggleIcon = _var('alertC3ToggleIcon', (0, _palette.default)('feature', 'base', 'contrast')); // Progress bars


exports.alertC3ToggleIcon = alertC3ToggleIcon;

const progressHeight = _var('progressHeight', '1rem');

exports.progressHeight = progressHeight;

const progressFontSize = _var('progressFontSize', '.75rem');

exports.progressFontSize = progressFontSize;

const progressBg = _var('progressBg', (0, _palette.default)('product', 'dark'));

exports.progressBg = progressBg;

const progressBorderRadius = _var('progressBorderRadius', borderRadius);

exports.progressBorderRadius = progressBorderRadius;

const progressBoxShadow = _var('progressBoxShadow', `inset 0 .1rem .1rem ${(0, _polished.rgba)(black, 0.1)}`);

exports.progressBoxShadow = progressBoxShadow;

const progressBarColor = _var('progressBarColor', white);

exports.progressBarColor = progressBarColor;

const progressBarBg = _var('progressBarBg', (0, _palette.default)('primary-o'));

exports.progressBarBg = progressBarBg;

const progressBarAnimationTiming = _var('progressBarAnimationTiming', '1s linear infinite');

exports.progressBarAnimationTiming = progressBarAnimationTiming;

const progressBarTransition = _var('progressBarTransition', 'width .6s ease');

exports.progressBarTransition = progressBarTransition;

const progressY = _var('progressY', '1.25rem');

exports.progressY = progressY;

const progressBarStripeAngle = _var('progressBarStripeAngle', '135deg');

exports.progressBarStripeAngle = progressBarStripeAngle;

const progressBarStripeSize = _var('progressBarStripeSize', '1.5rem');

exports.progressBarStripeSize = progressBarStripeSize;

const progressBarStripeColor = _var('progressBarStripeColor', (0, _polished.transparentize)(0.9, (0, _palette.default)('black', 'dark')));

exports.progressBarStripeColor = progressBarStripeColor;

const progressBarHeight = _var('progressBarHeight', '1.5rem');

exports.progressBarHeight = progressBarHeight;

const progressBarBorderRadius = _var('progressBarBorderRadius', '.75rem');

exports.progressBarBorderRadius = progressBarBorderRadius;

const progressBarSmHeight = _var('progressBarSmHeight', '.75rem');

exports.progressBarSmHeight = progressBarSmHeight;

const progressBarSmBorderRadius = _var('progressBarSmBorderRadius', borderRadiusLg);

exports.progressBarSmBorderRadius = progressBarSmBorderRadius;

const progressBarXsHeight = _var('progressBarXsHeight', '.375rem');

exports.progressBarXsHeight = progressBarXsHeight;

const progressBarXsBorderRadius = _var('progressBarXsBorderRadius', borderRadiusSm);

exports.progressBarXsBorderRadius = progressBarXsBorderRadius;

const progressCircleXsSize = _var('progressCircleXsSize', '3.25rem');

exports.progressCircleXsSize = progressCircleXsSize;

const progressCircleSmSize = _var('progressCircleSmSize', '6.25rem');

exports.progressCircleSmSize = progressCircleSmSize;

const progressCircleMdSize = _var('progressCircleMdSize', '9.5rem');

exports.progressCircleMdSize = progressCircleMdSize;

const progressCircleLgSize = _var('progressCircleLgSize', '15.5rem'); // List group


exports.progressCircleLgSize = progressCircleLgSize;

const listGroupBg = _var('listGroupBg', 'white');

exports.listGroupBg = listGroupBg;

const listGroupBorderColor = _var('listGroupBorderColor', (0, _polished.rgba)(black, 0.125));

exports.listGroupBorderColor = listGroupBorderColor;

const listGroupBorderWidth = _var('listGroupBorderWidth', borderWidth);

exports.listGroupBorderWidth = listGroupBorderWidth;

const listGroupBorderRadius = _var('listGroupBorderRadius', borderRadius);

exports.listGroupBorderRadius = listGroupBorderRadius;

const listGroupItemPaddingY = _var('listGroupItemPaddingY', '.75rem');

exports.listGroupItemPaddingY = listGroupItemPaddingY;

const listGroupItemPaddingX = _var('listGroupItemPaddingX', '1.25rem');

exports.listGroupItemPaddingX = listGroupItemPaddingX;

const listGroupHoverBg = _var('listGroupHoverBg', gray100);

exports.listGroupHoverBg = listGroupHoverBg;

const listGroupActiveColor = _var('listGroupActiveColor', componentActiveColor);

exports.listGroupActiveColor = listGroupActiveColor;

const listGroupActiveBg = _var('listGroupActiveBg', componentActiveBg);

exports.listGroupActiveBg = listGroupActiveBg;

const listGroupActiveBorderColor = _var('listGroupActiveBorderColor', listGroupActiveBg);

exports.listGroupActiveBorderColor = listGroupActiveBorderColor;

const listGroupBorder = _var('listGroupBorder', (0, _palette.default)('gray', 'light'));

exports.listGroupBorder = listGroupBorder;

const listGroupDisabledColor = _var('listGroupDisabledColor', (0, _palette.default)('gray'));

exports.listGroupDisabledColor = listGroupDisabledColor;

const listGroupDisabledBg = _var('listGroupDisabledBg', listGroupBg);

exports.listGroupDisabledBg = listGroupDisabledBg;

const listGroupActionColor = _var('listGroupActionColor', gray700);

exports.listGroupActionColor = listGroupActionColor;

const listGroupActionHoverColor = _var('listGroupActionHoverColor', listGroupActionColor);

exports.listGroupActionHoverColor = listGroupActionHoverColor;

const listGroupActionActiveColor = _var('listGroupActionActiveColor', bodyColor);

exports.listGroupActionActiveColor = listGroupActionActiveColor;

const listGroupActionActiveBg = _var('listGroupActionActiveBg', gray200);

exports.listGroupActionActiveBg = listGroupActionActiveBg;

const listGroupActiveTextColor = _var('listGroupActiveTextColor', (0, _polished.desaturate)('0.55', (0, _polished.lighten)('0.55', componentActiveBg))); // Image thumbnails


exports.listGroupActiveTextColor = listGroupActiveTextColor;

const thumbnailPadding = _var('thumbnailPadding', '.25rem');

exports.thumbnailPadding = thumbnailPadding;

const thumbnailBg = _var('thumbnailBg', bodyBg);

exports.thumbnailBg = thumbnailBg;

const thumbnailBorderWidth = _var('thumbnailBorderWidth', borderWidth);

exports.thumbnailBorderWidth = thumbnailBorderWidth;

const thumbnailBorderColor = _var('thumbnailBorderColor', '#ddd');

exports.thumbnailBorderColor = thumbnailBorderColor;

const thumbnailBorderRadius = _var('thumbnailBorderRadius', borderRadius);

exports.thumbnailBorderRadius = thumbnailBorderRadius;

const thumbnailBoxShadow = _var('thumbnailBoxShadow', `0 1px 2px ${(0, _polished.rgba)(black, 0.075)}`);

exports.thumbnailBoxShadow = thumbnailBoxShadow;

const thumbnailTransition = _var('thumbnailTransition', 'all .2s ease-in-out'); // Figures


exports.thumbnailTransition = thumbnailTransition;

const figureCaptionFontSize = _var('figureCaptionFontSize', '90%');

exports.figureCaptionFontSize = figureCaptionFontSize;

const figureCaptionColor = _var('figureCaptionColor', gray600); // Breadcrumbs


exports.figureCaptionColor = figureCaptionColor;

const breadcrumbPaddingY = _var('breadcrumbPaddingY', '0');

exports.breadcrumbPaddingY = breadcrumbPaddingY;

const breadcrumbPaddingX = _var('breadcrumbPaddingX', '0');

exports.breadcrumbPaddingX = breadcrumbPaddingX;

const breadcrumbItemPadding = _var('breadcrumbItemPadding', remSpacer2);

exports.breadcrumbItemPadding = breadcrumbItemPadding;

const breadcrumbIconMargin = _var('breadcrumbIconMargin', '.1875rem');

exports.breadcrumbIconMargin = breadcrumbIconMargin;

const breadcrumbMarginBottom = _var('breadcrumbMarginBottom', remSpacer2);

exports.breadcrumbMarginBottom = breadcrumbMarginBottom;

const breadcrumbBg = _var('breadcrumbBg', 'transparent');

exports.breadcrumbBg = breadcrumbBg;

const breadcrumbDividerColor = _var('breadcrumbDividerColor', (0, _palette.default)('gray'));

exports.breadcrumbDividerColor = breadcrumbDividerColor;

const breadcrumbActiveColor = _var('breadcrumbActiveColor', (0, _palette.default)('gray'));

exports.breadcrumbActiveColor = breadcrumbActiveColor;

const breadcrumbDivider = _var('breadcrumbDivider', '/');

exports.breadcrumbDivider = breadcrumbDivider;

const breadcrumbBorderRadius = _var('breadcrumbBorderRadius', 0); // Media objects // ++


exports.breadcrumbBorderRadius = breadcrumbBorderRadius;

const mediaHeadingMarginBottom = _var('mediaHeadingMarginBottom', '.5rem'); // ++


exports.mediaHeadingMarginBottom = mediaHeadingMarginBottom;

const mediaAlignmentPaddingX = _var('mediaAlignmentPaddingX', '.625rem'); // ++
// Close


exports.mediaAlignmentPaddingX = mediaAlignmentPaddingX;

const closeFontSize = _var('closeFontSize', (0, _polished.math)(`${fontSizeBase} * 1.5`));

exports.closeFontSize = closeFontSize;

const closeFontWeight = _var('closeFontWeight', fontWeightBold);

exports.closeFontWeight = closeFontWeight;

const closeColor = _var('closeColor', black);

exports.closeColor = closeColor;

const closeTextShadow = _var('closeTextShadow', 'none'); // Code


exports.closeTextShadow = closeTextShadow;

const codeFontSize = _var('codeFontSize', `90%`);

exports.codeFontSize = codeFontSize;

const codePaddingY = _var('codePaddingY', `.2rem`);

exports.codePaddingY = codePaddingY;

const codePaddingX = _var('codePaddingX', `.4rem`);

exports.codePaddingX = codePaddingX;

const codeColor = _var('codeColor', bodyColor);

exports.codeColor = codeColor;

const codeBg = _var('codeBg', (0, _palette.default)('gray', 'faint'));

exports.codeBg = codeBg;

const kbdColor = _var('kbdColor', white);

exports.kbdColor = kbdColor;

const kbdBg = _var('kbdBg', gray900);

exports.kbdBg = kbdBg;

const preBg = _var('preBg', codeBg);

exports.preBg = preBg;

const preColor = _var('preColor', codeColor);

exports.preColor = preColor;

const preScrollableMaxHeight = _var('preScrollableMaxHeight', '21.25rem'); // Slider Variables


exports.preScrollableMaxHeight = preScrollableMaxHeight;

const sliderThumbColor = _var('sliderThumbColor', (0, _palette.default)('white'));

exports.sliderThumbColor = sliderThumbColor;

const sliderThumbBorderColor = _var('sliderThumbBorderColor', (0, _palette.default)('black'));

exports.sliderThumbBorderColor = sliderThumbBorderColor;

const sliderLabelColor = _var('sliderLabelColor', brandBlack);

exports.sliderLabelColor = sliderLabelColor;

const sliderLeftIconSize = _var('sliderLeftIconSize', '1.125rem');

exports.sliderLeftIconSize = sliderLeftIconSize;

const sliderRightIconSize = _var('sliderRightIconSize', '1.25rem'); // Wizard
//


exports.sliderRightIconSize = sliderRightIconSize;

const wizCircleSize = _var('wizCircleSize', '2rem');

exports.wizCircleSize = wizCircleSize;

const wizNumSize = _var('wizNumSize', '1.25em');

exports.wizNumSize = wizNumSize;

const wizLineSize = _var('wizLineSize', '.5rem'); // Accordion Variables


exports.wizLineSize = wizLineSize;

const uxAccordionBasePadding = _var('uxAccordionBasePadding', '2rem');

exports.uxAccordionBasePadding = uxAccordionBasePadding;

const uxAccordionBaseMargin = _var('uxAccordionBaseMargin', '2rem 2.5rem'); // Arrow font size


exports.uxAccordionBaseMargin = uxAccordionBaseMargin;

const dropArrowSize = _var('dropArrowSize', '1rem');

exports.dropArrowSize = dropArrowSize;

const dropArrowSizeLg = _var('dropArrowSizeLg', '1.375rem'); // Pivots


exports.dropArrowSizeLg = dropArrowSizeLg;

const pivotX = _var('pivotX', '1.25rem');

exports.pivotX = pivotX;

const pivotY = _var('pivotY', '1.5rem');

exports.pivotY = pivotY;

const pivotChevron = _var('pivotChevron', '1.5rem');

exports.pivotChevron = pivotChevron;

const pivotGraphic = _var('pivotGraphic', '2rem');

exports.pivotGraphic = pivotGraphic;

const pivotGraphicLeft = _var('pivotGraphicLeft', '1rem'); // Spinner


exports.pivotGraphicLeft = pivotGraphicLeft;

const uxSpinnerSmSize = _var('uxSpinnerSmSize', '1rem');

exports.uxSpinnerSmSize = uxSpinnerSmSize;

const uxSpinnerMdSize = _var('uxSpinnerMdSize', '2.25rem');

exports.uxSpinnerMdSize = uxSpinnerMdSize;

const uxSpinnerLgSize = _var('uxSpinnerLgSize', '4.5rem');

exports.uxSpinnerLgSize = uxSpinnerLgSize;

const uxSpinnerSmStrokeWidth = _var('uxSpinnerSmStrokeWidth', '2');

exports.uxSpinnerSmStrokeWidth = uxSpinnerSmStrokeWidth;

const uxSpinnerMdStrokeWidth = _var('uxSpinnerMdStrokeWidth', '4');

exports.uxSpinnerMdStrokeWidth = uxSpinnerMdStrokeWidth;

const uxSpinnerLgStrokeWidth = _var('uxSpinnerLgStrokeWidth', '6');

exports.uxSpinnerLgStrokeWidth = uxSpinnerLgStrokeWidth;

const uxSpinnerDuration = _var('uxSpinnerDuration', '1.2s'); // BoxShadows


exports.uxSpinnerDuration = uxSpinnerDuration;

const shadow1Size = _var('shadow1Size', '1px');

exports.shadow1Size = shadow1Size;

const shadow1Opacity = _var('shadow1Opacity', 0.25);

exports.shadow1Opacity = shadow1Opacity;

const shadow1Blur = _var('shadow1Blur', '6px');

exports.shadow1Blur = shadow1Blur;

const shadow1Spread = _var('shadow1Spread', '0');

exports.shadow1Spread = shadow1Spread;

const shadow2Size = _var('shadow2Size', ' 1px');

exports.shadow2Size = shadow2Size;

const shadow2Opacity = _var('shadow2Opacity', 0.3);

exports.shadow2Opacity = shadow2Opacity;

const shadow2Blur = _var('shadow2Blur', '8px');

exports.shadow2Blur = shadow2Blur;

const shadow2Spread = _var('shadow2Spread', '0');

exports.shadow2Spread = shadow2Spread;

const shadow3Size = _var('shadow3Size', '4px');

exports.shadow3Size = shadow3Size;

const shadow3Opacity = _var('shadow3Opacity', 0.4);

exports.shadow3Opacity = shadow3Opacity;

const shadow3Blur = _var('shadow3Blur', '12px');

exports.shadow3Blur = shadow3Blur;

const shadow3Spread = _var('shadow3Spread', '0');

exports.shadow3Spread = shadow3Spread;

const shadow4Size = _var('shadow4Size', '6px');

exports.shadow4Size = shadow4Size;

const shadow4Opacity = _var('shadow4Opacity', 0.5);

exports.shadow4Opacity = shadow4Opacity;

const shadow4Blur = _var('shadow4Blur', '20px');

exports.shadow4Blur = shadow4Blur;

const shadow4Spread = _var('shadow4Spread', '0'); // Toggle variables


exports.shadow4Spread = shadow4Spread;

const toggleTransition = _var('toggleTransition', '100ms ease-in'); // Handle transition


exports.toggleTransition = toggleTransition;

const toggleBgTransition = _var('toggleBgTransition', '100ms ease-out'); // Background transition
// Toggle


exports.toggleBgTransition = toggleBgTransition;

const toggleHandleSize = _var('toggleHandleSize', '1.25rem');

exports.toggleHandleSize = toggleHandleSize;

const toggleBorderRadius = _var('toggleBorderRadius', '1rem');

exports.toggleBorderRadius = toggleBorderRadius;

const toggleBgColorUnchecked = _var('toggleBgColorUnchecked', (0, _palette.default)('white'));

exports.toggleBgColorUnchecked = toggleBgColorUnchecked;

const toggleBgColorChecked = _var('toggleBgColorChecked', (0, _palette.default)('primary', 'base'));

exports.toggleBgColorChecked = toggleBgColorChecked;

const toggleBorderColorUnchecked = _var('toggleBorderColorUnchecked', (0, _palette.default)('gray', 'light'));

exports.toggleBorderColorUnchecked = toggleBorderColorUnchecked;

const toggleBorderColorChecked = _var('toggleBorderColorChecked', (0, _palette.default)('primary', 'base'));

exports.toggleBorderColorChecked = toggleBorderColorChecked;

const toggleHandleColorUnchecked = _var('toggleHandleColorUnchecked', (0, _palette.default)('gray', 'light'));

exports.toggleHandleColorUnchecked = toggleHandleColorUnchecked;

const toggleHandleColorChecked = _var('toggleHandleColorChecked', (0, _palette.default)('white'));

exports.toggleHandleColorChecked = toggleHandleColorChecked;

const toggleBtnColor = _var('toggleBtnColor', (0, _palette.default)('gray'));

exports.toggleBtnColor = toggleBtnColor;

const toggleBtnBgColor = _var('toggleBtnBgColor', (0, _palette.default)('gray', 'faint'));

exports.toggleBtnBgColor = toggleBtnBgColor;

const toggleBtnBgColorActive = _var('toggleBtnBgColorActive', (0, _palette.default)('primary'));

exports.toggleBtnBgColorActive = toggleBtnBgColorActive;

const toggleBtnBorderColor = _var('toggleBtnBorderColor', (0, _palette.default)('gray', 'light'));

exports.toggleBtnBorderColor = toggleBtnBorderColor;

const toggleBtnBorderColorActive = _var('toggleBtnBorderColorActive', (0, _palette.default)('primary')); // Stars


exports.toggleBtnBorderColorActive = toggleBtnBorderColorActive;

const starsColorChecked = _var('starsColorChecked', (0, _palette.default)('primary'));

exports.starsColorChecked = starsColorChecked;

const starsColorUnchecked = _var('starsColorUnchecked', (0, _palette.default)('grey', 'light'));

exports.starsColorUnchecked = starsColorUnchecked;

const starsIconSize = _var('starsIconSize', '1.25rem'); // Growl


exports.starsIconSize = starsIconSize;

const growlCloseIconSize = _var('growlCloseIconSize', '1.875rem'); // Focus visible a11y


exports.growlCloseIconSize = growlCloseIconSize;

const focusVisibleOutline = _var('focusVisibleOutline', `px dashed ${(0, _palette.default)('nav')}`); // Footer
//


exports.focusVisibleOutline = focusVisibleOutline;

const footerHeight = _var('footerHeight', '2.75rem'); // Search


exports.footerHeight = footerHeight;

const searchBtnIconSize = _var('searchBtnIconSize', formClearIconSize);

exports.searchBtnIconSize = searchBtnIconSize;

const searchBtnIconSizeSm = _var('searchBtnIconSizeSm', '.85rem');

exports.searchBtnIconSizeSm = searchBtnIconSizeSm;