/* eslint-disable max-statements, max-params */
import { boxShadow as boxShadowFn } from './shadows';
import { borderRadius } from './border-radius';
import { buttonGet } from '../functions/button';
import { cursorDisabled } from '../variables/_variables';
import {
  btnDisabledColorsOn,
  btnBoxShadowDisabled,
  btnBgDisabled,
  btnColorDisabled,
  btnBorderDisabled
} from '../variables/_buttons';

export function buttonVariantCustom(variant) {
  const color = buttonGet(variant, 'color');
  const background = buttonGet(variant, 'bg');
  const border = buttonGet(variant, 'border');
  const boxShadow = buttonGet(variant, 'box-shadow');
  const colorHover = buttonGet(variant, 'color-hover');
  const backgroundHover = buttonGet(variant, 'bg-hover');
  const borderHover = buttonGet(variant, 'border-hover');
  const boxShadowHover = buttonGet(variant, 'box-shadow-hover');
  const colorActive = buttonGet(variant, 'color-active');
  const backgroundActive = buttonGet(variant, 'bg-active');
  const borderActive = buttonGet(variant, 'border-active');
  const boxShadowActive = buttonGet(variant, 'box-shadow-active');
  const borderFocus = buttonGet(variant, 'border-focus');
  const textTransform = buttonGet(variant, 'text-transform');

  function getBackground() {
    if (background === 'transparent') {
      return 'background-color: transparent !important;';
    } else if (background === '#fff') {
      return 'background-color: #fff !important;';
    }
    return `background-color: ${btnBgDisabled} !important;`;
  }

  return `
    color: ${color} !important;
    background: ${background} !important;
    border-color: ${border} !important;
    ${boxShadow ? boxShadowFn(`${boxShadow} !important`) : ''}

    ${ textTransform ? `text-transform: ${textTransform}` : ''}

    &:hover {
      color: ${colorHover} !important;
      background: ${backgroundHover} !important;
      border-color: ${borderHover} !important;
      ${boxShadowHover ? boxShadow(`${boxShadowHover} !important`) : ''}
    }

    &:focus,
    &.focus {
      color: ${colorHover} !important;
      background-color: ${backgroundHover} !important;
      border-color: ${borderFocus} !important;
      ${boxShadowHover ? boxShadow(`${boxShadowHover} !important`) : ''}
    }

    &:active,
    &.active,
    .open > &.dropdown-toggle {
      color: ${colorActive} !important;
      background: ${backgroundActive} !important;
      border-color: ${borderActive} !important;
      ${boxShadowActive ? boxShadow(`${boxShadowActive} !important`) : ''}
    }

    ${btnDisabledColorsOn ?
    `&.disabled,
      &:disabled {
        &,
        &:focus,
        &:active,
        &:hover {
          color: ${btnColorDisabled} !important;
          border-color: ${btnBorderDisabled} !important;
          ${btnBoxShadowDisabled ? boxShadow(`${btnBoxShadowDisabled} !important`) : ''}
          ${ getBackground() }
        }
      }` : `
      &.disabled,
      &:disabled {
        &:focus,
        &:active,
        &:hover {
          cursor: ${cursorDisabled};
          color: ${color} !important;
          background: ${background} !important;
          border-color: ${border} !important;
          ${boxShadow ? boxShadowFn(`${boxShadow} !important`) : ''}
        }
      }
      `
}
  `;
}

export function buttonSize(padding, fontSize, lineHeight, radius, borderWidth = 0) {
  return `
    padding: ${padding};
    font-size: ${fontSize};
    line-height: ${lineHeight};
    ${borderRadius(radius)}
    border-width: ${borderWidth}
  `;
}
