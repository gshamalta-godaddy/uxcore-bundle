/* eslint-disable no-useless-escape, max-params */
import { math, rgba } from 'polished';
import * as vars from '../variables/_variables';
import { boxShadow } from './shadows';
import palette from '../functions/palette';
import { rtlIcon } from './uxicons';

function formControlFocus() {
  return `
    &:focus {
      color: ${vars.inputFocusColor};
      background-color: ${vars.inputFocusBg};
      border: ${vars.inputFocusBorderWidth} solid ${vars.inputFocusBorderColor};
      outline: none;
      ${boxShadow(vars.inputFocusBoxShadow)}
    }
  `;
}

function formValidationState(state, color) {
  return `
    .${state}-feedback {
      display: none;
      margin-top: .25rem;
      font-size: .875rem;
      color: ${color};
    }

    .${state}-tooltip {
      position: absolute;
      top: 100%;
      z-index: 5;
      display: none;
      width: 250px;
      padding: .5rem;
      margin-top: .1rem;
      font-size: .875rem;
      line-height: 1;
      color: #fff;
      background-color: ${rgba(color, 0.8)};
      border-radius: .2rem;
    }
  
    .form-control,
    .custom-select {
      .was-validated &:${state},
      &.is-${state} {
        border-color: ${color};
  
        &:focus {
          box-shadow: 0 0 0 .2rem ${rgba(color, 0.25)};
        }
  
        ~ .${state}-feedback,
        ~ .${state}-tooltip {
          display: block;
        }
      }
    }
  
    .form-check-input {
      .was-validated &:${state},
      &.is-${state} {
        + .form-check-label {
          color: ${color};
        }
      }
    }
  
    .custom-control-input {
      .was-validated &:${state},
      &.is-${state} {
        ~ .custom-control-indicator {
          background-color: ${rgba(color, 0.25)};
        }
        ~ .custom-control-description {
          color: ${color};
        }
      }
    }
  
    .custom-file-input {
      .was-validated &:${state},
      &.is-${state} {
        ~ .custom-file-control {
          border-color: ${color};
  
          &::before { border-color: inherit; }
        }
        &:focus {
          box-shadow: 0 0 0 .2rem ${rgba(color, 0.25)};
        }
      }
    }
  `;
}

function formControlValidationCustom(color, bg, bxShadow, boxShadowFocus, textColor = palette('gray', 'dark')) {
  return `
  .form-text,
  .form-control-label,
  &.form-check,
  &.form-check-inline,
  .custom-control {
    color: ${color};
  }
  .form-control {
    color: ${textColor};
    border-color: ${color};
    background-color: ${bg};
    ${bxShadow ? boxShadow(bxShadow) : '' }

    &:focus {
      border-color: ${color};
      ${boxShadowFocus ? boxShadow(boxShadowFocus) : '' }
    }
  }
  .input-group-addon {
    color: ${color};
    border-color: ${color};
    background-color: ${bg};
  }
  `;
}

function inputIconPosition(float = 'left') {
  return `
    .form-control {
      padding-${float}: ${math(`(${vars.inputIconSpacing} + ${vars.inputBtnPaddingX}) * 1.15`)};
    }
    .form-control.form-control-sm {
      padding-${float}: ${math(`(${vars.inputIconSpacingSm} + ${vars.inputBtnPaddingXSm}) * 1.15`)};
    }
    .form-control.form-control-lg {
      padding-${float}: ${math(`(${vars.inputIconSpacingLg} + ${vars.inputBtnPaddingXLg}) * 1.15`)};
    }
    .uxicon  {
      ${float}: ${vars.inputBtnPaddingX};
    }
    .form-control-sm + .uxicon  {
      ${float}: ${vars.inputBtnPaddingXSm};
    }
    .form-control-lg + .uxicon  {
      ${float}: ${vars.inputBtnPaddingXLg};
    }
  `;
}

function customCheckbox(topPadding = '2px') {
  return `
    &:before {
      content: '\e207';
      ${rtlIcon()};
      font-family: ${vars.iconFontName};
      font-size: ${vars.customCheckboxIconSize};
      color: ${vars.customControlIndicatorCheckedColor};
      line-height: .8;
      padding-top: ${topPadding};
    }
  `;
}

export {
  customCheckbox,
  inputIconPosition,
  formControlFocus,
  formControlValidationCustom,
  formValidationState
};
