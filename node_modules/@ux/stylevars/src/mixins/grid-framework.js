import { math } from 'polished';
import {
  gridGutterWidth,
  gridBreakpoints,
  enableFlex,
  gridColumns
} from '../variables/_variables';
import { mediaBreakpointUp } from './breakpoints';
import { makeCol, makeColModifier } from './grid';

export default function makeGridColumns(columns = gridColumns, gutter = gridGutterWidth, breakpoints = gridBreakpoints) {
  const colIds = Array.from({ length: parseInt(columns, 10) }, (_, i) => i + 1);

  const modifiers = ['pull', 'push'];
  const cols = [];
  const mediaArry = [];

  function createContent(breakpoint) {
    const gridArry = [];
    if (enableFlex) {
      gridArry.push(`
      .col-${breakpoint} {
        position: relative;
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
        min-height: 1px;
        padding-right: ${math(`${gridGutterWidth} / 2`)};
        padding-left:  ${math(`${gridGutterWidth} / 2`)};
      }`);
    }

    // specific for 1-12
    colIds.forEach((colId) => {
      gridArry.push(`
      .col-${breakpoint}-${colId} {
        ${makeCol(colId, columns)}
      }`);
    });

    modifiers.forEach((modifier) => {
      // push and pull for 0-12
      [0, ...colIds].forEach((colId) => {
        gridArry.push(`.${modifier}-${breakpoint}-${colId} {
          ${makeColModifier(modifier, colId, columns)}
        }`);
      });
    });

    // offset for 0-11
    colIds.map(n => n - 1).forEach((colId) => {
      gridArry.push(`.offset-${breakpoint}-${colId} {
        ${makeColModifier('offset', colId, columns)}
      }`);
    });

    return gridArry.join('\n');
  }

  Object.keys(breakpoints).forEach((breakpoint) => {
    // shared for 1-12
    colIds.forEach((colId) => {
      cols.push(`.col-${breakpoint}-${colId}`);
    });
    mediaArry.push(mediaBreakpointUp(breakpoint, createContent(breakpoint)));
  });

  return `
    ${cols.join(', ')} {
      position: relative;
      min-height: 1px;
      padding-right: ${math(`${gutter} / 2`)};
      padding-left: ${math(`${gutter} / 2`)};
      ${enableFlex ? `width: 100%;` : ''}
    }
    ${mediaArry.join('\n')}
  `;
}
