import { math } from 'polished';
import * as vars from '../variables/_variables';
import clearFix from './clearfix';
import { mediaBreakpointUp } from './breakpoints';

const percent = (size, columns) => (size / columns) * 100;

function fixedColOffset(size, value) {
  const { fixedColSm, fixedColMd, fixedColLg, fixedColXl, gridGutterWidth } = vars;
  const sizeMap = {
    sm: fixedColSm,
    md: fixedColMd,
    lg: fixedColLg,
    xl: fixedColXl
  };
  const colSize = sizeMap[size];
  return math(`(${colSize} + ${gridGutterWidth}) * ${value}`);
}

function fixedCol(size, value) {
  return math(`${fixedColOffset(size, value)} - ${vars.gridGutterWidth}`);
}

function makeContainer(gutter = vars.gridGutterWidth) {
  return `
    margin-left: auto;
    margin-right: auto;
    padding-left:  ${math(`${gutter} / 2`)};
    padding-right: ${math(`${gutter} / 2`)};
    ${ !vars.enableFlex ? clearFix() : ''}
  `;
}

function makeContainerMaxWidths(maxWidths = vars.containerMaxWidths, breakpoints = vars.gridBreakpoints) {
  const includes = [];
  Object.keys(breakpoints).forEach((breakpoint, idx) => {
    if (idx !== 0) {
      includes.push(mediaBreakpointUp(breakpoint, `max-width: ${maxWidths[breakpoint]}`));
    }
  });
  return includes.join('\n');
}

function makeRow(gutter = vars.gridGutterWidth) {
  return `
    ${vars.enableFlex ? `
      display: flex;
      flex-wrap: wrap;
    ` : clearFix()}
    margin-left: ${math(`${gutter} / -2`)};
    margin-right: ${math(`${gutter} / -2`)};
  `;
}

function makeColReady(gutter = vars.gridGutterWidth) {
  return `
    position: relative;
    min-height: 1px;
    padding-right: ${math(`${gutter} / 2`)};
    padding-left: ${math(`${gutter} / 2`)}; 
    ${ vars.enableFlex ? `width: 100%` : ''}
  `;
}

function makeCol(size, columns = vars.gridColumns) {
  if (vars.enableFlex) {
    return `
      flex: 0 0 ${percent(size, parseInt(columns, 10)).toFixed(5)}%;
      max-width: ${percent(size, parseInt(columns, 10)).toFixed(5)}%;
    `;
  }
  return `
    float: left;
    width: ${percent(size, parseInt(columns, 10)).toFixed(5)}%;
  `;
}

function makeColOffset(size, columns = vars.gridColumns) {
  return `margin-left: ${percent(size, parseInt(columns, 10)).toFixed(5)}%`;
}

function makeColPush(size, columns = vars.gridColumns) {
  return `left: ${size > 0 ? `${percent(size, parseInt(columns, 10)).toFixed(5)}%` : 'auto'};`;
}

function makeColPull(size, columns = vars.gridColumns) {
  return `right: ${size > 0 ? `${percent(size, parseInt(columns, 10)).toFixed(5)}%` : 'auto' };`;
}

function makeColModifier(type, size, columns) {
  if (type === 'push') {
    return makeColPush(size, columns);
  } else if (type === 'pull') {
    return makeColPull(size, columns);
  } else if (type === 'offset') {
    return makeColOffset(size, columns);
  }
}

export {
  fixedColOffset,
  fixedCol,
  makeContainer,
  makeContainerMaxWidths,
  makeRow,
  makeColReady,
  makeCol,
  makeColOffset,
  makeColPull,
  makeColPush,
  makeColModifier
};
