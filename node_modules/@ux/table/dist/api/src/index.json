[
  {
    "description": "Enhanced Table.\n\n@displayName Table\n@class Table\n@public",
    "displayName": "Table",
    "methods": [
      {
        "name": "components",
        "docblock": "Getter that returns the allowed children.\n\n@returns {Object} Components\n@private",
        "modifiers": [
          "get"
        ],
        "params": [],
        "returns": {
          "description": "Components",
          "type": {
            "name": "Object"
          }
        },
        "description": "Getter that returns the allowed children."
      },
      {
        "name": "setSortableOptionsForChild",
        "docblock": "Sets options.sortable if appropriate for the instance & child-type\n\n@param {Object} options The options object to set sortable on\n@private",
        "modifiers": [],
        "params": [
          {
            "name": "options",
            "description": "The options object to set sortable on",
            "type": {
              "name": "Object"
            },
            "optional": false
          }
        ],
        "returns": null,
        "description": "Sets options.sortable if appropriate for the instance & child-type"
      },
      {
        "name": "index",
        "docblock": "Add unique hidden and readonly private key, used by each Table Row and\nReact for rendering optimalization. Skip rows that are already a valid\nReactElement.\n\n@param {Object} row Single object from the collection of data.\n@param {Number} i Iterator\n@returns {Object} Extended row.",
        "modifiers": [],
        "params": [
          {
            "name": "row",
            "description": "Single object from the collection of data.",
            "type": {
              "name": "Object"
            },
            "optional": false
          },
          {
            "name": "i",
            "description": "Iterator",
            "type": {
              "name": "Number"
            },
            "optional": false
          }
        ],
        "returns": {
          "description": "Extended row.",
          "type": {
            "name": "Object"
          }
        },
        "description": "Add unique hidden and readonly private key, used by each Table Row and\nReact for rendering optimalization. Skip rows that are already a valid\nReactElement."
      },
      {
        "name": "sort",
        "docblock": "Sorts the data by the given column\n\n@private",
        "modifiers": [],
        "params": [],
        "returns": null,
        "description": "Sorts the data by the given column"
      },
      {
        "name": "Td",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "props",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Css class name to apply to the table"
      },
      "data": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "The data used to populate the table",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "enableKeyboard": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "When false, tabbing is disabled between rows, and enabled between individual table cells,\nthough there is no handler for Enter",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "order": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "arrayOf",
              "value": {
                "name": "string"
              }
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "Specifies the column order"
      },
      "row": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Function called when a row is clicked on",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      }
    }
  },
  {
    "description": "A component representing the THEAD element\n\n@displayName Thead\n@class Thead\n@extends {Collection}",
    "displayName": "Thead",
    "methods": [
      {
        "name": "components",
        "docblock": "Getter that returns the allowed children.\n\n@returns {Object} Components\n@private",
        "modifiers": [
          "get"
        ],
        "params": [],
        "returns": {
          "description": "Components",
          "type": {
            "name": "Object"
          }
        },
        "description": "Getter that returns the allowed children."
      },
      {
        "name": "setSortableOptionsForChild",
        "docblock": "Sets options.sortable if appropriate for the instance & child-type\n\n@param {Object} options The options object to set sortable on\n@param {Boolean|Function} sort The sort value from props\n@param {string} childElementType The child element type that is being considered\n@private",
        "modifiers": [],
        "params": [
          {
            "name": "options",
            "description": "The options object to set sortable on",
            "type": {
              "name": "Object"
            },
            "optional": false
          },
          {
            "name": "sort",
            "description": "The sort value from props",
            "type": {
              "name": "union",
              "elements": [
                {
                  "name": "Boolean"
                },
                {
                  "name": "Function"
                }
              ]
            },
            "optional": false
          },
          {
            "name": "childElementType",
            "description": "The child element type that is being considered",
            "type": {
              "name": "string"
            },
            "optional": false
          }
        ],
        "returns": null,
        "description": "Sets options.sortable if appropriate for the instance & child-type"
      }
    ],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Child row"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Styles to apply to the element"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "ClassName to apply to the element"
      }
    }
  },
  {
    "description": "A table body component\n\n@displayName Tbody\n@class Tbody\n@extends {React.Component}",
    "displayName": "Tbody",
    "methods": [
      {
        "name": "components",
        "docblock": "Getter that returns the allowed children.\n\n@returns {Object} Components\n@private",
        "modifiers": [
          "get"
        ],
        "params": [],
        "returns": {
          "description": "Components",
          "type": {
            "name": "Object"
          }
        },
        "description": "Getter that returns the allowed children."
      },
      {
        "name": "compose",
        "docblock": "Iterate over each data row while using the iterator. A predefined ordered\nlist of property references is used by default if it is available, otherwise\ncolumns are rendered in the order of properties on the object.\n\n@param {Function} iterator Function that generates the content.\n@param {Object} data Reference to the dataset.\n@returns {Array} Collection of ReactDOM elements.\n@private",
        "modifiers": [],
        "params": [
          {
            "name": "iterator",
            "description": "Function that generates the content.",
            "type": {
              "name": "Function"
            },
            "optional": false
          },
          {
            "name": "data",
            "description": "Reference to the dataset.",
            "type": {
              "name": "Object"
            },
            "optional": false
          }
        ],
        "returns": {
          "description": "Collection of ReactDOM elements.",
          "type": {
            "name": "Array"
          }
        },
        "description": "Iterate over each data row while using the iterator. A predefined ordered\nlist of property references is used by default if it is available, otherwise\ncolumns are rendered in the order of properties on the object."
      },
      {
        "name": "row",
        "docblock": "Return a row iterator.\n\n@returns {Function} Iterator that maps children into Tr elements.\n@private",
        "modifiers": [],
        "params": [],
        "returns": {
          "description": "Iterator that maps children into Tr elements.",
          "type": {
            "name": "Function"
          }
        },
        "description": "Return a row iterator."
      },
      {
        "name": "cell",
        "docblock": "Return a cell iterator.\n\n@returns {Function} Iterator that maps children into Td elements.\n@private",
        "modifiers": [],
        "params": [],
        "returns": {
          "description": "Iterator that maps children into Td elements.",
          "type": {
            "name": "Function"
          }
        },
        "description": "Return a cell iterator."
      },
      {
        "name": "renderRows",
        "docblock": "Render rows from a data collection.\n\n@param {Object} data Optional collection of rows that can be rendered.\n@returns {Array} Collection of ReactDOM elements.\n@public",
        "modifiers": [],
        "params": [
          {
            "name": "data",
            "description": "Optional collection of rows that can be rendered.",
            "type": {
              "name": "Object"
            },
            "optional": false
          }
        ],
        "returns": {
          "description": "Collection of ReactDOM elements.",
          "type": {
            "name": "Array"
          }
        },
        "description": "Render rows from a data collection."
      },
      {
        "name": "renderCells",
        "docblock": "Render a set of cells in a single row.\n\n@param {Object} data Single object where each property will become a cell.\n@returns {Array} Collection of ReactDOM elements.\n@private",
        "modifiers": [],
        "params": [
          {
            "name": "data",
            "description": "Single object where each property will become a cell.",
            "type": {
              "name": "Object"
            },
            "optional": false
          }
        ],
        "returns": {
          "description": "Collection of ReactDOM elements.",
          "type": {
            "name": "Array"
          }
        },
        "description": "Render a set of cells in a single row."
      }
    ],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The child rows"
      },
      "click": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when a row is clicked"
      },
      "data": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "The data to fill the table"
      },
      "enableKeyboard": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "When false, tabbing is disabled between rows, and enabled between individual table cells,\nthough there is no handler for Enter"
      },
      "order": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "The column order for the rows"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Styles to apply to the element"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "ClassName to apply to the element"
      }
    }
  },
  {
    "description": "A table footer component\n\n@displayName Tfoot\n@export\n@class Tfoot\n@extends {Collection}",
    "displayName": "Tfoot",
    "methods": [
      {
        "name": "components",
        "docblock": "Getter that returns the allowed children.\n\n@returns {Object} Components\n@private",
        "modifiers": [
          "get"
        ],
        "params": [],
        "returns": {
          "description": "Components",
          "type": {
            "name": "Object"
          }
        },
        "description": "Getter that returns the allowed children."
      }
    ],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Child row"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Styles to apply to the element"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "ClassName to apply to the element"
      }
    }
  },
  {
    "description": "A table row component\n\n@displayName Tr\n@class Tr\n@extends {Collection}",
    "displayName": "Tr",
    "methods": [
      {
        "name": "components",
        "docblock": "Getter that returns the allowed children.\n\n@returns {Object} Components\n@private",
        "modifiers": [
          "get"
        ],
        "params": [],
        "returns": {
          "description": "Components",
          "type": {
            "name": "Object"
          }
        },
        "description": "Getter that returns the allowed children."
      },
      {
        "name": "onKeyDown",
        "docblock": "Private keydown event handler that translates `Enter` keypresses into click events\n\n@param {any} event The event of the keydown\n@private",
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "description": "The event of the keydown",
            "type": {
              "name": "any"
            },
            "optional": false
          }
        ],
        "returns": null,
        "description": "Private keydown event handler that translates `Enter` keypresses into click events"
      }
    ],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Child cells"
      },
      "click": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when the row is clicked"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Styles to apply to the element"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "ClassName to apply to the element"
      }
    }
  },
  {
    "description": "A table cell component\n\n@displayName Td\n@param {Object} props passed in properties\n@returns {React.Element} Rendered Td\n@extends React.Component",
    "methods": []
  },
  {
    "description": "A table header column component\n\n@displayName Th\n@class Th\n@extends {Component}",
    "displayName": "Th",
    "methods": [
      {
        "name": "sort",
        "docblock": "Call the sort method on the parent Table Component. The\nmethod sorts the current state by the property column.\n\n@param {Event} event Mouse click.\n@private",
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "description": "Mouse click.",
            "type": {
              "name": "Event"
            },
            "optional": false
          }
        ],
        "returns": null,
        "description": "Call the sort method on the parent Table Component. The\nmethod sorts the current state by the property column."
      },
      {
        "name": "handleKeyDown",
        "docblock": "Call the sort method on the parent Table Component. The\nmethod sorts the current state by the property column.\n\n@param {Event} event onKeyDown.\n@private",
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "description": "onKeyDown.",
            "type": {
              "name": "Event"
            },
            "optional": false
          }
        ],
        "returns": null,
        "description": "Call the sort method on the parent Table Component. The\nmethod sorts the current state by the property column."
      },
      {
        "name": "plain",
        "docblock": "Create a plain table header.\n\n@returns {ReactElement} Table header cell.\n@private",
        "modifiers": [],
        "params": [],
        "returns": {
          "description": "Table header cell.",
          "type": {
            "name": "ReactElement"
          }
        },
        "description": "Create a plain table header."
      },
      {
        "name": "sortable",
        "docblock": "Create a table header with click event handling.\n\n@returns {ReactElement} Table header cell.\n@private",
        "modifiers": [],
        "params": [],
        "returns": {
          "description": "Table header cell.",
          "type": {
            "name": "ReactElement"
          }
        },
        "description": "Create a table header with click event handling."
      }
    ],
    "props": {
      "sortable": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Function to sort the data by the given column"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Child components"
      },
      "column": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The name of this column, gets passed to the sortable function"
      },
      "active": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The name of the actively sorted column"
      },
      "direction": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The direction of the current sort"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The css classname to apply to the raw th element"
      },
      "showIcon": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Show the sorting indicator for sortable columns"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Styles to apply to the element"
      }
    }
  }
]