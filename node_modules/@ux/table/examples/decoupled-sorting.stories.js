import React, { useState, useEffect, useRef } from 'react';
import PropTypes from 'prop-types';
import Table from '../src';
import Pagination from '@ux/pagination';
import Search from '@ux/search';
import { classNames } from '@ux/component-utilities';
import { css } from 'linaria';

import '@ux/pagination/src/styles';
import '@ux/search/src/styles';

export default function DecoupledSorting() {
  const data = [
    { event: 'UTMB', distance: 171, elevation: 10000, continent: 'Europe' },
    { event: 'CCC', distance: 101, elevation: 6100, continent: 'Europe' },
    { event: 'TDS', distance: 145, elevation: 9100, continent: 'Europe' },
    { event: 'OCC', distance: 56, elevation: 3500, continent: 'Europe' },
    { event: 'MCC', distance: 40, elevation: 2300, continent: 'Europe' },
    { event: 'FGT134', distance: 134, elevation: 5720, continent: 'Europe' },
    { event: 'FGT107', distance: 107, elevation: 4120, continent: 'Europe' },
    { event: 'FGT85', distance: 85, elevation: 3338, continent: 'Europe' },
    { event: 'Western States 100', distance: 161, elevation: 5500, continent: 'North America' },
    { event: 'Leadville Trail 100', distance: 161, elevation: 4800, continent: 'North America' },
    { event: 'Badwater 135', distance: 217, elevation: 4450, continent: 'North America' },
    { event: 'Hardrock 100', distance: 161, elevation: 10074, continent: 'North America' },
    { event: 'UTMF', distance: 167, elevation: 8000, continent: 'Asia' },
    { event: 'TUM Miler', distance: 165, elevation: 5470, continent: 'Oceania' },
    { event: 'MdS', distance: 251, continent: 'Africa' },
    { event: 'Atacama crossing', distance: 250, elevation: 1683, continent: 'South America' },
    { event: 'Ushuaia', distance: 130, elevation: 7100, continent: 'South America' }
  ];

  const columns = [
    { id: 'event', label: 'Event' },
    { id: 'distance', label: 'Distance [km]' },
    { id: 'elevation', label: 'Elevation [m]' },
    { id: 'continent', label: 'Continent' }
  ];

  return <SimpleTable { ...{ data, columns, pageItems: 5 } } paginable sortable searchable/>;
}

const footer = css`
  display: flex;
  align-items: flex-start;
  flex-wrap: wrap;
  div[role=search] {
    max-width: 21rem;
  }
  div.pagination-wrap {
    flex: 1;
    justify-content: end;
    & .pagination {
      flex-wrap: nowrap;
    }
  }
`;

function SimpleTable({
  data: propData,
  className,
  pageItems = 10,
  columns,
  sortable,
  searchable,
  paginable
}) {
  const order = columns.map(({ id }) => id);

  const [allData, setAllData] = useState(() => [...propData]);
  useMountedEffect(() => setAllData([...propData]), [propData]);
  let data = allData;

  const onSort = (column, direction) => {
    const comparator = (a, b) => direction * (a[column] || '')
      .toString()
      .localeCompare((b[column] || ''), 'en', { numeric: true });
    setAllData(prev => prev.slice().sort(comparator));
  };

  const [search, handleSearch] = useState('');
  if (search.length) data = allData.filter((e) => Object.values(e).some((v) => (new RegExp(search, 'gi')).test(v)));

  const [page, handlePage] = useState(1); // Pagination page is not zero based
  const totalItems = data.length;
  const showPagination = paginable && totalItems > pageItems;
  if (showPagination) {
    const pages = Math.ceil(totalItems / pageItems);
    if (pages !== 0 && page > pages) handlePage(1);
    data = data.slice((page - 1) * pageItems, page * pageItems);
  }

  return (
    <div className={ classNames('simple-table', className) }>
      <Table { ...{ sortable, onSort, order, data } }>
        <thead>
          <tr>
            {columns.map(({ id, label }) => (
              <th key={ id } column={ label && id }>{label}</th>
            ))}
          </tr>
        </thead>
      </Table>

      <div className={ classNames('simple-table-footer', footer) }>
        {searchable && <Search onChange={ handleSearch } value={ search } id='search'/>}
        {showPagination && (
          <Pagination
            { ...{
              page,
              pageItems,
              totalItems,
              onChange: handlePage,
              showBookends: false
            } }
          />
        )}
      </div>
    </div>
  );
}

SimpleTable.propTypes = {
  data: PropTypes.arrayOf(PropTypes.object).isRequired,
  columns: PropTypes.arrayOf(
    PropTypes.shape({
      id: PropTypes.string.isRequired,
      label: PropTypes.string // if omitted column is not sortable
    })
  ).isRequired,
  pageItems: PropTypes.number,
  className: PropTypes.string,
  sortable: PropTypes.bool,
  searchable: PropTypes.bool,
  paginable: PropTypes.bool
};

function useMountedEffect(callback, deps) {
  const mounted = useRef(true);
  useEffect(() => {
    if (!mounted.current) return void callback();
    mounted.current = false;
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, deps);
}
