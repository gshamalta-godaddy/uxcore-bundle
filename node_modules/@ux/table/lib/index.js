"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Collection", {
  enumerable: true,
  get: function () {
    return _collection.default;
  }
});
Object.defineProperty(exports, "Sortable", {
  enumerable: true,
  get: function () {
    return _sortable.default;
  }
});
Object.defineProperty(exports, "Tbody", {
  enumerable: true,
  get: function () {
    return _tbody.default;
  }
});
Object.defineProperty(exports, "Td", {
  enumerable: true,
  get: function () {
    return _td.default;
  }
});
Object.defineProperty(exports, "Tfoot", {
  enumerable: true,
  get: function () {
    return _tfoot.default;
  }
});
Object.defineProperty(exports, "Th", {
  enumerable: true,
  get: function () {
    return _th.default;
  }
});
Object.defineProperty(exports, "Thead", {
  enumerable: true,
  get: function () {
    return _thead.default;
  }
});
Object.defineProperty(exports, "Tr", {
  enumerable: true,
  get: function () {
    return _tr.default;
  }
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _collection = _interopRequireDefault(require("./collection"));

var _sortable = _interopRequireDefault(require("./sortable"));

var _thead = _interopRequireDefault(require("./thead"));

var _tbody = _interopRequireDefault(require("./tbody"));

var _tfoot = _interopRequireDefault(require("./tfoot"));

var _th = _interopRequireDefault(require("./th"));

var _tr = _interopRequireDefault(require("./tr"));

var _td = _interopRequireDefault(require("./td"));

//
// Set of allowed child Components for the Table.
//
const COMPONENTS = {
  thead: _thead.default,
  tbody: _tbody.default,
  tfoot: _tfoot.default,
  tr: _tr.default
};
/**
 * Enhanced Table.
 *
 * @displayName Table
 * @class Table
 * @public
 */

class Table extends _collection.default {
  constructor() {
    super(...arguments);
    this.index = this.index.bind(this);
  }
  /**
   * Getter that returns the allowed children.
   *
   * @returns {Object} Components
   * @private
   */


  get components() {
    return COMPONENTS;
  }
  /**
   * Sets options.sortable if appropriate for the instance & child-type
   *
   * @param {Object} options The options object to set sortable on
   * @private
   */


  setSortableOptionsForChild(options) {
    options.sortable = this.sort;
  }
  /**
   * Add unique hidden and readonly private key, used by each Table Row and
   * React for rendering optimalization. Skip rows that are already a valid
   * ReactElement.
   *
   * @param {Object} row Single object from the collection of data.
   * @param {Number} i Iterator
   * @returns {Object} Extended row.
   */


  index(row, i) {
    if ( /*#__PURE__*/_react.default.isValidElement(row)) return row;
    Object.defineProperty(row, '_key', {
      enumerable: false,
      writable: true,
      value: i
    });
    Object.defineProperty(row, '_active', {
      enumerable: false,
      writable: true,
      value: i === this.state.activeRow
    });
    return row;
  }
  /**
   * Sorts the data by the given column
   *
   * @private
   */


  sort() {
    super.sort(...arguments);
    this.setState({
      activeRow: 0
    });
  }
  /**
   * Render a table.
   *
   * TODO merge table body element if data is received with actual tbody child.
   *
   * @returns {ReactDOM} Rendered table.
   * @public
   */


  render() {
    const {
      className,
      children,
      enableKeyboard,
      row
    } = this.props;
    let {
      order
    } = this.props;
    const {
      data
    } = this.state; //
    // Convert the order property from a comma separated string to array.
    //

    order = typeof order === 'string' ? order.split(',') : order;
    const tableClassName = className ? `ux-table ${className}` : 'ux-table';
    return /*#__PURE__*/_react.default.createElement("table", {
      className: tableClassName
    }, _react.default.Children.map(children, this.renderChildren, this), /*#__PURE__*/_react.default.createElement(_tbody.default, {
      data: data.map(this.index),
      order: order,
      click: row,
      enableKeyboard: enableKeyboard
    }));
  }

}
/**
 * The default properties of the component.
 *
 * @type {Object}
 * @private
 */


exports.default = Table;
Table.defaultProps = {
  data: [],
  enableKeyboard: true,
  row: () => {}
};
/**
 * Allowed properties for Table.
 *
 * @enum {Object} Properties.
 * @public
 */

Table.propTypes = {
  /** Css class name to apply to the table */
  className: _propTypes.default.string,

  /** The data used to populate the table */
  data: _propTypes.default.array,

  /** When false, tabbing is disabled between rows, and enabled between individual table cells,
   * though there is no handler for Enter */
  enableKeyboard: _propTypes.default.bool,

  /** Specifies the column order */
  order: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.string), _propTypes.default.string]),

  /** Function called when a row is clicked on */
  row: _propTypes.default.func
}; // Attach auxiliary components to Table so they're accessible from @ux/uxcore2

Table.Thead = _thead.default;
Table.Tbody = _tbody.default;
Table.Tfoot = _tfoot.default;
Table.Tr = _tr.default;
Table.Td = _td.default;
Table.Th = _th.default;
Table.Collection = _collection.default;
Table.Sortable = _sortable.default; // Also do named exports for those importing from @ux/table directly