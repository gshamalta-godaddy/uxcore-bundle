"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classNames = _interopRequireDefault(require("@ux/component-utilities/lib/classNames"));

var _chevronDown = _interopRequireDefault(require("@ux/icon/chevron-down"));

var _chevronUp = _interopRequireDefault(require("@ux/icon/chevron-up"));

var _ripOut = _interopRequireDefault(require("rip-out"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

//
// Create a table header Component.
//

/**
 * A table header column component
 *
 * @displayName Th
 * @class Th
 * @extends {Component}
 */
class Th extends _react.Component {
  constructor() {
    super(...arguments);
    this.handleKeyDown = this.handleKeyDown.bind(this);
    this.sort = this.sort.bind(this);
  }
  /**
   * Call the sort method on the parent Table Component. The
   * method sorts the current state by the property column.
   *
   * @param {Event} event Mouse click.
   * @private
   */


  sort(event) {
    const {
      sortable,
      column
    } = this.props;
    sortable(column, event);
  }
  /**
   * Call the sort method on the parent Table Component. The
   * method sorts the current state by the property column.
   *
   * @param {Event} event onKeyDown.
   * @private
   */


  handleKeyDown(event) {
    const key = event.key;
    const {
      sortable,
      column
    } = this.props;

    if (key === 'Enter') {
      sortable(column, event);
    }
  }
  /**
   * Create a plain table header.
   *
   * @returns {ReactElement} Table header cell.
   * @private
   */


  plain() {
    const props = (0, _ripOut.default)(this.props, 'sortable');
    return /*#__PURE__*/_react.default.createElement("th", props);
  }
  /**
   * Create a table header with click event handling.
   *
   * @returns {ReactElement} Table header cell.
   * @private
   */


  sortable() {
    const {
      active,
      column,
      direction,
      className,
      children,
      showIcon,
      style
    } = this.props;
    const dir = ~direction ? 'down' : 'up';
    const iconVisible = active && active === column || showIcon;
    const visibleClass = iconVisible ? 'visible' : 'invisible'; //
    // Show sorting icon with the proper direction.
    //

    return /*#__PURE__*/_react.default.createElement("th", {
      role: "button",
      className: (0, _classNames.default)(className, 'ux-table-sort'),
      tabIndex: "0",
      onKeyDown: this.handleKeyDown,
      onClick: this.sort,
      style: style
    }, children, /*#__PURE__*/_react.default.createElement("span", {
      className: `drop-up-down-icon ${visibleClass}`
    }, dir === 'down' ? /*#__PURE__*/_react.default.createElement(_chevronDown.default, null) : /*#__PURE__*/_react.default.createElement(_chevronUp.default, null)));
  }
  /**
   * Render the sortable header with an optional click event
   * that will sort the current column.
   *
   * @returns {ReactElement} Table header cell.
   * @public
   */


  render() {
    const {
      sortable,
      column
    } = this.props;
    return sortable && column ? this.sortable() : this.plain();
  }

}
/**
 * Allowed properties for Th.
 *
 * @enum {Object} Properties.
 * @public
 */


exports.default = Th;
Th.propTypes = {
  /** Function to sort the data by the given column */
  sortable: _propTypes.default.func,

  /** Child components */
  children: _propTypes.default.node,

  /** The name of this column, gets passed to the sortable function */
  column: _propTypes.default.string,

  /** The name of the actively sorted column */
  active: _propTypes.default.string,

  /** The direction of the current sort */
  direction: _propTypes.default.number,

  /** The css classname to apply to the raw th element */
  className: _propTypes.default.string,

  /** Show the sorting indicator for sortable columns */
  showIcon: _propTypes.default.bool,

  /** Styles to apply to the element */
  style: _propTypes.default.object
};