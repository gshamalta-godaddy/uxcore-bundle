"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _collection = _interopRequireDefault(require("./collection"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _td = _interopRequireDefault(require("./td"));

var _th = _interopRequireDefault(require("./th"));

//
// Set of allowed child Components for the Table row.
//
const COMPONENTS = {
  td: _td.default,
  th: _th.default
};
/**
 * A table row component
 *
 * @displayName Tr
 * @class Tr
 * @extends {Collection}
 */

class Tr extends _collection.default {
  constructor() {
    super(...arguments);
    this.onKeyDown = this.onKeyDown.bind(this);
  }
  /**
   * Getter that returns the allowed children.
   *
   * @returns {Object} Components
   * @private
   */


  get components() {
    return COMPONENTS;
  }
  /**
   * Private keydown event handler that translates `Enter` keypresses into click events
   *
   * @param {any} event The event of the keydown
   * @private
   */


  onKeyDown(event) {
    if (!this.props.enableKeyboard) return;

    if (event.key === 'Enter') {
      this.props.click(event);
    }
  }
  /**
   * Render a table row.
   *
   * @returns {ReactElement} Table row.
   * @public
   */


  render() {
    const {
      click,
      className,
      children,
      tabIndex,
      style
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("tr", {
      onKeyDown: this.onKeyDown,
      onClick: click,
      className: className,
      tabIndex: tabIndex,
      style: style
    }, _react.default.Children.map(children, this.renderChildren, this));
  }

}

exports.default = Tr;
Tr.propTypes = {
  /** Child cells */
  children: _propTypes.default.node,

  /** Called when the row is clicked */
  click: _propTypes.default.func,

  /** Styles to apply to the element */
  style: _propTypes.default.object,

  /** ClassName to apply to the element */
  className: _propTypes.default.string
};