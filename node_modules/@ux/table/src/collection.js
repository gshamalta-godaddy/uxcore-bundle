import Sortable from './sortable';
import React from 'react';

//
// Set of mixins that handle rendering of childs. This allows mixing
// regular HTML children with React Elements.
//
export default class Collection extends Sortable {
  /**
   * Determine if the element is allowed to pass sortable properties.
   *
   * @param {ReactElement} element ReactElement.
   * @param {Object} options Predefined set of properties.
   * @returns {Object} extended properties.
   * @private
   */
  sortableChild(element, options = {}) {
    const { props = {}, state = {} } = this;
    const sort = props.sortable;
    const elementType = element.type;

    options.direction = state.direction || props.direction;
    options.active = state.active || props.active;

    this.setSortableOptionsForChild(options, sort, elementType);

    return options;
  }

  /**
   * Sets options.sortable if appropriate for the instance & child-type
   *
   * @param {Object} options The options object to set sortable on
   * @param {Boolean|Function} sort The sort value from props
   * @param {string} childElementType The child element type that is being considered
   * @private
   */
  setSortableOptionsForChild(options, sort, childElementType) {
    if (childElementType === 'th') {
      options.sortable = sort;
    }
  }

  /**
   * Add additional properties to child elements by checking if proxy methods are available.
   *
   * @param {ReactElement} element React Table or any of its children.
   * @param {Object} properties Non frozen object to receive sortable properties.
   * @returns {ReactElement} enhanced ReactElement.
   * @private
   */
  getProperties(element, properties = {}) {
    const props = this.props || {};

    if (props.sortable) {
      this.sortableChild(element, properties);
    }

    return properties;
  }

  /**
   * Render Element, either the provided HTML or a replacement React Element.
   *
   * @param {ReactElement} element ReactElement.
   * @returns {ReactElement} rendered child element.
   * @public
   */
  renderChildren(element) {
    const Component = this.components && this.components[element.type];

    if (!Component) {
      return element;
    }

    return React.createElement(Component, { ...this.getProperties(element), ...element.props || {} });
  }
}
