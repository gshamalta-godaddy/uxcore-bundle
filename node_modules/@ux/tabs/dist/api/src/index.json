[
  {
    "description": "Display content as tabs.\n\n@class Tabs\n@displayName Tabs\n@public",
    "displayName": "Tabs",
    "methods": [
      {
        "name": "change",
        "docblock": "Default implementation of tab selection logic. This method can be provided\nas property and will receive arguments as specified below.\n\n@name change\n@memberof Tabs\n@returns {Function} Click event handler\n@public",
        "modifiers": [
          "get"
        ],
        "params": [],
        "returns": {
          "description": "Click event handler",
          "type": {
            "name": "Function"
          }
        },
        "description": "Default implementation of tab selection logic. This method can be provided\nas property and will receive arguments as specified below."
      },
      {
        "name": "selected",
        "docblock": "Return selected tab, prefer props over state.\n\n@returns {Number} Index of selected tab\n@private",
        "modifiers": [
          "get"
        ],
        "params": [],
        "returns": {
          "description": "Index of selected tab",
          "type": {
            "name": "Number"
          }
        },
        "description": "Return selected tab, prefer props over state."
      },
      {
        "name": "navigation",
        "docblock": "Extract TabIndex child from all childs.\n\n@name navigation\n@memberof Tabs\n@param {React.DOM[]} childs - React elements\n@returns {React.DOM[]} React elements\n@private",
        "modifiers": [],
        "params": [
          {
            "name": "childs",
            "description": "React elements",
            "type": {
              "name": "Array",
              "elements": [
                {
                  "name": "React.DOM"
                }
              ]
            },
            "optional": false
          }
        ],
        "returns": {
          "description": "React elements",
          "type": {
            "name": "Array",
            "elements": [
              {
                "name": "React.DOM"
              }
            ]
          }
        },
        "description": "Extract TabIndex child from all childs."
      },
      {
        "name": "getTabId",
        "docblock": "Gets the tab ID for a given child index\n@param {React.DOM[]} childs Array of children tabs\n@param {number} idx Index of child to get tab ID for\n@returns {number} ID of the child at given index",
        "modifiers": [],
        "params": [
          {
            "name": "childs",
            "description": "Array of children tabs",
            "type": {
              "name": "Array",
              "elements": [
                {
                  "name": "React.DOM"
                }
              ]
            },
            "optional": false
          },
          {
            "name": "idx",
            "description": "Index of child to get tab ID for",
            "type": {
              "name": "number"
            },
            "optional": false
          }
        ],
        "returns": {
          "description": "ID of the child at given index",
          "type": {
            "name": "number"
          }
        },
        "description": "Gets the tab ID for a given child index"
      },
      {
        "name": "content",
        "docblock": "Extract TabContent children from all childs. The double filter is required to\nensure the length of the childs array matches the length of the TabIndexes.\n\n@name content\n@memberof Tabs\n@param {React.DOM[]} childs - React elements\n@returns {React.DOM[]} React elements\n@private",
        "modifiers": [],
        "params": [
          {
            "name": "childs",
            "description": "React elements",
            "type": {
              "name": "Array",
              "elements": [
                {
                  "name": "React.DOM"
                }
              ]
            },
            "optional": false
          }
        ],
        "returns": {
          "description": "React elements",
          "type": {
            "name": "Array",
            "elements": [
              {
                "name": "React.DOM"
              }
            ]
          }
        },
        "description": "Extract TabContent children from all childs. The double filter is required to\nensure the length of the childs array matches the length of the TabIndexes."
      },
      {
        "name": "TabContent",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "props",
            "optional": false,
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "selected": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Tab index that should be selected"
      },
      "change": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Function called when selected tab is changed"
      },
      "children": {
        "type": {
          "name": "custom",
          "raw": "validateComponents([TabIndex, TabContent])"
        },
        "required": false,
        "description": "Child tabs or tab contents"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Classes to apply to Tabs"
      },
      "tabIndex": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "-1",
              "computed": true
            },
            {
              "value": "0",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Developer indicates tabIndex"
      },
      "renderHidden": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Non-selected tab content is hidden with CSS rather than JSX",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  {
    "description": "Display content of each Tab. The Tabs component can optionally use TabContent.\n@param {Object} props props\n@displayName Tab Content\n@public\n@returns {React.ReactElement} TabContent",
    "displayName": "TabContent",
    "methods": [],
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Classes to be applied to tab content"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Contents of the tab"
      },
      "tabIndex": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "-1",
              "computed": true
            },
            {
              "value": "0",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Developer indicates tabIndex, default is 0",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      }
    }
  },
  {
    "description": "Render a default set of tabs used with each Component.\n\n@class TabIndex\n@displayName Tab Index\n@public",
    "displayName": "TabIndex",
    "methods": [
      {
        "name": "stepSize",
        "docblock": "Step size used to in- or decrement the conveyor position. Can also be provided\nthrough properties on TabIndex.\n\n@returns {number} Step size\n@public",
        "modifiers": [
          "get"
        ],
        "params": [],
        "returns": {
          "description": "Step size",
          "type": {
            "name": "number"
          }
        },
        "description": "Step size used to in- or decrement the conveyor position. Can also be provided\nthrough properties on TabIndex."
      },
      {
        "name": "moveConveyor",
        "docblock": "Increment or decrement the conveyor steps within bounds.\nBounds are: [0, this.tabsExceededWidth].\n\n@param {string} direction Previous or next control\n@returns {Function} Event handler\n@private",
        "modifiers": [],
        "params": [
          {
            "name": "direction",
            "description": "Previous or next control",
            "type": {
              "name": "string"
            },
            "optional": false
          }
        ],
        "returns": {
          "description": "Event handler",
          "type": {
            "name": "Function"
          }
        },
        "description": "Increment or decrement the conveyor steps within bounds.\nBounds are: [0, this.tabsExceededWidth]."
      },
      {
        "name": "tabsExceededWidth",
        "docblock": "Calculate the amount of by which the tabs exceed the width of the conveyor.\n\n@returns {number} Exceeded width in pixels\n@private",
        "modifiers": [
          "get"
        ],
        "params": [],
        "returns": {
          "description": "Exceeded width in pixels",
          "type": {
            "name": "number"
          }
        },
        "description": "Calculate the amount of by which the tabs exceed the width of the conveyor."
      },
      {
        "name": "conveyorArrowStyle",
        "docblock": "Check if controls should be visible or hidden.\n\n@param {string} side Previous or next control\n@param {string} breakpoint current view point\n@returns {Object} Display style",
        "modifiers": [],
        "params": [
          {
            "name": "side",
            "description": "Previous or next control",
            "type": {
              "name": "string"
            },
            "optional": false
          },
          {
            "name": "breakpoint",
            "description": "current view point",
            "type": {
              "name": "string"
            },
            "optional": false
          }
        ],
        "returns": {
          "description": "Display style",
          "type": {
            "name": "Object"
          }
        },
        "description": "Check if controls should be visible or hidden."
      },
      {
        "name": "controlAttributes",
        "docblock": "Get attributes that are required for conveyor controls.\n\n@param {string} direction Previous or next control\n@param {string} breakpoint current viewpoint\n@returns {Object} Control attributes\n@private",
        "modifiers": [],
        "params": [
          {
            "name": "direction",
            "description": "Previous or next control",
            "type": {
              "name": "string"
            },
            "optional": false
          },
          {
            "name": "breakpoint",
            "description": "current viewpoint",
            "type": {
              "name": "string"
            },
            "optional": false
          }
        ],
        "returns": {
          "description": "Control attributes",
          "type": {
            "name": "Object"
          }
        },
        "description": "Get attributes that are required for conveyor controls."
      }
    ],
    "props": {
      "stepSize": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Increments or decrements the conveyor position"
      },
      "change": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Function called when selection changes"
      },
      "selected": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Index of selected tab"
      },
      "children": {
        "type": {
          "name": "custom",
          "raw": "validateComponents([Tab])"
        },
        "required": false,
        "description": "Child tab"
      },
      "contentIds": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "IDs of linked tab contents"
      }
    }
  },
  {
    "description": "Display Tab\n\n@class Tab\n@displayName Tab\n@public",
    "displayName": "Tab",
    "methods": [],
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Classes applied to tab"
      },
      "selected": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Boolean of whether the tab is selected or not"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Children elements of a tab"
      },
      "ariaControls": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Accessibility attributes"
      },
      "design": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Design of a tab"
      }
    }
  }
]