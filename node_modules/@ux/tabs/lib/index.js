"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Tab", {
  enumerable: true,
  get: function () {
    return _tab.default;
  }
});
Object.defineProperty(exports, "TabContent", {
  enumerable: true,
  get: function () {
    return _tabContent.default;
  }
});
Object.defineProperty(exports, "TabIndex", {
  enumerable: true,
  get: function () {
    return _tabIndex.default;
  }
});
exports.default = void 0;

var _reactComponentValidator = _interopRequireDefault(require("react-component-validator"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _tabContent = _interopRequireDefault(require("./tab-content"));

var _tabIndex = _interopRequireDefault(require("./tab-index"));

var _tab = _interopRequireDefault(require("./tab"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

//
// Import all child components.
//

/**
 * Display content as tabs.
 *
 * @class Tabs
 * @displayName Tabs
 * @public
 */
class Tabs extends _react.Component {
  constructor() {
    super(...arguments);
    this.state = {
      selected: 0
    };
  }
  /**
   * Default implementation of tab selection logic. This method can be provided
   * as property and will receive arguments as specified below.
   *
   * @name change
   * @memberof Tabs
   * @returns {Function} Click event handler
   * @public
   */


  get change() {
    return (index, event) => {
      event.preventDefault();
      this.setState({
        selected: index
      });
    };
  }
  /**
   * Return selected tab, prefer props over state.
   *
   * @returns {Number} Index of selected tab
   * @private
   */


  get selected() {
    return 'selected' in this.props ? this.props.selected : this.state.selected;
  }
  /**
   * Extract TabIndex child from all childs.
   *
   * @name navigation
   * @memberof Tabs
   * @param {React.DOM[]} childs - React elements
   * @returns {React.DOM[]} React elements
   * @private
   */


  navigation(childs) {
    const tabIndex = childs.filter(child => child.type === _tabIndex.default)[0];

    if (!tabIndex) {
      return null;
    }

    const contentIds = childs.filter(child => child.type === _tabContent.default).map(child => child.props.id);
    return /*#__PURE__*/_react.default.cloneElement(tabIndex, {
      selected: this.selected,
      change: this.props.change || this.change,
      contentIds
    });
  }
  /**
   * Gets the tab ID for a given child index
   * @param {React.DOM[]} childs Array of children tabs
   * @param {number} idx Index of child to get tab ID for
   * @returns {number} ID of the child at given index
   */


  getTabId(childs, idx) {
    const tabIndex = childs.filter(child => child.type === _tabIndex.default)[0];

    if (!tabIndex) {
      return;
    }

    const tabs = _react.default.Children.toArray(tabIndex.props.children).filter(child => child.type === _tab.default);

    return tabs[idx] && tabs[idx].props && tabs[idx].props.id;
  }
  /**
   * Extract TabContent children from all childs. The double filter is required to
   * ensure the length of the childs array matches the length of the TabIndexes.
   *
   * @name content
   * @memberof Tabs
   * @param {React.DOM[]} childs - React elements
   * @returns {React.DOM[]} React elements
   * @private
   */


  content(childs) {
    const selectedTab = this.getTabId(childs, this.selected);

    if (this.props.renderHidden) {
      const contents = childs.filter(child => child.type === _tabContent.default);
      return contents.map((content, index) => {
        if (!content) {
          return null;
        }

        const className = ['ux-tab-content', index !== this.selected && 'ux-tab-content-hidden', content.props.className].filter(Boolean).join(' ');
        return /*#__PURE__*/_react.default.cloneElement(content, {
          'aria-labelledby': selectedTab,
          className,
          'tabIndex': this.props.tabIndex
        });
      });
    }

    const content = childs.filter(child => child.type === _tabContent.default)[this.selected];

    if (!content) {
      return null;
    }

    return /*#__PURE__*/_react.default.cloneElement(content, {
      'aria-labelledby': selectedTab,
      'tabIndex': this.props.tabIndex
    });
  }
  /**
   * Render the Tabs Component.
   *
   * @returns {React.DOM} div element with TabIndex and TabContent as children
   * @private
   */


  render() {
    const props = this.props;

    const children = _react.default.Children.toArray(props.children);

    return /*#__PURE__*/_react.default.createElement("div", {
      className: props.className
    }, this.navigation(children), this.content(children));
  }

}
/**
 * Optional properties: selected and change. Also validate the type of children
 * that are passed.
 *
 * @enum {Object} expected types of properties.
 * @public
 */


exports.default = Tabs;
Tabs.propTypes = {
  /** Tab index that should be selected */
  selected: _propTypes.default.number,

  /** Function called when selected tab is changed */
  change: _propTypes.default.func,

  /** Child tabs or tab contents */
  children: (0, _reactComponentValidator.default)([_tabIndex.default, _tabContent.default]),

  /** Classes to apply to Tabs */
  className: _propTypes.default.string,

  /** Developer indicates tabIndex */
  tabIndex: _propTypes.default.oneOf([-1, 0]),

  /** Non-selected tab content is hidden with CSS rather than JSX */
  renderHidden: _propTypes.default.bool
};
Tabs.defaultProps = {
  renderHidden: false
}; //
// Attach childs to the main Component for availability without ES6 imports.
//

Tabs.TabContent = _tabContent.default;
Tabs.TabIndex = _tabIndex.default;
Tabs.Tab = _tab.default; //
// Export the Class and related children.
//