"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _intents = _interopRequireWildcard(require("@ux/intents"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var _default = function () {
  const intents = new _intents.default();
  intents.create('@ux/tabs', {
    styleProperties: [_intents.enums.properties.BACKGROUND_COLOR, _intents.enums.properties.BORDER_COLOR, _intents.enums.properties.FOREGROUND_COLOR, _intents.enums.properties.BORDER_RADIUS],
    features: {
      [_intents.enums.features.ITEM]: {
        interactions: [_intents.enums.interactions.HOVERED],
        expressions: [_intents.enums.expressions.CHOSEN],
        styleProperties: [_intents.enums.properties.FONT_FAMILY, _intents.enums.properties.FONT_SIZE, _intents.enums.properties.FONT_WEIGHT, _intents.enums.properties.LINE_HEIGHT, _intents.enums.properties.FOREGROUND_COLOR, _intents.enums.properties.BACKGROUND_COLOR]
      }
    }
  });
  /**
   * Base styles, each tab will also receive this intent
   */

  intents.uxTabs.backgroundColor = intents.ux.box.backgroundColor;
  intents.uxTabs.borderColor = intents.ux.box.borderColor;
  intents.uxTabs.foregroundColor = intents.ux.box.foregroundColor;
  intents.uxTabs.borderRadius = intents.ux.box.borderRadius;
  /**
   * Text styles for the interactive buttons / tabs
   */

  intents.uxTabs.item.foregroundColor = intents.ux.action.foregroundColor;
  intents.uxTabs.item.fontFamily = intents.ux.textAction.fontFamily;
  intents.uxTabs.item.fontSize = intents.ux.textAction.fontSize;
  intents.uxTabs.item.fontWeight = intents.ux.textAction.fontWeight;
  intents.uxTabs.item.lineHeight = intents.ux.textAction.lineHeight;
  /**
   * Styles to describe interactions for the tabs (hovered and selected/active)
   * As per Design Foundations, since these are no longer interactive, use "box" intents
   */

  intents.uxTabs.itemHovered.foregroundColor = intents.ux.box.foregroundColor;
  intents.uxTabs.itemChosen.foregroundColor = intents.ux.box.foregroundColor;
  intents.uxTabs.itemChosenHovered.foregroundColor = intents.ux.box.foregroundColor;
  intents.uxTabs.itemChosen.borderColor = intents.ux.actionChosen.borderColor;
  return intents;
}();

exports.default = _default;