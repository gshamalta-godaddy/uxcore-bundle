import rip from 'rip-out';
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classNames from '@ux/component-utilities/lib/classNames';

/**
 * Display Tab
 *
 * @class Tab
 * @displayName Tab
 * @public
 */
export default class Tab extends Component {
  /**
   * Render the Tab. Depending on props.selected the tab is rendered as active.
   *
   * @returns {React.DOM} list element with tab caption as link
   * @private
   */
  render() {
    const props = this.props;
    const other = rip(props, 'ariaControls');
    const itemClassName = ['ux-tab-item'].concat(props.className);
    const linkClassName = classNames(props.design === 'underline' ? 'ux-tab-link-underline' : 'ux-tab-link', {
      active: props.selected
    });

    const ariaControls = props.selected === true ? props.ariaControls : null;
    const ariaSelectedTab = props.selected === true ? 'true' : 'false';

    return (
      <li { ...other } className={ itemClassName.join(' ') } role='presentation' >
        <button type='button' className={ linkClassName } role='tab' aria-selected={ ariaSelectedTab } aria-controls={ ariaControls }>
          { props.children }
        </button>
      </li>
    );
  }
}

/**
 * Property validation.
 *
 * @type {Object}
 * @api public
 */
Tab.propTypes = {
  /** Classes applied to tab */
  className: PropTypes.string,
  /** Boolean of whether the tab is selected or not */
  selected: PropTypes.bool,
  /** Children elements of a tab */
  children: PropTypes.node,
  /** Accessibility attributes */
  ariaControls: PropTypes.string,
  /** Design of a tab */
  design: PropTypes.string
};
