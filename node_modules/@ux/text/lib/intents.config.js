"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _intents = _interopRequireWildcard(require("@ux/intents"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const styleProperties = [_intents.enums.properties.FONT_FAMILY, _intents.enums.properties.FONT_SIZE, _intents.enums.properties.FONT_WEIGHT, _intents.enums.properties.LINE_HEIGHT]; // eslint-disable-next-line max-statements

var _default = function () {
  const intents = new _intents.default();
  intents.create('@ux/text', {
    styleProperties: [...styleProperties, _intents.enums.properties.FOREGROUND_COLOR],
    expressions: Object.values(_intents.feedbackExpressions),
    features: {
      scaleFactor: {
        styleProperties: [_intents.enums.properties.FONT_SIZE, _intents.enums.properties.LINE_HEIGHT]
      },
      scaleOperation: {
        styleProperties: [_intents.enums.properties.FONT_SIZE, _intents.enums.properties.LINE_HEIGHT]
      },
      scaleOperationInverse: {
        styleProperties: [_intents.enums.properties.FONT_SIZE]
      },
      title: {
        styleProperties
      },
      heading: {
        styleProperties
      },
      paragraph: {
        styleProperties
      },
      action: {
        styleProperties
      },
      caption: {
        styleProperties
      },
      input: {
        styleProperties
      },
      label: {
        styleProperties
      }
    }
  });
  Object.values(_intents.feedbackExpressions).forEach(expression => {
    intents[`uxText${expression}`].foregroundColor = intents.ux[`feedbackHighContrast${expression}`].feedbackColor;
  });
  intents.uxText.scaleFactor.fontSize = 1.125; // Major second

  intents.uxText.scaleOperation.fontSize = '*';
  intents.uxText.scaleOperationInverse.fontSize = '/';
  intents.uxText.fontSize = intents.ux.text.fontSize;
  intents.uxText.title.fontSize = intents.ux.textTitle.fontSize;
  intents.uxText.heading.fontSize = intents.ux.textHeading.fontSize;
  intents.uxText.paragraph.fontSize = intents.ux.textParagraph.fontSize;
  intents.uxText.action.fontSize = intents.ux.textAction.fontSize;
  intents.uxText.caption.fontSize = intents.ux.textCaption.fontSize;
  intents.uxText.input.fontSize = intents.ux.textInput.fontSize;
  intents.uxText.label.fontSize = intents.ux.textLabel.fontSize;
  intents.uxText.scaleFactor.lineHeight = 1;
  intents.uxText.scaleOperation.lineHeight = '*';
  intents.uxText.lineHeight = intents.ux.text.lineHeight;
  intents.uxText.title.lineHeight = intents.ux.textTitle.lineHeight;
  intents.uxText.heading.lineHeight = intents.ux.textHeading.lineHeight;
  intents.uxText.paragraph.lineHeight = intents.ux.textParagraph.lineHeight;
  intents.uxText.action.lineHeight = intents.ux.textAction.lineHeight;
  intents.uxText.caption.lineHeight = intents.ux.textCaption.lineHeight;
  intents.uxText.input.lineHeight = intents.ux.textInput.lineHeight;
  intents.uxText.label.lineHeight = intents.ux.textLabel.lineHeight;
  intents.uxText.fontFamily = intents.ux.text.fontFamily;
  intents.uxText.title.fontFamily = intents.ux.textTitle.fontFamily;
  intents.uxText.heading.fontFamily = intents.ux.textHeading.fontFamily;
  intents.uxText.paragraph.fontFamily = intents.ux.textParagraph.fontFamily;
  intents.uxText.action.fontFamily = intents.ux.textAction.fontFamily;
  intents.uxText.caption.fontFamily = intents.ux.textCaption.fontFamily;
  intents.uxText.input.fontFamily = intents.ux.textInput.fontFamily;
  intents.uxText.label.fontFamily = intents.ux.textLabel.fontFamily;
  intents.uxText.fontWeight = intents.ux.text.fontWeight;
  intents.uxText.title.fontWeight = intents.ux.textTitle.fontWeight;
  intents.uxText.heading.fontWeight = intents.ux.textHeading.fontWeight;
  intents.uxText.paragraph.fontWeight = intents.ux.textParagraph.fontWeight;
  intents.uxText.action.fontWeight = intents.ux.textAction.fontWeight;
  intents.uxText.caption.fontWeight = intents.ux.textCaption.fontWeight;
  intents.uxText.input.fontWeight = intents.ux.textInput.fontWeight;
  intents.uxText.label.fontWeight = intents.ux.textLabel.fontWeight;
  return intents;
}();

exports.default = _default;