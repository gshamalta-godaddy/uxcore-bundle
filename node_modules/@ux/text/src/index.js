import React from 'react';
import PropTypes from 'prop-types';
import textClasses, { asOptions, emphasisOptions } from './classes';

/**
 * Creates a function which represents a dynamic React component
 *
 * @param {String} TagName - The tag name of the element to use for text
 * @returns {Function} - A function to create a component
 */
function create(TagName) {

  /**
   * Creates a React component using the given tag name
   *
   * @param {Object} props - A props configuration object
   * @param {String} [props.as] - A category of text
   * @param {String} [props.className] - A class name to include
   * @param {Node} [props.children] - Deprecated, use text prop instead
   * @param {String} [props.emphasis] - Includes styles to represent feedback
   * @param {Number} [props.size] - A number representing the font size
   * @param {String} [props.text] - The text content
   * @returns {React.Component} - A functional React component
   */
  function Text(props) {
    const {
      as,
      className,
      children,
      emphasis,
      size,
      text,
      ...rest
    } = props || {};

    if (process.env.NODE_ENV !== 'production' && children) {
      console.warn(`Warning: The use of children elements within @ux/text is deprecated.
          Please use the 'text' prop instead.`);
    }

    return <TagName className={ textClasses({ as, className, emphasis, size }) } { ...rest } >{ text || children }</TagName>;
  }

  /**
   *
   * @enum {Object} expected types of properties.
   * @public
   */
  Text.propTypes = {
    /** The type of text expected in the component */
    as: PropTypes.oneOf(asOptions),
    /** Deprecated, children for the component, please use text prop instead */
    children: PropTypes.node,
    /** Classes to apply to component */
    className: PropTypes.string,
    /** The emphasis of text expected in the component */
    emphasis: PropTypes.oneOf(emphasisOptions),
    /** The size of the text, affected by the 'as' prop */
    size: PropTypes.number,
    /** Text to be displayed */
    text: PropTypes.string
  };

  return Text;
}

export const text = new Proxy(function () {}, {
  get: function get(target, prop) {
    // Deliberately not using hasOwnProperty to catch things like __proto__
    if (!String(prop).startsWith('_') && typeof target[prop] === 'undefined') {
      // Cache access by creating a key with value
      target[prop] = create(prop);
    }
    // Always return thing at that key, either undefined or thing set
    return Reflect.get(...arguments);
  }
});

export default text;
