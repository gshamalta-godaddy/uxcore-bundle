[
  {
    "description": "Class representing a 2-state switch.\n\n@displayName Toggle\n@class Base\n@public",
    "displayName": "Base",
    "methods": [
      {
        "name": "onChange",
        "docblock": "Keep value in state if checked is not provided. Value is used over `checked` for the\nReact Native Switch component which uses `value`.\n\n@private",
        "modifiers": [],
        "params": [],
        "returns": null,
        "description": "Keep value in state if checked is not provided. Value is used over `checked` for the\nReact Native Switch component which uses `value`."
      },
      {
        "name": "onKeyDown",
        "docblock": "Handles the keyboard events for space and enter keys.\n\n@param  {Event} event Keyboard input event from the browser.\n@private",
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "description": "Keyboard input event from the browser.",
            "type": {
              "name": "Event"
            },
            "optional": false
          }
        ],
        "returns": null,
        "description": "Handles the keyboard events for space and enter keys."
      },
      {
        "name": "validatePropTypeLabel",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "props",
            "type": null
          },
          {
            "name": "propName",
            "type": null
          },
          {
            "name": "componentName",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "type": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'checkbox'",
              "computed": false
            },
            {
              "value": "'radio'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines the type of behavior for the toggle",
        "defaultValue": {
          "value": "'checkbox'",
          "computed": false
        }
      },
      "htmlFor": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Identifies the toggle label on the page (used for aria references)"
      },
      "label": {
        "type": {
          "name": "custom",
          "raw": "function validatePropTypeLabel(\n  props,\n  propName,\n  componentName\n) {\n  const label = props[propName];\n  if (typeof label !== 'string' && !props.id) {\n    return new Error(\n      `Invalid prop \"${propName}\" supplied to \"${componentName}\". Prop \"${propName}\" must be a string, otherwise prop \"id\" must be provided. Validation failed`\n    );\n  }\n}"
        },
        "required": false,
        "description": "Label for the toggle"
      },
      "small": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Flag dictating the toggle should be rendered smaller"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Flag dictating if the toggle is disabled",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "checked": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Flag dictating the checked state of the toggle"
      },
      "hideLabel": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Flag dictating if the toggle should hide its label"
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "onChange callback"
      },
      "onKeyDown": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "onKeyDown override, (default allows Enter and Space to flip the toggle)"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Identifies the toggle on the page, must be unique if multiple component share the same label (used for aria references)"
      },
      "tabIndex": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "-1",
              "computed": true
            },
            {
              "value": "0",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Developer indicates tabIndex",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      }
    }
  }
]