"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Toggle = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _toggle = _interopRequireDefault(require("./toggle"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _ripOut = _interopRequireDefault(require("rip-out"));

var _id2 = _interopRequireDefault(require("@ux/component-utilities/lib/id"));

var _classNames = _interopRequireDefault(require("@ux/component-utilities/lib/classNames"));

const _excluded = ["type", "onChange", "onKeyDown", "tabIndex"];

/**
 * Class representing a 2-state switch.
 *
 * @displayName Toggle (web)
 * @class Toggle
 * @public
 */
class Toggle extends _toggle.default {
  render() {
    let _this$props = this.props,
        {
      type,
      onChange,
      onKeyDown,
      tabIndex
    } = _this$props,
        props = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
    const {
      label,
      hideLabel
    } = this.props;
    const checked = !!('checked' in props ? props.checked : this.state.checked);
    const id = (0, _id2.default)('label', {
      props: this.props
    });
    onChange = onChange || this.onChange;
    onKeyDown = onKeyDown || this.onKeyDown;
    type = _toggle.default.allowedTypes.includes(type) ? type : _toggle.default.allowedTypes[0];
    const className = (0, _classNames.default)((0, _classNames.default)('ux-toggle', {
      'disabled': props.disabled,
      'ux-toggle-small': props.small
    }));
    props = (0, _ripOut.default)(props, 'small');
    return /*#__PURE__*/_react.default.createElement("label", {
      htmlFor: id,
      className: className
    }, /*#__PURE__*/_react.default.createElement("input", (0, _extends2.default)({}, props, {
      type: type,
      checked: checked,
      className: 'ux-toggle-checkbox',
      onChange: onChange,
      onKeyDown: onKeyDown,
      id: id,
      tabIndex: tabIndex
    })), /*#__PURE__*/_react.default.createElement("span", {
      className: "ux-toggle-container"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "ux-toggle-bg"
    }), /*#__PURE__*/_react.default.createElement("span", {
      className: "ux-toggle-handle"
    })), !hideLabel && label && /*#__PURE__*/_react.default.createElement("span", {
      className: "ux-toggle-message"
    }, label));
  }

}
/**
 * Inherit the propTypes from the Namespace, as well as our base class. We
 * don't want to add these shapes to our base class as it doesn't need
 * any namespace functionality.
 *
 * @type {Object}
 * @public
 */


exports.Toggle = Toggle;
Toggle.propTypes = {
  /** Defines the type of behavior for the toggle*/
  type: _propTypes.default.oneOf(_toggle.default.allowedTypes),

  /** Identifies the toggle label on the page (used for aria references)*/
  htmlFor: _propTypes.default.string,

  /** Label for the toggle */
  label: _toggle.default.validatePropTypeLabel,

  /** Flag dictating the toggle should be rendered smaller */
  small: _propTypes.default.bool,

  /** Flag dictating if the toggle is disabled */
  disabled: _propTypes.default.bool,

  /** Flag dictating the checked state of the toggle */
  checked: _propTypes.default.bool,

  /** Flag dictating if the toggle should hide its label*/
  hideLabel: _propTypes.default.bool,

  /** onChange callback */
  onChange: _propTypes.default.func,

  /** onKeyDown override, (default allows Enter and Space to flip the toggle) */
  onKeyDown: _propTypes.default.func,

  /** Identifies the toggle on the page, must be unique if multiple component share the same label */
  id: _propTypes.default.string,

  /** Developer indicates tabIndex */
  tabIndex: _propTypes.default.oneOf([-1, 0])
};
var _default = Toggle;
exports.default = _default;