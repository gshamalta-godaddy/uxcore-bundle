"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _intents = _interopRequireWildcard(require("@ux/intents"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var _default = function () {
  const intents = new _intents.default();
  intents.create('@ux/toggle', {
    expressions: [_intents.enums.interactions.CHOSEN],
    features: {
      [_intents.enums.features.BODY]: {
        styleProperties: [_intents.enums.properties.BACKGROUND_COLOR, _intents.enums.properties.BORDER_COLOR]
      },
      [_intents.enums.features.KNOB]: {
        styleProperties: [_intents.enums.properties.BACKGROUND_COLOR]
      },
      [_intents.enums.features.LABEL]: {
        styleProperties: [_intents.enums.properties.FONT_FAMILY, _intents.enums.properties.FONT_SIZE, _intents.enums.properties.FONT_WEIGHT, _intents.enums.properties.LINE_HEIGHT, _intents.enums.properties.FOREGROUND_COLOR]
      }
    }
  }); // Label

  intents.uxToggle.label.fontFamily = intents.ux.textLabel.fontFamily;
  intents.uxToggle.label.fontSize = intents.ux.textLabel.fontSize;
  intents.uxToggle.label.fontWeight = intents.ux.textLabel.fontWeight;
  intents.uxToggle.label.lineHeight = intents.ux.textLabel.lineHeight;
  intents.uxToggle.label.foregroundColor = intents.ux.box.foregroundColor; // Knob

  intents.uxToggle.knob.backgroundColor = intents.ux.control.borderColor;
  intents.uxToggleChosen.knob.backgroundColor = intents.ux.feedback.onFeedbackColor; // Toggle container

  intents.uxToggle.body.backgroundColor = intents.ux.control.backgroundColor;
  intents.uxToggle.body.borderColor = intents.ux.control.borderColor;
  intents.uxToggleChosen.body.backgroundColor = intents.ux.feedback.feedbackColor;
  intents.uxToggleChosen.body.borderColor = intents.ux.feedback.feedbackColor;
  return intents;
}();

exports.default = _default;