import Base from './toggle';
import React from 'react';
import PropTypes from 'prop-types';
import rip from 'rip-out';
import _id from '@ux/component-utilities/lib/id';
import classNames from '@ux/component-utilities/lib/classNames';

/**
 * Class representing a 2-state switch.
 *
 * @displayName Toggle (web)
 * @class Toggle
 * @public
 */
export class Toggle extends Base {
  render() {
    let { type, onChange, onKeyDown, tabIndex, ...props } = this.props;
    const { label, hideLabel } = this.props;
    const checked = !!('checked' in props ? props.checked : this.state.checked);
    const id = _id('label', { props: this.props });

    onChange = onChange || this.onChange;
    onKeyDown = onKeyDown || this.onKeyDown;
    type = Base.allowedTypes.includes(type) ? type : Base.allowedTypes[0];

    const className = classNames(
      classNames('ux-toggle', {
        'disabled': props.disabled,
        'ux-toggle-small': props.small
      })
    );

    props = rip(props, 'small');

    return (
      <label htmlFor={ id }  className={ className }>
        <input
          { ...props }
          type={ type }
          checked={ checked }
          className={ 'ux-toggle-checkbox' }
          onChange={ onChange }
          onKeyDown={ onKeyDown }
          id={ id }
          tabIndex={ tabIndex }
        />
        <span className='ux-toggle-container'>
          <span className='ux-toggle-bg'></span>
          <span className='ux-toggle-handle'></span>
        </span>
        {!hideLabel && label && (
          <span className='ux-toggle-message'>{label}</span>
        )}
      </label>
    );
  }
}

/**
 * Inherit the propTypes from the Namespace, as well as our base class. We
 * don't want to add these shapes to our base class as it doesn't need
 * any namespace functionality.
 *
 * @type {Object}
 * @public
 */
Toggle.propTypes = {
  /** Defines the type of behavior for the toggle*/
  type: PropTypes.oneOf(Base.allowedTypes),
  /** Identifies the toggle label on the page (used for aria references)*/
  htmlFor: PropTypes.string,
  /** Label for the toggle */
  label: Base.validatePropTypeLabel,
  /** Flag dictating the toggle should be rendered smaller */
  small: PropTypes.bool,
  /** Flag dictating if the toggle is disabled */
  disabled: PropTypes.bool,
  /** Flag dictating the checked state of the toggle */
  checked: PropTypes.bool,
  /** Flag dictating if the toggle should hide its label*/
  hideLabel: PropTypes.bool,
  /** onChange callback */
  onChange: PropTypes.func,
  /** onKeyDown override, (default allows Enter and Space to flip the toggle) */
  onKeyDown: PropTypes.func,
  /** Identifies the toggle on the page, must be unique if multiple component share the same label */
  id: PropTypes.string,
  /** Developer indicates tabIndex */
  tabIndex: PropTypes.oneOf([-1, 0])
};

export default Toggle;
