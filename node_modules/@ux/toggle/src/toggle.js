import { Component } from 'react';
import PropTypes from 'prop-types';

/**
 * Class representing a 2-state switch.
 *
 * @displayName Toggle
 * @class Base
 * @public
 */
export default class Base extends Component {
  constructor(props) {
    super(...arguments);

    if (!('checked' in props)) {
      this.state = {
        checked: false
      };
    }

    this.onChange = this.onChange.bind(this);
    this.onKeyDown = this.onKeyDown.bind(this);
  }

  /**
   * Keep value in state if checked is not provided. Value is used over `checked` for the
   * React Native Switch component which uses `value`.
   *
   * @private
   */
  onChange() {
    const props = this.props;
    if ('onChange' in props) {
      props.onChange(...arguments);
    }
    if (!('checked' in props)) {
      this.setState({
        checked: !this.state.checked
      });
    }
  }

  /**
   * Handles the keyboard events for space and enter keys.
   *
   * @param  {Event} event Keyboard input event from the browser.
   * @private
   */
  onKeyDown(event) {
    const key = event.key;
    const props = this.props;
    const safelistKeys = [' ', 'Enter'];

    event.preventDefault();

    if (safelistKeys.includes(key)) {
      event.stopPropagation();
      if ('onChange' in props) props.onChange(event);
      if (!('checked' in props))
        this.setState({
          checked: !this.state.checked
        });
    }
  }

  render() {
    return super.render();
  }
}

Base.defaultProps = {
  type: 'checkbox',
  disabled: false,
  tabIndex: 0
};

/**
 * Validate label and require ID if label is a ReactElement
 *
 * @param {Object} props the props passed in
 * @param {string} propName the name of the current prop
 * @param {string} componentName the name of the component
 * @returns {Error | void} returns an error if label is invalid
 */
Base.validatePropTypeLabel = function validatePropTypeLabel(
  props,
  propName,
  componentName
) {
  const label = props[propName];
  if (typeof label !== 'string' && !props.id) {
    return new Error(
      `Invalid prop "${propName}" supplied to "${componentName}". Prop "${propName}" must be a string, otherwise prop "id" must be provided. Validation failed`
    );
  }
};

Base.allowedTypes = ['checkbox', 'radio'];

Base.propTypes = {
  /** Defines the type of behavior for the toggle*/
  type: PropTypes.oneOf(Base.allowedTypes),
  /** Identifies the toggle label on the page (used for aria references)*/
  htmlFor: PropTypes.string,
  /** Label for the toggle */
  label: Base.validatePropTypeLabel,
  /** Flag dictating the toggle should be rendered smaller */
  small: PropTypes.bool,
  /** Flag dictating if the toggle is disabled */
  disabled: PropTypes.bool,
  /** Flag dictating the checked state of the toggle */
  checked: PropTypes.bool,
  /** Flag dictating if the toggle should hide its label*/
  hideLabel: PropTypes.bool,
  /** onChange callback */
  onChange: PropTypes.func,
  /** onKeyDown override, (default allows Enter and Space to flip the toggle) */
  onKeyDown: PropTypes.func,
  /** Identifies the toggle on the page, must be unique if multiple component share the same label (used for aria references) */
  // used for aria references.
  id: PropTypes.string,
  /** Developer indicates tabIndex */
  tabIndex: PropTypes.oneOf([-1, 0])
};
