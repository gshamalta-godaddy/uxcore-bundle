"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TooltipClose;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _button = _interopRequireDefault(require("@ux/button"));

var _x = _interopRequireDefault(require("@ux/icon/x"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Render the close button of the tooltip.
 *
 * @param {Object} props Component properties.
 * @returns {ReactElement} button
 * @private
 */
function TooltipClose(_ref) {
  let {
    close,
    className,
    ariaLabels
  } = _ref;
  let activeElement;
  (0, _react.useEffect)(() => {
    activeElement = document && document.activeElement;
    const button = document.querySelector(`.${className}`);
    if (button) button.focus();
    return () => {
      if (activeElement) activeElement.focus();
    };
  });
  return /*#__PURE__*/_react.default.createElement(_button.default, {
    "aria-label": ariaLabels.close,
    type: "button",
    className: className,
    onClick: close,
    design: 'stateless',
    icon: /*#__PURE__*/_react.default.createElement(_x.default, null)
  });
}

TooltipClose.defaultProps = {
  ariaLabels: {
    close: 'Close Tooltip'
  }
};
/**
 * Property types definition.
 *
 * @enum {Object} propTypes
 * @private
 */

TooltipClose.propTypes = {
  close: _propTypes.default.func.isRequired,
  className: _propTypes.default.string,
  ariaLabels: _propTypes.default.shape({
    close: _propTypes.default.string
  })
};