import React, { Component } from 'react';
import ReactDOM from 'react-dom';
import Content from './tooltip-content';

/**
 * Render the tooltip content in a portal.
 *
 * @param {Object} props Content properties.
 * @returns {ReactElement} Div containing title.
 * @private
 */
export default class TooltipPortal extends Component {
  constructor(props) {
    super(props);
    this.state = {
      inDOM: false
    };

    this.tooltip = document.createElement('div');
    const { anchor, root } = props;
    const rootElement = root || anchor.getRootNode();
    this.attachmentElement = rootElement.querySelector('body') || rootElement;
  }

  componentDidMount() {
    // The portal element is inserted in the DOM tree after
    // the Modal's children are mounted, meaning that children
    // will be mounted on a detached DOM node. If a child
    // component requires to be attached to the DOM tree
    // immediately when mounted, for example to measure a
    // DOM node, or uses 'autoFocus' in a descendant, add
    // state to Modal and only render the children when Modal
    // is inserted in the DOM tree.
    this.attachmentElement.appendChild(this.tooltip);
    this.setState({
      inDOM: true
    });
  }

  componentWillUnmount() {
    this.attachmentElement.removeChild(this.tooltip);
  }


  render() {
    return this.state.inDOM && ReactDOM.createPortal(
      <Content
        { ...this.props }
        hideClose={ this.props.openOnHover && this.props.hideClose }
      />,
      this.tooltip
    );
  }
}

/**
 * Property types definition.
 *
 * @enum {Object} propTypes
 * @private
 */
TooltipPortal.propTypes = {
  ...Content.propTypes
};
