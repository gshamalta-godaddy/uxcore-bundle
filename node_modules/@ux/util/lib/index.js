"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "URL", {
  enumerable: true,
  get: function () {
    return _url.default;
  }
});
exports.cookie = void 0;
Object.defineProperty(exports, "debug", {
  enumerable: true,
  get: function () {
    return _diagnostics.default;
  }
});
exports.json = void 0;
Object.defineProperty(exports, "registerKeyboardNavListener", {
  enumerable: true,
  get: function () {
    return _registerKeyboardNav.registerKeyboardNavListener;
  }
});
Object.defineProperty(exports, "request", {
  enumerable: true,
  get: function () {
    return _request.default;
  }
});
exports.storage = void 0;

var _request = _interopRequireDefault(require("@godaddy/request"));

var _diagnostics = _interopRequireDefault(require("./utils/diagnostics"));

var json = _interopRequireWildcard(require("./utils/json"));

exports.json = json;

var _url = _interopRequireDefault(require("./utils/url"));

var _registerKeyboardNav = require("./utils/register-keyboard-nav");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const cookie = require('koekiemonster')();

exports.cookie = cookie;
//
// @deprecated
// We have moved on from `cookie-monster` as it is no longer maintained
// Polyfill to cookie-monster@0.1.1
// See: https://github.com/kahnjw/cookie-monster/compare/0.1.1...0.2.1
//
cookie.get = cookie.getItem;
cookie.set = cookie.setItem;
cookie.remove = cookie.removeItem;
cookie.clear = null; //
// @deprecated
// sessionStorage is now available on window in all browsers in our
// target support matrix. However, since it was previously exposed
// prior to this we must re-expose it in this fashion.
//

let storage;
exports.storage = storage;

if (typeof window !== 'undefined') {
  exports.storage = storage = window.sessionStorage;
}