"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _urlParse = _interopRequireDefault(require("url-parse"));

/**
 * Construct new URL to parse, use current location if no address was provided.
 *
 * @param {String} address URL to parse.
 * @param {...[Mixed]} args Remainder of arguments.
 * @class URL
 * @api public
 */
function URL(address) {
  if (!address) {
    const target = typeof document !== 'undefined' ? window : {};
    address = (target.location || {}).href || '';
  }

  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  return new _urlParse.default(address, ...args);
}
/**
 * Get domain parts of hostname.
 *
 * @returns {Object} Domain parts.
 * @api public
 */


_urlParse.default.prototype.domains = function domains() {
  const hostname = this.hostname.split('.');
  return {
    top: hostname.pop(),
    sub: hostname
  };
};
/**
 * Return domain with configured number of subdomains (rtl). Defaults to 0,
 * e.g. all subdomains.
 *
 * @param {Number} sub Number of subdomains.
 * @returns {String} parsed domains.
 * @api public
 */


_urlParse.default.prototype.domain = function domain() {
  let sub = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  const domains = this.domains();
  return domains.sub.slice(-sub).concat(domains.top).join('.');
}; //
// Expose the URL parser and some additional properties that might be
// useful for others or testing.
//


URL.extractProtocol = _urlParse.default.extractProtocol;
URL.location = _urlParse.default.location;
URL.qs = _urlParse.default.qs;
var _default = URL;
exports.default = _default;