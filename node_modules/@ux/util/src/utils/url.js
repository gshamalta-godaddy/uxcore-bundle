import URLParse from 'url-parse';

/**
 * Construct new URL to parse, use current location if no address was provided.
 *
 * @param {String} address URL to parse.
 * @param {...[Mixed]} args Remainder of arguments.
 * @class URL
 * @api public
 */
function URL(address, ...args) {
  if (!address) {
    const target = typeof document !== 'undefined' ? window : {};
    address = (target.location || {}).href || '';
  }

  return new URLParse(address, ...args);
}

/**
 * Get domain parts of hostname.
 *
 * @returns {Object} Domain parts.
 * @api public
 */
URLParse.prototype.domains = function domains() {
  const hostname = this.hostname.split('.');

  return {
    top: hostname.pop(),
    sub: hostname
  };
};

/**
 * Return domain with configured number of subdomains (rtl). Defaults to 0,
 * e.g. all subdomains.
 *
 * @param {Number} sub Number of subdomains.
 * @returns {String} parsed domains.
 * @api public
 */
URLParse.prototype.domain = function domain(sub = 0) {
  const domains = this.domains();

  return domains.sub.slice(-sub).concat(domains.top).join('.');
};

//
// Expose the URL parser and some additional properties that might be
// useful for others or testing.
//
URL.extractProtocol = URLParse.extractProtocol;
URL.location = URLParse.location;
URL.qs = URLParse.qs;

export default URL;
