#!/usr/bin/env node

/* eslint no-sync: 0 */

const { minify } = require('terser');
const toml = require('toml');
const path = require('path');
const fs = require('fs');

const dist = path.join(__dirname, '..', 'dist', 'js');
const config = toml.parse(fs.readFileSync(path.join(__dirname, '..', 'wrhs.toml')));
config.minify = config.minify || {};

/**
 * Compresses a given file using the same Terser options as we provide to
 * Warehouse V6.
 *
 * @param {String} baseFileName Name of the file to compress.
 * @private
 */
async function compressJs(baseFileName, as) {
  const result = await minify(fs.readFileSync(path.join(dist, `${baseFileName}.js`), 'utf-8'), {
    compress: config.minify.compress || {},
    mangle: config.minify.mangle || {},
    sourceMap: {
      content: fs.readFileSync(path.join(dist, `${baseFileName}.js.map`), 'utf-8'),
      url: `${baseFileName}.min.js.map`
    }
  });

  if (result.error) {
    throw new Error(result.error);
  }

  //
  // Write the results
  //
  fs.writeFileSync(path.join(dist, `${as || baseFileName}.min.js`), result.code);
  fs.writeFileSync(path.join(dist, `${as || baseFileName}.min.js.map`), result.map);
};

//
// Use a async bootstrap function to ensure we can await our compression.
//
(async function main() {
  await compressJs('uxcore2');
  await compressJs('vendor');
}());
