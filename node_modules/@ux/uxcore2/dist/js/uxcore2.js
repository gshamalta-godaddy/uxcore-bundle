var umd;
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "../../../node_modules/@godaddy/request/lib/index.js":
/*!***********************************************************!*\
  !*** ../../../node_modules/@godaddy/request/lib/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.del = del;
exports.get = get;
exports.patch = patch;
exports.post = post;
exports.put = put;
exports["default"] = void 0;

var _fetch = _interopRequireWildcard(__webpack_require__(/*! @godaddy/fetch */ "../../../node_modules/@godaddy/fetch/browser.js"));

var _diagnostics = _interopRequireDefault(__webpack_require__(/*! diagnostics */ "../../../node_modules/diagnostics/browser/production.js"));

var _querystringify = _interopRequireDefault(__webpack_require__(/*! querystringify */ "../../../node_modules/querystringify/index.js"));

var _jsonp = _interopRequireDefault(__webpack_require__(/*! jsonp */ "../../../node_modules/jsonp/index.js"));

var _ripOut = _interopRequireDefault(__webpack_require__(/*! rip-out */ "../../../node_modules/rip-out/index.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};

    if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};

          if (desc.get || desc.set) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
    }

    newObj.default = obj;
    return newObj;
  }
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(source, true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(source).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

const log = (0, _diagnostics.default)('request');
/**
 * Safely stringify an object into JSON and log on error
 *
 * @param {Object} obj An object to stringify into JSON.
 * @returns {String} A JSON string representing obj.
 * @private
 */

function jsonstringify(obj) {
  try {
    return JSON.stringify(obj);
  } catch (error) {
    log(error.message);
  }
}
/**
 * @callback RequestCallback
 * @param {Error} [err] Error, if any
 * @param {any} [data] Data returned
 */

/**
 * Send the request and process response.
 *
 * @param {String} url URI to request.
 * @param {Object} [options] Configuration.
 * @param {RequestCallback} done Completion callback.
 * @returns {Request} Request instance.
 * @private
 */


function send(url, options, done) {
  // eslint-disable-line max-statements, complexity
  if (typeof options === 'function') {
    done = options;
    options = {};
  }

  let controller = options.controller; // Cautiously enhance functionality to abort fetch

  if (!controller && typeof _fetch.AbortController !== 'undefined') {
    controller = new _fetch.AbortController();
  } // Provide backwards compatibility for internal configuration of requests,
  // see https://github.com/unshiftio/requests/blob/master/index.js#L102.


  options.mode = options.mode || 'cors';
  options.credentials = options.credentials || 'include';
  options.timeout = options.timeout || 30000;
  url = url + _querystringify.default.stringify(options.query || {}, true);

  if (options.jsonp) {
    return (0, _jsonp.default)(url, options, done);
  }

  if (options.body && typeof options.body !== 'string') {
    options.body = jsonstringify(options.body);
  }

  if (typeof options.timeout === 'number' && controller) {
    setTimeout(controller.abort.bind(controller), options.timeout);
    options.signal = controller.signal;
  } //
  // Delete properties that should not be passed to the `window.Request` constructor.
  //


  options = (0, _ripOut.default)(options, 'timeout', 'query', 'controller');
  const request = new _fetch.Request(url, options);
  (0, _fetch.default)(request).then(handleResponse).then(content => {
    done(null, content);
  }).catch(done);
  return {
    controller,
    request
  };
}
/**
 * Extract the method that should be used for reading content from the content-type.
 *
 * @param {string} type Content type
 * @returns {string} method
 * @private
 */


function getMethod(type) {
  if (type && ~type.indexOf('application/json')) return 'json';
  if (type && ~type.indexOf('text/')) return 'text';
  return 'blob';
}
/**
 * Handles the response of the fetch request
 *
 * @param {Response} response Response from the request
 * @returns {Promise} Content or Error from the response
 * @private
 */


function handleResponse(response) {
  const method = getMethod(response.headers.get('content-type'));

  if (response.status >= 400) {
    const error = new Error(response.statusText);
    error.status = response.status;
    return Promise.reject(error);
  }

  return response[method]();
}
/**
 * Execute DELETE request
 *
 * @param {String} url URI to request.
 * @param {Object} [options] Configuration.
 * @param {RequestCallback} done Completion callback.
 * @returns {requests} Requests instance.
 * @public
 */


function del(url, options, done) {
  return send(url, _objectSpread({}, options, {
    method: 'DELETE'
  }), done);
}
/**
 * Execute GET request
 *
 * @param {String} url URI to request.
 * @param {Object} [options] Configuration.
 * @param {RequestCallback} done Completion callback.
 * @returns {requests} Requests instance.
 * @public
 */


function get(url, options, done) {
  return send(url, options, done);
}
/**
 * Execute PATCH request
 *
 * @param {String} url URI to request.
 * @param {Object} data Data to send with request.
 * @param {Object} [options] Configuration.
 * @param {RequestCallback} done Completion callback.
 * @returns {requests} Requests instance.
 * @public
 */


function patch(url, data, options, done) {
  if (typeof options === 'function') {
    done = options;
    options = {};
  }

  return send(url, _objectSpread({}, options, {
    method: 'PATCH',
    body: data
  }), done);
}
/**
 * Execute POST request
 *
 * @param {String} url URI to request.
 * @param {Object} data Data to send with request.
 * @param {Object} [options] Configuration.
 * @param {RequestCallback} done Completion callback.
 * @returns {requests} Requests instance.
 * @public
 */


function post(url, data, options, done) {
  if (typeof options === 'function') {
    done = options;
    options = {};
  }

  return send(url, _objectSpread({}, options, {
    method: 'POST',
    body: data
  }), done);
}
/**
 * Execute PUT request
 *
 * @param {String} url URI to request.
 * @param {Object} data Data to send with request.
 * @param {Object} [options] Configuration.
 * @param {RequestCallback} done Completion callback.
 * @returns {requests} Requests instance.
 * @public
 */


function put(url, data, options, done) {
  if (typeof options === 'function') {
    done = options;
    options = {};
  }

  return send(url, _objectSpread({}, options, {
    method: 'PUT',
    body: data
  }), done);
}

var _default = {
  del,
  get,
  patch,
  post,
  put
};
exports["default"] = _default;

/***/ }),

/***/ "./js/build.js":
/*!*********************************!*\
  !*** ./js/build.js + 1 modules ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// NAMESPACE OBJECT: ./js/index.js
var js_namespaceObject = {};
__webpack_require__.r(js_namespaceObject);
__webpack_require__.d(js_namespaceObject, {
  "Accordion": () => (lib["default"]),
  "Alert": () => (alert_lib["default"]),
  "Button": () => (button_lib["default"]),
  "Checkbox": () => (lib_checkbox["default"]),
  "Collapsible": () => (collapsible_lib["default"]),
  "Criteria": () => (criteria["default"]),
  "Dropdown": () => (dropdown_lib["default"]),
  "Fieldset": () => (fieldset_lib["default"]),
  "Growl": () => (growl_lib["default"]),
  "MessageOverlay": () => (message_overlay_lib["default"]),
  "Modal": () => (modal_lib["default"]),
  "Pagination": () => (pagination_legacy_lib["default"]),
  "Password": () => (lib_password["default"]),
  "Pivots": () => (pivot_lib["default"]),
  "ProgressBar": () => (progress_bar_lib["default"]),
  "ProgressSteps": () => (progress_steps_lib["default"]),
  "QuantitySelector": () => (quantityselector["default"]),
  "Radio": () => (lib_radio["default"]),
  "Search": () => (search["default"]),
  "Spinner": () => (spinner_lib["default"]),
  "Table": () => (table_lib["default"]),
  "Tabs": () => (tabs_lib["default"]),
  "TelephoneInput": () => (telephone_input["default"]),
  "Text": () => (text_lib["default"]),
  "Toggle": () => (toggle_lib["default"]),
  "Tooltip": () => (tooltip_legacy_lib["default"]),
  "Validation": () => (react_validation_context_lib),
  "request": () => (request_lib["default"]),
  "utils": () => (util_lib),
  "versions": () => (versions)
});

// EXTERNAL MODULE: ../../components/accordion/lib/index.js
var lib = __webpack_require__("../../components/accordion/lib/index.js");
// EXTERNAL MODULE: ../../components/alert/lib/index.js
var alert_lib = __webpack_require__("../../components/alert/lib/index.js");
// EXTERNAL MODULE: ../../components/button/lib/index.js
var button_lib = __webpack_require__("../../components/button/lib/index.js");
// EXTERNAL MODULE: ../../legacy/form-element/lib/checkbox.js
var lib_checkbox = __webpack_require__("../../legacy/form-element/lib/checkbox.js");
// EXTERNAL MODULE: ../../components/collapsible/lib/index.js
var collapsible_lib = __webpack_require__("../../components/collapsible/lib/index.js");
// EXTERNAL MODULE: ../../legacy/form-element/lib/criteria/index.js
var criteria = __webpack_require__("../../legacy/form-element/lib/criteria/index.js");
// EXTERNAL MODULE: ../../components/dropdown/lib/index.js
var dropdown_lib = __webpack_require__("../../components/dropdown/lib/index.js");
// EXTERNAL MODULE: ../../components/fieldset/lib/index.js
var fieldset_lib = __webpack_require__("../../components/fieldset/lib/index.js");
// EXTERNAL MODULE: ../../components/growl/lib/index.js
var growl_lib = __webpack_require__("../../components/growl/lib/index.js");
// EXTERNAL MODULE: ../../components/message-overlay/lib/index.js
var message_overlay_lib = __webpack_require__("../../components/message-overlay/lib/index.js");
// EXTERNAL MODULE: ../../components/modal/lib/index.js
var modal_lib = __webpack_require__("../../components/modal/lib/index.js");
// EXTERNAL MODULE: ../../legacy/pagination-legacy/lib/index.js
var pagination_legacy_lib = __webpack_require__("../../legacy/pagination-legacy/lib/index.js");
// EXTERNAL MODULE: ../../legacy/form-element/lib/password.js
var lib_password = __webpack_require__("../../legacy/form-element/lib/password.js");
// EXTERNAL MODULE: ../../components/pivot/lib/index.js
var pivot_lib = __webpack_require__("../../components/pivot/lib/index.js");
// EXTERNAL MODULE: ../../components/progress-bar/lib/index.js
var progress_bar_lib = __webpack_require__("../../components/progress-bar/lib/index.js");
// EXTERNAL MODULE: ../../components/progress-steps/lib/index.js
var progress_steps_lib = __webpack_require__("../../components/progress-steps/lib/index.js");
// EXTERNAL MODULE: ../../legacy/form-element/lib/quantityselector.js
var quantityselector = __webpack_require__("../../legacy/form-element/lib/quantityselector.js");
// EXTERNAL MODULE: ../../legacy/form-element/lib/radio.js
var lib_radio = __webpack_require__("../../legacy/form-element/lib/radio.js");
// EXTERNAL MODULE: ../../legacy/form-element/lib/search.js
var search = __webpack_require__("../../legacy/form-element/lib/search.js");
// EXTERNAL MODULE: ../../components/spinner/lib/index.js
var spinner_lib = __webpack_require__("../../components/spinner/lib/index.js");
// EXTERNAL MODULE: ../../components/table/lib/index.js
var table_lib = __webpack_require__("../../components/table/lib/index.js");
// EXTERNAL MODULE: ../../components/tabs/lib/index.js
var tabs_lib = __webpack_require__("../../components/tabs/lib/index.js");
// EXTERNAL MODULE: ../../legacy/form-element/lib/telephone-input.js
var telephone_input = __webpack_require__("../../legacy/form-element/lib/telephone-input.js");
// EXTERNAL MODULE: ../../components/text/lib/index.js
var text_lib = __webpack_require__("../../components/text/lib/index.js");
// EXTERNAL MODULE: ../../components/toggle/lib/index.js
var toggle_lib = __webpack_require__("../../components/toggle/lib/index.js");
// EXTERNAL MODULE: ../../legacy/tooltip-legacy/lib/index.js
var tooltip_legacy_lib = __webpack_require__("../../legacy/tooltip-legacy/lib/index.js");
// EXTERNAL MODULE: ../../../node_modules/@godaddy/request/lib/index.js
var request_lib = __webpack_require__("../../../node_modules/@godaddy/request/lib/index.js");
// EXTERNAL MODULE: ../../utils/util/lib/index.js
var util_lib = __webpack_require__("../../utils/util/lib/index.js");
// EXTERNAL MODULE: ../../../node_modules/react-validation-context/lib/index.js
var react_validation_context_lib = __webpack_require__("../../../node_modules/react-validation-context/lib/index.js");
;// CONCATENATED MODULE: ./js/index.js
//
// (Explicit Dependencies) Import UXCore2 components.
//





























const versions = {
  // eslint-disable-next-line no-process-env
  ["ux/uxcore2"]: "2201.1.2"
}; //
// Due to Safari lacking support for :focus-visible we need to add a temp script
// that adds similar behavior. This script adds a class on the body and using css
// variables we use :focus to do the same styles we would with :focus-visible.
// Once Safari has adequate :focus-visible support this js code will be removed
// and styles will switch from :focus to :focus-visible.
//

util_lib.registerKeyboardNavListener(); // Babel7 doesn't attach __esModule onto `import *`s even if they are actually es modules.
// For now, manually attach them for compatibility

[util_lib].forEach(function (thing) {
  Object.defineProperty(thing, '__esModule', {
    value: true
  });
}); //
// Also export Components to allow other applications depend directly on
// UXCore2. This cannot be done dynamically by destructuring the components as
// this would violate the assumption of statically defined imports/exports.
//
// Note: do NOT export as default, it will prevent `{ [Component] }` like imports.
//


;// CONCATENATED MODULE: ./js/build.js

window.ux = window.ux || {}; //
// Expose components in ux scope.
//

Object.keys(js_namespaceObject).forEach(component => {
  window.ux[component] = js_namespaceObject[component];
});

/***/ }),

/***/ "./js/vendor.js":
/*!**********************!*\
  !*** ./js/vendor.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "../../../node_modules/react/index.js");
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ "../../../node_modules/react-dom/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var react_intl__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react-intl */ "../../../node_modules/react-intl/lib/index.js");
/* harmony import */ var react_transition_group__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-transition-group */ "../../../node_modules/react-transition-group/esm/index.js");
/* harmony import */ var react_focus_lock__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-focus-lock */ "../../../node_modules/react-focus-lock/dist/es2015/index.js");






window.ux = window.ux || {};
window.ux.React = window.React = react__WEBPACK_IMPORTED_MODULE_0__;
window.ux.ReactDOM = window.ReactDOM = react_dom__WEBPACK_IMPORTED_MODULE_1__;
window.ux.PropTypes = window.PropTypes = (prop_types__WEBPACK_IMPORTED_MODULE_2___default());
window.ux.ReactTransitionGroup = window.ReactTransitionGroup = react_transition_group__WEBPACK_IMPORTED_MODULE_3__;
window.ux.ReactFocusLock = react_focus_lock__WEBPACK_IMPORTED_MODULE_4__; //
// Expose React hook to Format.JS, requires React as global.
//

window.ux.intl = react_intl__WEBPACK_IMPORTED_MODULE_5__;

/***/ }),

/***/ "../../components/accordion/lib/accordion.js":
/*!***************************************************!*\
  !*** ../../components/accordion/lib/accordion.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}
/**
 * Base Componenet for Accordion
 *
 * @public
 * @constructor
 */


class Base extends _react.Component {
  constructor(props) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    super(props, ...args);
    this.state = {
      open: +this.props.open || -1
    };
  }

  componentDidUpdate(prevProps) {
    // If the `open` prop is changed, we need to make sure the internal `open`
    // state responds to that accordingly.
    if (prevProps.open !== this.props.open && this.props.open !== this.state.open) {
      this.setState({
        open: this.props.open
      });
    }
  }
  /**
   * Process the child elements so they can be orchestrated by the accordion
   * interface.
   *
   * @returns {Array} A set of children components that need to be rendered.
   * @param {Object} styles Optional Browser
   * @private
   */


  panels() {
    let styles = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    const open = this.state.open;
    const {
      children
    } = this.props;

    if (!children) {
      return;
    }

    return _react.Children.map(children, (child, index) => {
      if (!child || !child.props || !('title' in child.props)) return child;
      const onClick = child.props.onClick; //
      // Increase the index so it's no longer zero based. This makes
      // for a much more friendly developer interface.
      //

      index++;
      return /*#__PURE__*/_react.default.cloneElement(child, {
        key: index,
        tabIndex: 0,
        open: index === open,
        styles,
        onClick: e => {
          e.preventDefault();
          let toggle = true;

          if (typeof onClick === 'function') {
            toggle = onClick(e, index);
          }

          if (this.state.open === index) {
            index = -1;
          }

          if (toggle !== false) {
            this.setState({
              open: index
            });
          }
        }
      });
    });
  }

}
/**
 * Default properties
 * @type {Object}
 * @public
 */


exports["default"] = Base;
Base.defaultProps = {
  open: -1
};
/**
 * Property validation.
 *
 * @type {Object}
 * @public
 */

Base.propTypes = {
  /** Which panel should be open by default. */
  open: _propTypes.default.number,

  /** The actual collapsible panels. */
  children: _propTypes.default.node.isRequired,

  /** The title for the accordion. */
  title: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.element]),

  /** Developer indicates start index */
  startTabIndex: _propTypes.default.number
};

/***/ }),

/***/ "../../components/accordion/lib/index.js":
/*!***********************************************!*\
  !*** ../../components/accordion/lib/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _accordion = _interopRequireDefault(__webpack_require__(/*! ./accordion */ "../../components/accordion/lib/accordion.js"));
/**
 * Accordion, or a wrapper that orchestrates multiple panels.
 *
 * @displayName Accordion (Web)
 * @class Accordion
 * @public
 */


class Accordion extends _accordion.default {
  /**
   * Renders the title element, if title is defined and not empty.
   *
   * @returns {React.DOM} renders accordion title
   * @private
   */
  title() {
    if (typeof this.props.title !== 'undefined' && this.props.title !== '') {
      return /*#__PURE__*/_react.default.createElement("h1", {
        className: "text-center"
      }, this.props.title);
    }

    return null;
  }
  /**
   * Render the accordion.
   *
   * @returns {React.DOM} Wrapping div for the accordion
   * @private
   */


  render() {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: this.props.className
    }, this.title(), /*#__PURE__*/_react.default.createElement("div", {
      className: "ux-accordion",
      "aria-multiselectable": "true",
      role: "tablist",
      "aria-live": "polite"
    }, this.panels()));
  }

}
/**
 * Property validation.
 *
 * @type {object}
 * @public
 */


exports["default"] = Accordion;
Accordion.propTypes = {
  /** Which panel should be open by default. */
  open: _propTypes.default.number,

  /** The actual collapsible panels. */
  children: _propTypes.default.node.isRequired,

  /** The title for the accordion. */
  title: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.element]),

  /** Optional className */
  className: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object, _propTypes.default.array])
};

/***/ }),

/***/ "../../components/alert/lib/index.js":
/*!*******************************************!*\
  !*** ../../components/alert/lib/index.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../../node_modules/@babel/runtime/helpers/defineProperty.js"));

var _extends2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ "../../../node_modules/@babel/runtime/helpers/extends.js"));

var _objectWithoutProperties2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/objectWithoutProperties */ "../../../node_modules/@babel/runtime/helpers/objectWithoutProperties.js"));

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _classnames = _interopRequireDefault(__webpack_require__(/*! classnames */ "../../../node_modules/classnames/index.js"));

var _dialog = _interopRequireDefault(__webpack_require__(/*! @ux/dialog */ "../../components/dialog/lib/index.js"));

var _legacy = __webpack_require__(/*! ./legacy */ "../../components/alert/lib/legacy.js");

const _excluded = ["children", "emphasis", "className"];

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      (0, _defineProperty2.default)(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

const UX_ALERT_CLASSNAME = 'ux-alert';

function Alert(props) {
  const {
    children,
    emphasis,
    className
  } = props,
        rest = (0, _objectWithoutProperties2.default)(props, _excluded);
  return /*#__PURE__*/_react.default.createElement(_dialog.default, (0, _extends2.default)({
    role: "alert",
    contrast: true,
    emphasis: emphasis,
    className: (0, _classnames.default)(UX_ALERT_CLASSNAME, className, {
      [`${UX_ALERT_CLASSNAME}--${emphasis}`]: emphasis && _dialog.default.ACCESSORIES[emphasis]
    }),
    stretch: true
  }, (0, _legacy.transform)(rest)), children);
}

Alert.propTypes = _objectSpread({}, _dialog.default.propTypes);
var _default = Alert;
exports["default"] = _default;

/***/ }),

/***/ "../../components/alert/lib/legacy.js":
/*!********************************************!*\
  !*** ../../components/alert/lib/legacy.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.transform = transform;

var _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../../node_modules/@babel/runtime/helpers/defineProperty.js"));

var _objectWithoutProperties2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/objectWithoutProperties */ "../../../node_modules/@babel/runtime/helpers/objectWithoutProperties.js"));

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _text = _interopRequireDefault(__webpack_require__(/*! @ux/text */ "../../components/text/lib/index.js"));

const _excluded = ["title", "button", "actions"];

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      (0, _defineProperty2.default)(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}
/**
 * Converts the legacy configuration object into props for <Dialog/>
 *
 * @param {Object} config - Configuration object
 * @param {String|Node} - Title of the alert
 * @param {Component} button - Legacy container for the alert
 * @param {Component} actions - New actions for the alert
 * @returns {Object} - A converted props object for <Dialog/>
 */


function transform(config) {
  const {
    title,
    button,
    actions
  } = config,
        rest = (0, _objectWithoutProperties2.default)(config, _excluded);
  warn(config);
  return _objectSpread({
    title: typeof title === 'string' ? /*#__PURE__*/_react.default.createElement(_text.default.h2, {
      text: title,
      as: "title"
    }) : title,
    actions: button || actions
  }, rest);
}

const warnings = new Set();
/**
 * Warns when the shim is used
 *
 * @param {Object} props - Configuration object
 * @param {Component} button - Legacy container for the alert
 */

function warn(props) {
  const {
    button
  } = props;

  if (button) {
    const warning = 'Prop `button` for <Alert/> will be removed in v2201, please replace with `actions`';
    !warnings.has(warning) && warnings.add(warning) && console.warn(warning);
  }
}

/***/ }),

/***/ "../../components/button/lib/index.js":
/*!********************************************!*\
  !*** ../../components/button/lib/index.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ "../../../node_modules/@babel/runtime/helpers/extends.js"));

var _objectWithoutProperties2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/objectWithoutProperties */ "../../../node_modules/@babel/runtime/helpers/objectWithoutProperties.js"));

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _classnames = _interopRequireDefault(__webpack_require__(/*! classnames */ "../../../node_modules/classnames/index.js"));

var _chevronDown = _interopRequireDefault(__webpack_require__(/*! @ux/icon/chevron-down */ "../../components/icon/chevron-down/index.js"));

var _linkArrow = _interopRequireDefault(__webpack_require__(/*! @ux/icon/link-arrow */ "../../components/icon/link-arrow/index.js"));

var _classes = _interopRequireDefault(__webpack_require__(/*! @ux/text/classes */ "../../components/text/lib/classes.js"));

var _windowNew = _interopRequireDefault(__webpack_require__(/*! @ux/icon/window-new */ "../../components/icon/window-new/index.js"));

const _excluded = ["active", "as", "className", "children", "design", "download", "external", "hidden", "href", "icon", "size", "text", "type"];
const UX_BUTTON_CLASSNAME = 'ux-button';
const designs = ['critical', 'inline', 'primary', 'secondary', 'control', 'stateless'];

function warn(props) {
  const {
    children,
    icon,
    text
  } = props;
  if (false) {}

  if (children) {
    console.warn(`Warning: The use of children elements within @ux/button is deprecated.
      Please use the 'text' prop instead.`);
  }

  const missingText = !(text || children);
  const missingLabel = !(props['aria-label'] || props['aria-labelledby']);

  if (icon && missingText && missingLabel) {
    console.warn(`Warning: Buttons may not be accessible containing only an icon,
      consider adding the 'aria-label' or 'aria-labelledby' prop to the @ux/button.`);
  }
}

function getDecorations(as, href) {
  const prepareIcon = {
    className: `${UX_BUTTON_CLASSNAME}-accessory`,
    role: 'presentation'
  };
  const decorations = {};

  switch (as) {
    case 'cta':
      decorations.icon = /*#__PURE__*/_react.default.createElement(_linkArrow.default, prepareIcon);
      break;

    case 'external':
      decorations.icon = /*#__PURE__*/_react.default.createElement(_windowNew.default, prepareIcon);
      break;

    default:
      break;
  }

  if (href) {
    return decorations;
  }

  switch (as) {
    case 'select':
      decorations.icon = /*#__PURE__*/_react.default.createElement(_chevronDown.default, prepareIcon);
      decorations.ariaActiveAttr = 'aria-expanded';
      break;

    case 'toggle':
      decorations.ariaActiveAttr = 'aria-checked';
      decorations.role = 'switch';
      break;

    default:
      decorations.ariaActiveAttr = 'aria-selected';
  }

  return decorations;
}

const Button = /*#__PURE__*/_react.default.forwardRef(function Button(props, ref) {
  const _ref = props || {},
        {
    active,
    as,
    className,
    children,
    design,
    download,
    external,
    hidden,
    href,
    icon,
    size,
    text,
    type = 'button'
  } = _ref,
        rest = (0, _objectWithoutProperties2.default)(_ref, _excluded); // Style explicitly omitted, do not override


  delete rest.style;
  warn(props);
  const TagName = href ? 'a' : 'button';
  const content = children && !text ? children : text;
  const decorations = getDecorations(as, href);
  const uxTextClasses = (0, _classes.default)({
    as: design !== 'inline' ? 'action' : null,
    size: size === 'small' ? -1 : 0
  });
  let iconComponent;

  if (icon) {
    const iconClassName = (0, _classnames.default)(`${UX_BUTTON_CLASSNAME}-icon`, icon.props.className);
    iconComponent = /*#__PURE__*/_react.default.cloneElement(icon, {
      className: iconClassName,
      role: 'presentation'
    });
  }

  return /*#__PURE__*/_react.default.createElement(TagName, (0, _extends2.default)({}, typeof active === 'boolean' && {
    [decorations.ariaActiveAttr]: active
  }, {
    className: (0, _classnames.default)(UX_BUTTON_CLASSNAME, className, uxTextClasses, {
      [`${UX_BUTTON_CLASSNAME}-${design}`]: designs.includes(design),
      [`${UX_BUTTON_CLASSNAME}-square`]: !content
    }),
    download: href && download,
    "aria-hidden": hidden,
    href: href,
    role: decorations.role,
    target: href && external ? '_blank' : null,
    type: !href ? type : null,
    ref: ref
  }, rest), iconComponent, content && /*#__PURE__*/_react.default.createElement("span", {
    className: `${UX_BUTTON_CLASSNAME}-text`
  }, content), decorations.icon);
});

Button.designs = designs;
Button.propTypes = {
  /** DEPRECATED prop to render children elements */
  children: _propTypes.default.node,

  /** Boolean for a11y support */
  active: _propTypes.default.bool,

  /** Displays the button with different properties and a11y support */
  as: _propTypes.default.oneOf(['cta', 'select', 'toggle', 'external']),

  /** Classes applied to a button for positioning purposes */
  className: _propTypes.default.string,

  /** Visual style of the component */
  design: _propTypes.default.oneOf(Button.designs),

  /** Allows for link to be downloadable and take optional download file name */
  download: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.string]),

  /** Link opens in a new tab/page */
  external: _propTypes.default.bool,

  /** Determines if the button should be visually hidden */
  hidden: _propTypes.default.bool,

  /** Uri for where a button links to, which turns a button into an <a> tag */
  href: _propTypes.default.string,

  /** Optional icon from @ux/icon for the button, appears on the left */
  // eslint-disable-next-line valid-jsdoc
  icon: function isIcon(props, propName, componentName) {
    return componentName.endsWith('Icon');
  },

  /** Id applied to a button */

  /** Size of the button */
  size: _propTypes.default.oneOf(['small']),

  /** Contents of the button */
  text: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),

  /** Button type */
  type: _propTypes.default.oneOf(['button', 'reset', 'submit'])
};
var _default = Button;
exports["default"] = _default;

/***/ }),

/***/ "../../components/collapsible/lib/index.js":
/*!*************************************************!*\
  !*** ../../components/collapsible/lib/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _reactTransitionGroup = __webpack_require__(/*! react-transition-group */ "../../../node_modules/react-transition-group/esm/index.js");

var _chevronDown = _interopRequireDefault(__webpack_require__(/*! @ux/icon/chevron-down */ "../../components/icon/chevron-down/index.js"));

var _indicator = _interopRequireDefault(__webpack_require__(/*! ./indicator */ "../../components/collapsible/lib/indicator.js"));

var _classNames = _interopRequireDefault(__webpack_require__(/*! @ux/component-utilities/lib/classNames */ "../../utils/component-utilities/lib/classNames.js"));

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}
/**
 * A single collapsible panel.
 *
 * @displayName Collapsible (Web)
 * @class Panel
 * @public
 */


class Panel extends _react.Component {
  constructor(props) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    super(props, ...args);
    this.state = {
      open: !!this.props.open
    };
    this.elements = {};
    this.onClick = this.onClick.bind(this);
    this.onKeyDown = this.onKeyDown.bind(this);
  }
  /**
   * When rendering the component as child of a different component, it can be
   * that this parent component wants to set a new open/close state on the
   * component. We need to correctly process these props and set the correct
   * open state again.
   *
   * @param {Object} prevProps THe previous props.
   * @private
   */


  componentDidUpdate(prevProps) {
    if (this.props.open !== prevProps.open) {
      this.setState({
        open: this.props.open
      });
    }
  }
  /**
   * Generate a generic id from the title.
   *
   * @returns {string} A generated id attribute.
   * @private
   */


  id() {
    if (this.props.id) return this.props.id;
    return this.props.title.toLowerCase().replace(/[\s]/g, '-');
  }
  /**
   * Handle clicks on the title/button of the collapsible panel, this can be
   * used to augment the default behavior if you want to have manual control
   * over the open and closing of the panel.
   *
   * @param {Event} e Browser event.
   * @private
   */


  onClick(e) {
    e.preventDefault();
    const open = !this.state.open;

    if (typeof this.props.onClick === 'function') {
      if (this.props.onClick(e, open) !== false) {
        this.setState({
          open
        });
      }

      return;
    }

    this.setState({
      open
    });
  }
  /**
   * Handle keyboard events for enter and space on the title/button of the
   * collapsible panel, this can be used to augment the default behavior if you
   * want to have manual control over the open and closing of the panel.
   *
   * @param {Event} e Browser event.
   * @private
   */


  onKeyDown(e) {
    const code = e.key;

    if (e.type === 'keydown' && (code === 'Enter' || code === ' ')) {
      this.onClick(e);
    }
  }
  /**
   * We're about to start the open animation. Set the height to 0 so we can
   * trigger transition in the next phase.
   *
   * @param {HTMLElement} node DOM Node.
   * @private
   */


  onEnter(node) {
    node.style.height = 0;
  }
  /**
   * Transition className has added, manipulate the height to trigger it.
   *
   * @param {HTMLElement} node DOM Node.
   * @private
   */


  onEntering(node) {
    node.style.height = node.scrollHeight + 'px';
  }
  /**
   * Animation has ended, transition class was removed. Remove the height.
   *
   * @param {HTMLElement} node DOM Node.
   * @private
   */


  onEntered(node) {
    node.style.height = '';
  }
  /**
   * We're about to exit, start prepping element for transition.
   *
   * @param {HTMLElement} node DOM Node.
   * @private
   */


  onExit(node) {
    node.style.height = node.offsetHeight + 'px';
    this.reflow(node);
  }
  /**
   * Transition className was added, manipulate height to trigger it.
   *
   * @param {HTMLElement} node DOM Node.
   * @private
   */


  onExiting(node) {
    node.style.height = 0;
  }
  /**
   * Force the browser to reflow, so it causes a re-render of a given section.
   *
   * @param {HTMLElement} node A DOM element.
   * @private
   */


  reflow(node) {
    void node.offsetHeight;
  }
  /**
   * Render the collapsible panel.
   *
   * @returns {React.DOM} Panel div.
   * @private
   */


  render() {
    const id = this.id();
    const wrapper = (0, _classNames.default)(this.props.className, 'panel panel-default');
    const indicator = this.props.indicator && !!this.props.indicator.icon && !!this.props.indicator.background;
    const button = (0, _classNames.default)('panel-button', {
      'collapsed': !this.state.open,
      'panel-indicator-shown': indicator
    });
    return /*#__PURE__*/_react.default.createElement("div", {
      className: wrapper
    }, /*#__PURE__*/_react.default.createElement("button", {
      role: "tab",
      className: button,
      id: id,
      "aria-controls": id + '-collapse',
      ref: r => {
        this.elements.header = r;
      },
      onClick: this.onClick,
      onKeyDown: this.onKeyDown,
      "aria-expanded": this.state.open
    }, /*#__PURE__*/_react.default.createElement(_indicator.default, this.props.indicator), /*#__PURE__*/_react.default.createElement("div", {
      className: "panel-title ux-text ux-text-size2 ux-text-title"
    }, this.props.title), /*#__PURE__*/_react.default.createElement("span", {
      className: "panel-icon"
    }, /*#__PURE__*/_react.default.createElement(_chevronDown.default, {
      width: 24,
      height: 24
    }))), /*#__PURE__*/_react.default.createElement(_reactTransitionGroup.CSSTransition, {
      classNames: {
        exitDone: 'collapse',
        exitActive: 'collapsing',
        appear: 'collapse in',
        appearActive: 'collapsing'
      },
      timeout: 350,
      mountOnEnter: true,
      in: this.state.open,
      onExit: this.onExit.bind(this),
      onEnter: this.onEnter.bind(this),
      onEntering: this.onEntering.bind(this),
      onEntered: this.onEntered.bind(this),
      onExiting: this.onExiting.bind(this)
    }, /*#__PURE__*/_react.default.createElement("div", {
      id: id + '-collapse',
      ref: r => {
        this.elements.body = r;
      },
      className: "panel-collapse",
      "aria-labelledby": id,
      role: "tabpanel",
      "aria-hidden": !this.state.open
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "panel-content"
    }, this.props.children))));
  }

}
/**
 * Property validation.
 *
 * @type {Object}
 * @public
 */


exports["default"] = Panel;
Panel.propTypes = {
  /** Render the panel opened or closed. */
  open: _propTypes.default.bool,

  /** Handler to run when the collapsible heading is clicked. */
  onClick: _propTypes.default.func,

  /** The element to show inside of the collapsible. */
  children: _propTypes.default.node,

  /** The title for the collapsible. */
  title: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.element]).isRequired,

  /** Handler for keyDown events on the collapsible. */
  onKeyDown: _propTypes.default.func,

  /** Optional unique identifier for the collapsible, used for ARIA references. */
  id: _propTypes.default.string,

  /** Props to pass down to the {@link Indicator} component. No indicator is shown when this prop is omitted. */
  indicator: _propTypes.default.shape({
    /** Name of the icon to display. */
    icon: _propTypes.default.elementType,

    /** Background class to use. */
    background: _propTypes.default.string
  }),

  /** Optional class name. */
  className: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object, _propTypes.default.array])
};

/***/ }),

/***/ "../../components/collapsible/lib/indicator.js":
/*!*****************************************************!*\
  !*** ../../components/collapsible/lib/indicator.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = Indicator;

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _classnames = _interopRequireDefault(__webpack_require__(/*! classnames */ "../../../node_modules/classnames/index.js"));
/**
 * Indicator icon
 *
 * @displayName Indicator (Web)
 * @class Indicator
 * @public
 */


function Indicator(_ref) {
  let {
    icon,
    background
  } = _ref;
  if (!(!!icon && !!background)) return null;
  const Icon = icon;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)(background, 'panel-indicator')
  }, /*#__PURE__*/_react.default.createElement(Icon, null));
}

Indicator.propTypes = {
  /** Name of the icon to display. */
  icon: _propTypes.default.elementType,

  /** Background class to use. */
  background: _propTypes.default.string
};

/***/ }),

/***/ "../../components/dialog/lib/accessories.js":
/*!**************************************************!*\
  !*** ../../components/dialog/lib/accessories.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.ACCESSORIES = void 0;

var _checkmark = _interopRequireDefault(__webpack_require__(/*! @ux/icon/checkmark */ "../../components/icon/checkmark/index.js"));

var _information = _interopRequireDefault(__webpack_require__(/*! @ux/icon/information */ "../../components/icon/information/index.js"));

var _comment = _interopRequireDefault(__webpack_require__(/*! @ux/icon/comment */ "../../components/icon/comment/index.js"));

var _alert = _interopRequireDefault(__webpack_require__(/*! @ux/icon/alert */ "../../components/icon/alert/index.js"));

var _help = _interopRequireDefault(__webpack_require__(/*! @ux/icon/help */ "../../components/icon/help/index.js"));

var _star = _interopRequireDefault(__webpack_require__(/*! @ux/icon/star */ "../../components/icon/star/index.js"));
/**
 * Type to icon mapping. Can be extended with more types if needed.
 *
 * @type {Object}
 * @public
 */


const ACCESSORIES = {
  critical: _alert.default,
  warning: _alert.default,
  highlight: _star.default,
  success: _checkmark.default,
  info: _information.default,
  neutral: _help.default,
  internal: _comment.default
};
exports.ACCESSORIES = ACCESSORIES;

/***/ }),

/***/ "../../components/dialog/lib/index.js":
/*!********************************************!*\
  !*** ../../components/dialog/lib/index.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ "../../../node_modules/@babel/runtime/helpers/extends.js"));

var _objectWithoutProperties2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/objectWithoutProperties */ "../../../node_modules/@babel/runtime/helpers/objectWithoutProperties.js"));

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _classnames = _interopRequireDefault(__webpack_require__(/*! classnames */ "../../../node_modules/classnames/index.js"));

var _classes = _interopRequireDefault(__webpack_require__(/*! @ux/text/classes */ "../../components/text/lib/classes.js"));

var _button = _interopRequireDefault(__webpack_require__(/*! @ux/button */ "../../components/button/lib/index.js"));

var _siblingSet = _interopRequireDefault(__webpack_require__(/*! @ux/sibling-set */ "../../components/sibling-set/lib/index.js"));

var _x = _interopRequireDefault(__webpack_require__(/*! @ux/icon/x */ "../../components/icon/x/index.js"));

var _accessories = __webpack_require__(/*! ./accessories */ "../../components/dialog/lib/accessories.js");

const _excluded = ["actions", "ariaLabels", "children", "contrast", "className", "emphasis", "icon", "id", "onClose", "stretch", "title"];
const UX_DIALOG_CLASSNAME = 'ux-dialog';
/**
 * Returns a close button
 *
 * @param {Object} props - Component props
 * @param {Object} [props.ariaLabels] - ARIA label configuration object
 * @param {Function} [props.onClose] - Callback to fire when a user interacts with the button
 * @returns {Button} - Provides the close button
 */

function getCloseButton(_ref) {
  let {
    ariaLabels,
    onClose
  } = _ref;
  if (typeof onClose !== 'function') return null;
  return /*#__PURE__*/_react.default.createElement("span", {
    className: `${UX_DIALOG_CLASSNAME}-float`
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    "aria-label": ariaLabels && ariaLabels.close || 'Close',
    icon: /*#__PURE__*/_react.default.createElement(_x.default, null),
    className: `${UX_DIALOG_CLASSNAME}-close`,
    design: "stateless",
    onClick: onClose
  }));
}
/**
 * Determines the icon based on emphasis
 *
 * @param {String} emphasis - One of several possible emphasis types
 * @returns {Component} - An icon based on given emphasis type
 */


function getEmphasisIcon(emphasis) {
  if (emphasis && _accessories.ACCESSORIES[emphasis]) {
    const Accessory = _accessories.ACCESSORIES[emphasis];
    return /*#__PURE__*/_react.default.createElement(Accessory, {
      className: `${UX_DIALOG_CLASSNAME}-accessory--${emphasis}`,
      role: "presentation"
    });
  }

  return null;
}
/**
 * Prepares the icon for the dialog
 *
 * @param {Object} props - Component props
 * @param {Boolean} [props.emphasis] - Provide emphasis for the component
 * @param {Component} [props.icon] - Adds icon component
 * @returns {Component} - <Icon/> component
 */


function Icon(props) {
  const {
    emphasis,
    icon
  } = props || {};
  const className = `${UX_DIALOG_CLASSNAME}-icon`;
  if (emphasis) return /*#__PURE__*/_react.default.createElement("div", {
    className: className
  }, getEmphasisIcon(emphasis));
  if (icon) return /*#__PURE__*/_react.default.createElement("div", {
    className: className
  }, /*#__PURE__*/_react.default.cloneElement(icon, {
    role: 'presentation'
  }));
  return null;
}
/**
 * Creates a Dialog component
 *
 * @param {Object} props - Component props
 * @param {Components} [props.actions] - Actions as @ux/button components
 * @param {Object} [props.ariaLabels] - ARIA label configuration object
 * @param {Elements} props.children - Content for the component
 * @param {String} [props.className] - Adds a className
 * @param {Boolean} [props.contrast] - Provides a contrast overlay to the component
 * @param {Boolean} [props.emphasis] - Provide emphasis for the component
 * @param {Component} [props.icon] - Adds icon component
 * @param {String} props.id - Assigns title to component for a11y
 * @param {Function} [props.onClose] - Callback to fire when a user interacts with the button
 * @param {Boolean|Number} [props.padding] - Adds padding to container
 * @param {Boolean} [props.stretch] - Stretches full width of container
 * @param {Component} props.title - Title of the component, using @ux/text
 * @returns {Component} - <Dialog/> component
 */


function Dialog(props) {
  const {
    actions,
    ariaLabels,
    children,
    contrast,
    className,
    emphasis,
    icon,
    id,
    onClose,
    stretch,
    title
  } = props,
        rest = (0, _objectWithoutProperties2.default)(props, _excluded);
  delete rest.style;
  return /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({
    className: (0, _classnames.default)(`${UX_DIALOG_CLASSNAME}-shell`, className, (0, _classes.default)(), {
      [`${UX_DIALOG_CLASSNAME}--contrast`]: contrast,
      [`${UX_DIALOG_CLASSNAME}--stretch`]: stretch
    }),
    "aria-labelledby": id
  }, rest), /*#__PURE__*/_react.default.createElement(Icon, {
    emphasis: emphasis,
    icon: icon
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: `${UX_DIALOG_CLASSNAME}-details`
  }, getCloseButton({
    onClose,
    ariaLabels
  }), title && /*#__PURE__*/_react.default.createElement("div", {
    id: id,
    className: `${UX_DIALOG_CLASSNAME}-title`
  }, title), /*#__PURE__*/_react.default.createElement("div", {
    className: `${UX_DIALOG_CLASSNAME}-content`
  }, children), actions && /*#__PURE__*/_react.default.createElement(_siblingSet.default, {
    gap: "md",
    orientation: "horizontal",
    className: `${UX_DIALOG_CLASSNAME}-actions`
  }, actions)));
}

Dialog.ACCESSORIES = _accessories.ACCESSORIES;
Dialog.propTypes = {
  /** Adds actions */
  actions: _propTypes.default.node,

  /** Screenreader labels for sub-elements */
  ariaLabels: _propTypes.default.shape({
    /** Screen reader label for close button */
    close: _propTypes.default.string
  }),

  /** Provides a contrast overlay to the component */
  contrast: _propTypes.default.bool,

  /** Class name applied to component */
  className: _propTypes.default.string,

  /** Additional detail content */
  children: _propTypes.default.node,

  /** Describes the importance of the message */
  emphasis: _propTypes.default.oneOf(Object.keys(_accessories.ACCESSORIES)),

  /** Adds icon to the title */
  // eslint-disable-next-line valid-jsdoc
  icon: function isIcon(props, propName, componentName) {
    return componentName.endsWith('Icon');
  },

  /** Assigns title to component for a11y */
  id: _propTypes.default.string,

  /** Callback function when component is closed */
  onClose: _propTypes.default.func,

  /** Stretches full width of container */
  stretch: _propTypes.default.bool,

  /** Adds title with @ux/text */
  title: _propTypes.default.node
};
var _default = Dialog;
exports["default"] = _default;

/***/ }),

/***/ "../../components/disrupt/lib/index.js":
/*!*********************************************!*\
  !*** ../../components/disrupt/lib/index.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _reactDom = _interopRequireDefault(__webpack_require__(/*! react-dom */ "../../../node_modules/react-dom/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _reactFocusLock = _interopRequireDefault(__webpack_require__(/*! react-focus-lock */ "../../../node_modules/react-focus-lock/dist/es2015/index.js"));

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}
/* eslint-disable jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions */
// The keyboard listener is added to the document and while this is presentational, the contents are not.


const UX_DISRUPT_CLASSNAME = 'ux-disrupt';
const UX_DISRUPT_FOCUSLOCK_DEFAULTS = {
  autoFocus: true,
  disabled: false,
  returnFocus: true
};
const UX_DISRUPT_SHADOWROOT_MSG = 'Warning: <Disrupt portalElem={ ShadowRoot }/> is not supported; use a DOM Element instead.';
/**
 * Toggles the data-inert attribute, for managing multiple possible disruptions
 *
 * @param {Element} parent - The parent of the component
 * @param {Boolean} inert - Determines if the inert attribute should be added or removed
 */

function manageInert(parent, inert) {
  const amount = Number(inert) * 2 - 1;
  const value = Number(parent.getAttribute('data-inert')) + amount;

  if (value) {
    parent.setAttribute('data-inert', value);
  } else {
    parent.removeAttribute('data-inert');
  }
}
/**
 * Create a <Disrupt/> component
 *
 * @param {Object} props - Properties to inform the component
 * @param {Elements} [props.children] - Given children for the content container
 * @param {Boolean|Object} [props.focusLock] - Can either toggle focus lock or configure it
 * @param {Function} [props.onClose] - Callback which fires when the user attempts to leave
 * @param {Function} [prop.onEventBehind] - Callback which fires when an event occurs behind the component
 * @param {Element} [prop.portalElem] - The element to attach the component
 * @param {String} [prop.strategy] - The method that the backdrop is attached
 * @param {Boolean} [props.stretch] - Occupy the full width of the container
 * @returns {Component} - The Disrupt component
 */


function Disrupt(props) {
  const {
    children,
    focusLock = false,
    onClose,
    onEventBehind,
    portalElem,
    strategy,
    stretch
  } = props;
  const style = {
    position: strategy || 'absolute'
  };
  const componentRef = (0, _react.useRef)(null);
  let focusLockProps = {
    disabled: true
  };

  if (focusLock) {
    focusLockProps = typeof focusLock === 'boolean' ? UX_DISRUPT_FOCUSLOCK_DEFAULTS : focusLock;
  }

  (0, _react.useEffect)(function effect() {
    // Determine the element where the component is attached
    const parent = portalElem || componentRef.current.parentElement; // Cannot add functionality when mounted to shadow root

    if (parent instanceof window.ShadowRoot) {
       true && console.warn(UX_DISRUPT_SHADOWROOT_MSG);
      return;
    } // Function for catching events that occur behind the disruption


    function eventBehind(ev) {
      const insideParent = parent.contains(ev.target);
      const insideComponent = componentRef.current.contains(ev.target);
      if (insideParent && !insideComponent) onEventBehind(ev);
    } // Set a data-attribute on the parent that _shouldn't_ be clobbered by re-renders


    manageInert(parent, true); // Listen to all the things

    typeof onEventBehind === 'function' && parent.addEventListener('click', eventBehind);
    typeof onEventBehind === 'function' && parent.addEventListener('focusin', eventBehind);
    return function teardown() {
      if (parent instanceof window.ShadowRoot) return; // Teardown

      manageInert(parent, false);
      parent.removeEventListener('click', eventBehind);
      parent.removeEventListener('focusin', eventBehind);
    };
  }, [portalElem, onEventBehind, onClose]);
  const classNames = [`${UX_DISRUPT_CLASSNAME}-content`];

  if (stretch) {
    classNames.push(`${UX_DISRUPT_CLASSNAME}--stretch`);
  }
  /**
   * handleOutsideEvent - only fires the onClose event when the click occurs on backdrop
   * @param {React.SyntheticEvent} ev - onMouseDown event
   */


  const handleOutsideEvent = (0, _react.useCallback)(function handleOutsideEvent(ev) {
    // Selecting text will incorrectly fire cause this to fire, check if user is selecting text
    const selection = typeof window.getSelection === 'function' && window.getSelection().toString();

    if (ev.target === ev.currentTarget && ev.target === componentRef.current && !selection) {
      typeof onClose === 'function' && onClose(ev);
    }
  }, [onClose]);
  /**
   * handleKeyDown - only fires the onClose event when escape key is pressed on backdrop
   * @param {React.SyntheticEvent} ev - onKeyDown event
   */

  const handleKeyDown = (0, _react.useCallback)(function onKeyDown(ev) {
    if (ev.key !== 'Escape') return;
    ev.stopPropagation();
    typeof onClose === 'function' && onClose(ev);
  }, [onClose]);

  const component = /*#__PURE__*/_react.default.createElement("div", {
    className: `${UX_DISRUPT_CLASSNAME}-backdrop`,
    ref: componentRef,
    onClickCapture: handleOutsideEvent,
    onKeyDown: handleKeyDown,
    style: style
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: classNames.join(' ')
  }, /*#__PURE__*/_react.default.createElement(_reactFocusLock.default, focusLockProps, /*#__PURE__*/_react.default.createElement("div", {
    tabIndex: -1
  }, children))));

  return portalElem ? /*#__PURE__*/_reactDom.default.createPortal(component, portalElem) : component;
}

Disrupt.propTypes = {
  /** Children to render within */
  children: _propTypes.default.node,

  /** Defaults to false. If `true`, enables focus lock with default options. If object, passes props directly to react-focus-lock */
  focusLock: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.object]),

  /** Callback that fires when the user attempts to leave the component */
  onClose: _propTypes.default.func,

  /** Callback that fires when an event occurs behind the component */
  onEventBehind: _propTypes.default.func,

  /** Element to attach the component to, use document.body for "modal" behavior */
  portalElem: _propTypes.default.object,

  /** Method to attach the backdrop */
  strategy: _propTypes.default.oneOf(['absolute', 'fixed']),

  /** Stretches the width of the container */
  stretch: _propTypes.default.bool
};
var _default = Disrupt;
exports["default"] = _default;

/***/ }),

/***/ "../../components/dropdown/lib/dropdown-control.js":
/*!*********************************************************!*\
  !*** ../../components/dropdown/lib/dropdown-control.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../../node_modules/@babel/runtime/helpers/defineProperty.js"));

var _extends2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ "../../../node_modules/@babel/runtime/helpers/extends.js"));

var _objectWithoutProperties2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/objectWithoutProperties */ "../../../node_modules/@babel/runtime/helpers/objectWithoutProperties.js"));

var _chevronDown = _interopRequireDefault(__webpack_require__(/*! @ux/icon/chevron-down */ "../../components/icon/chevron-down/index.js"));

var _ellipsis = _interopRequireDefault(__webpack_require__(/*! @ux/icon/ellipsis */ "../../components/icon/ellipsis/index.js"));

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _classNames = _interopRequireDefault(__webpack_require__(/*! @ux/component-utilities/lib/classNames */ "../../utils/component-utilities/lib/classNames.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _clock = _interopRequireDefault(__webpack_require__(/*! @ux/icon/clock */ "../../components/icon/clock/index.js"));

var _button = _interopRequireDefault(__webpack_require__(/*! @ux/button */ "../../components/button/lib/index.js"));

var _ripOut = _interopRequireDefault(__webpack_require__(/*! rip-out */ "../../../node_modules/rip-out/index.js"));

const _excluded = ["type", "toggle", "ariaLabels", "aria-controls", "id"],
      _excluded2 = ["type", "className", "toggle", "split", "id", "ariaLabels", "forwardedRef"];

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      (0, _defineProperty2.default)(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}
/**
 * Create a triple dot icon.
 *
 * @function TripleDot
 * @returns {React.ReactElement} tripledot element
 * @private
 */


function TripleDot() {
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "tripledot"
  }, /*#__PURE__*/_react.default.createElement(_ellipsis.default, {
    width: 20,
    height: 20
  }));
}
/**
 * Create two buttons rendered as split dropdown.
 *
 * @function DropdownSplit
 * @returns {React.ReactElement} split button element
 * @private
 */


function DropdownSplit(_ref) {
  let {
    type,
    toggle,
    ariaLabels,
    'aria-controls': ariaControls,
    id
  } = _ref,
      other = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "btn-group"
  }, /*#__PURE__*/_react.default.createElement(_button.default, (0, _extends2.default)({}, other, {
    design: _button.default.designs.includes(type) ? type : null,
    className: "dropdown-split"
  })), /*#__PURE__*/_react.default.createElement(_button.default, {
    id: id,
    "aria-haspopup": "listbox",
    "aria-controls": ariaControls,
    design: _button.default.designs.includes(type) ? type : null,
    onClick: toggle,
    className: "dropdown-toggle dropdown-toggle-split btn-dropdown",
    as: "select",
    "aria-label": ariaLabels.dropdownButton
  }));
}
/**
 * Type property of split dropdown.
 *
 * @enum {Object} propTypes
 * @public
 */


DropdownSplit.propTypes = {
  'toggle': _propTypes.default.func,
  'type': _propTypes.default.string,
  'aria-controls': _propTypes.default.string,
  'ariaLabels': _propTypes.default.shape({
    dropdownButton: _propTypes.default.string
  }),
  'id': _propTypes.default.string
};
/**
 * Create button control that optionally renders split buttons.
 *
 * @class DropdownButton
 * @private
 */

class DropdownButton extends _react.Component {
  render() {
    const props = (0, _ripOut.default)(this.props, 'toggleIcon', 'hasPlaceholder');
    const {
      type,
      className,
      toggle,
      split,
      id,
      ariaLabels,
      forwardedRef
    } = props,
          other = (0, _objectWithoutProperties2.default)(props, _excluded2);

    if (split) {
      return /*#__PURE__*/_react.default.createElement(DropdownSplit, (0, _extends2.default)({
        type: type,
        toggle: toggle,
        id: id,
        ariaLabels: ariaLabels
      }, other));
    }

    return /*#__PURE__*/_react.default.createElement(_button.default, (0, _extends2.default)({
      id: id,
      "aria-haspopup": "listbox",
      "aria-controls": props['aria-controls'],
      active: props.open
    }, other, {
      design: _button.default.designs.includes(type) ? type : null,
      onClick: toggle,
      as: "select",
      className: (0, _classNames.default)(className, 'dropdown-toggle btn-dropdown')
    }), props.children);
  }

}
/**
 * Toggle and split properties of the button.
 *
 * @enum {Object} propTypes
 * @public
 */


DropdownButton.propTypes = {
  'toggle': _propTypes.default.func,
  'aria-controls': _propTypes.default.string,
  'split': _propTypes.default.bool,
  'disabled': _propTypes.default.bool,
  'hasPlaceholder': _propTypes.default.bool
};
/**
 * Create select control.
 *
 * @class DropdownSelect
 * @private
 */

class DropdownSelect extends _react.Component {
  constructor() {
    super(...arguments);
    this.onKeyDown = this.onKeyDown.bind(this);
    this.keycodes = {
      Space: function (type) {
        return type !== 'multiselect';
      },
      Enter: 'toggle',
      Escape: 'keydown',
      ArrowUp: 'keydown',
      ArrowDown: 'keydown'
    };
  }
  /**
   * Triggers toggle on keypress of enter or spacebar
   *
   * @param {SyntheticEvent} e React Keyboard event.
   * @private
   */


  onKeyDown(e) {
    //
    // IE11 does not include "code" and provides a different value for "key"
    // than other browsers. e.g.:
    //
    //   - IE11:    { "key": "Spacebar", "keyCode": 32, "which": 32 }
    //   - Chrome:  { "code": "Space", "key": " ", "keyCode": 32, "which": 32 }
    //   - Firefox: { "code": "Space", "key": " ", "keyCode": 32, "which": 32 }
    //   - Safari:  { "keyCode": 32, "which": 32 }
    //
    // Thankfully React normalizes these into `e.key` in their SyntheticEvent
    // See: https://facebook.github.io/react/docs/events.html#keyboard-events
    //
    const key = e.key;
    const accepts = this.keycodes[key];

    if (accepts) {
      e.preventDefault();
      this.props.onKeyDown(e);

      if (accepts === 'toggle' || typeof accepts === 'function' && accepts(this.props.type)) {
        this.props.toggle(e);
      }
    }
  }

  render() {
    const props = this.props;
    let eventHandlers = {};

    if (!props.disabled) {
      eventHandlers = {
        onClick: props.toggle,
        onKeyDown: this.onKeyDown
      };
    }

    const {
      forwardedRef
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({
      ref: forwardedRef,
      "aria-disabled": props.disabled,
      "aria-labelledby": props['aria-labelledby'],
      "aria-label": props.ariaLabels.menu,
      "aria-controls": props['aria-controls'],
      "aria-haspopup": "listbox",
      "aria-expanded": props.open,
      role: 'button'
    }, eventHandlers, {
      tabIndex: props.tabIndex,
      id: props.id ? `${props.id}-menu` : '',
      className: (0, _classNames.default)('form-control', {
        'form-control-lg': props.size === 'large',
        'form-control-sm': props.size === 'small',
        'form-control-merch': props.merch,
        'placeholder': props.hasPlaceholder
      })
    }), props.type !== 'tripledot' && props.type !== 'custom' && props.toggleIcon !== 'clock' && /*#__PURE__*/_react.default.createElement("div", {
      className: 'dropdown-toggle',
      role: 'button',
      "aria-hidden": 'true'
    }, /*#__PURE__*/_react.default.createElement(_chevronDown.default, null)), props.type === 'select' && props.toggleIcon === 'clock' && /*#__PURE__*/_react.default.createElement("div", {
      className: "timepicker"
    }, /*#__PURE__*/_react.default.createElement(_clock.default, null)), /*#__PURE__*/_react.default.createElement("div", {
      className: "dropdown-text"
    }, props.children));
  }

}

DropdownSelect.defaultProps = {
  tabIndex: 0
};
/**
 * Toggle property of the control.
 *
 * @enum {Object} propTypes
 * @public
 */

DropdownSelect.propTypes = {
  'tabIndex': _propTypes.default.oneOf([-1, 0]),
  'toggle': _propTypes.default.func,
  'disabled': _propTypes.default.bool,
  'onKeyDown': _propTypes.default.func,
  'toggleIcon': _propTypes.default.oneOf(['clock', 'dropdown']),
  'hasPlaceholder': _propTypes.default.bool,
  'size': _propTypes.default.oneOf(['large', 'small', 'default']),
  'children': _propTypes.default.node,
  'type': _propTypes.default.string,
  'aria-labelledby': _propTypes.default.string,
  'ariaLabels': _propTypes.default.object,
  'id': _propTypes.default.string,
  'aria-controls': _propTypes.default.string,
  'merch': _propTypes.default.bool,
  'open': _propTypes.default.bool,
  'forwardedRef': _propTypes.default.any
};

const DropdownSelectForwarded = /*#__PURE__*/_react.default.forwardRef((localProps, ref) => /*#__PURE__*/_react.default.createElement(DropdownSelect, (0, _extends2.default)({
  forwardedRef: ref
}, localProps)));
/**
 * DropdownControl creates a select or button dropdown. Each control gets different
 * properties.
 *
 * @class DropdownControl
 * @displayName DropdownControl (Web)
 * @public
 */


class DropdownControl extends _react.Component {
  constructor() {
    super(...arguments);
    this.ariaLabels = _objectSpread(_objectSpread({}, DropdownControl.defaultProps.ariaLabels), this.props.ariaLabels);
  }

  render() {
    const props = _objectSpread(_objectSpread({}, this.props), {}, {
      ariaLabels: this.ariaLabels
    });

    switch (props.type) {
      case 'select':
      case 'multiselect':
        return /*#__PURE__*/_react.default.createElement(DropdownSelectForwarded, (0, _extends2.default)({
          ref: props.forwardedRef
        }, props));

      case 'tripledot':
        return /*#__PURE__*/_react.default.createElement(DropdownSelectForwarded, (0, _extends2.default)({
          ref: props.forwardedRef
        }, props), /*#__PURE__*/_react.default.createElement(TripleDot, null));

      case 'custom':
        return /*#__PURE__*/_react.default.createElement(DropdownSelectForwarded, (0, _extends2.default)({
          ref: props.forwardedRef
        }, props), props.content);

      case 'button':
      default:
        return /*#__PURE__*/_react.default.createElement(DropdownButton, props);
    }
  }

}
/**
 * Do not split the button by default.
 *
 * @enum {Object} defaultProps
 * @public
 */


DropdownControl.defaultProps = {
  type: 'button',
  split: false,
  ariaLabels: {
    dropdownButton: 'Open menu',
    menu: 'Menu',
    open: 'Opened dropdown',
    close: 'Closed dropdown'
  }
};
/**
 * Type and split properties of the control.
 *
 * @enum {Object} propTypes
 * @public
 */

DropdownControl.propTypes = {
  /** Type of dropdown control */
  'type': _propTypes.default.string,

  /** Boolean whether the dropdown button is split */
  'split': _propTypes.default.bool,

  /** Boolean whether the dropdown button is disabled */
  'disabled': _propTypes.default.bool,

  /** Icon shown for toggling */
  'toggleIcon': _propTypes.default.oneOf(['clock', 'dropdown']),

  /** Boolean whether the placeholder text is provided */
  'hasPlaceholder': _propTypes.default.bool,

  /** Boolean whether merchandising styles should apply */
  'merch': _propTypes.default.bool,

  /** String the element that labels this control */
  'aria-labelledby': _propTypes.default.string,

  /** String element that labels the aria-controls */
  'aria-controls': _propTypes.default.string,

  /** Content to be displayed */
  'content': _propTypes.default.node,

  /** Editable tabIndex of DropdownSelect, defaults to 0. */
  'tabIndex': _propTypes.default.oneOf([-1, 0]),

  /** Editable aria-label attribute */
  'ariaLabels': _propTypes.default.shape({
    dropdownButton: _propTypes.default.string,
    menu: _propTypes.default.string,
    open: _propTypes.default.string,
    close: _propTypes.default.string
  }),

  /** ID attribute for the dropdown */
  'id': _propTypes.default.string,
  'forwardedRef': _propTypes.default.any
};

var _default = /*#__PURE__*/_react.default.forwardRef((localProps, ref) => /*#__PURE__*/_react.default.createElement(DropdownControl, (0, _extends2.default)({
  forwardedRef: ref
}, localProps)));

exports["default"] = _default;

/***/ }),

/***/ "../../components/dropdown/lib/dropdown-divider.js":
/*!*********************************************************!*\
  !*** ../../components/dropdown/lib/dropdown-divider.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = DropdownDivider;

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));
/**
 * Create divider which visually seperates DropdownItems.
 *
 * @function DropdownDivider
 * @returns {React.ReactComponent} DropdownDivider
 * @displayName DropdownDivider (Web)
 * @public
 */


function DropdownDivider() {
  return /*#__PURE__*/_react.default.createElement("hr", {
    role: "presentation",
    className: "dropdown-divider"
  });
}

/***/ }),

/***/ "../../components/dropdown/lib/dropdown-header.js":
/*!********************************************************!*\
  !*** ../../components/dropdown/lib/dropdown-header.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = DropdownHeader;

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));
/**
 * Create a header which can highlight a set of DropdownItems.
 *
 * @class DropdownHeader
 * @displayName DropdownHeader (Web)
 * @public
 */


function DropdownHeader(_ref) {
  let {
    children
  } = _ref;
  return /*#__PURE__*/_react.default.createElement("div", {
    role: "heading",
    "aria-level": "1",
    className: "dropdown-header title small"
  }, children);
}
/**
 * Children should be provided.
 *
 * @enum {Object} propTypes
 * @public
 */


DropdownHeader.propTypes = {
  /** Contents of a dropdown header */
  children: _propTypes.default.node.isRequired
};

/***/ }),

/***/ "../../components/dropdown/lib/dropdown-item.js":
/*!******************************************************!*\
  !*** ../../components/dropdown/lib/dropdown-item.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../../node_modules/@babel/runtime/helpers/defineProperty.js"));

var _extends2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ "../../../node_modules/@babel/runtime/helpers/extends.js"));

var _objectWithoutProperties2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/objectWithoutProperties */ "../../../node_modules/@babel/runtime/helpers/objectWithoutProperties.js"));

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _ripOut = _interopRequireDefault(__webpack_require__(/*! rip-out */ "../../../node_modules/rip-out/index.js"));

var _classNames = _interopRequireDefault(__webpack_require__(/*! @ux/component-utilities/lib/classNames */ "../../utils/component-utilities/lib/classNames.js"));

const _excluded = ["isSelected", "type", "disabled", "tabIndex"];

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      (0, _defineProperty2.default)(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}
/**
 * Create input checkbox element, which is used for the multiselect.
 *
 * @class CheckboxItem
 * @displayName CheckboxItem (Web)
 * @public
 */


class CheckboxItem extends _react.PureComponent {
  /**
  * Handles when the spacebar is pressed to change the selection
  *
  * @param {React.KeyboardEvent} event - Event object from handler
  */
  onKeyDown(event) {
    if (~this.tabIndex && event.key === ' ') {
      event.preventDefault();
      typeof this.props.onChange === 'function' && this.props.onChange();
    }
  }

  render() {
    const props = this.props;
    return /*#__PURE__*/_react.default.createElement("label", {
      role: "option",
      className: props.className,
      onChange: props.onChange,
      tabIndex: props.tabIndex,
      onKeyDown: this.onKeyDown,
      "aria-selected": props.isSelected,
      ref: r => {
        this.componentRef = r;
      }
    }, /*#__PURE__*/_react.default.createElement("input", {
      onChange: function () {},
      role: "menuitemcheckbox",
      type: "checkbox",
      tabIndex: "-1",
      name: props.name,
      value: props.value,
      checked: props.isSelected,
      "aria-checked": props.isSelected
    }), ' ', props.children);
  }

}
/**
 * PropType validation for CheckboxItem.
 *
 * @enum {Object} propTypes
 * @public
 */


CheckboxItem.propTypes = {
  /** String className for the checkbox label */
  className: _propTypes.default.string,

  /** Contents of checkbox item */
  children: _propTypes.default.node,

  /** Boolean for whether dropdown item is selected */
  isSelected: _propTypes.default.bool,

  /** Name of the checkbox control */
  name: _propTypes.default.string,

  /** Value of the checkbox control */
  value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),

  /** onChange event handler */
  onChange: _propTypes.default.func,

  /** Index for the dropdown item */
  itemIndex: _propTypes.default.number,

  /** Developer indicates tabIndex */
  tabIndex: _propTypes.default.oneOf([-1, 0])
};
/**
 * Create an item, which receive a checkbox element if the type is multiselect.
 *
 * @class DropdownItem
 * @displayName DropdownItem (Web)
 * @public
 */

class DropdownItem extends _react.Component {
  /**
   * Get reference to the dropdown item (either DropdownItem or CheckboxItem)
   * @returns {Object} Dropdown Item reference
   */
  getRef() {
    if (this.componentRef instanceof CheckboxItem) {
      return this.componentRef.componentRef;
    }

    return this.componentRef;
  }

  render() {
    const props = this.props;
    const {
      isSelected,
      type,
      disabled,
      tabIndex
    } = props,
          other = (0, _objectWithoutProperties2.default)(props, _excluded);
    const className = (0, _classNames.default)(other.className, 'dropdown-item', {
      active: props.active,
      disabled
    });

    if (type === 'multiselect') {
      return /*#__PURE__*/_react.default.createElement(CheckboxItem, (0, _extends2.default)({}, props, {
        isSelected: isSelected,
        ref: r => {
          this.componentRef = r;
        },
        className: className
      }));
    }

    const itemProps = (0, _ripOut.default)(other, 'active', 'isSelected');
    return /*#__PURE__*/_react.default.createElement(itemProps.href ? 'a' : 'span', _objectSpread(_objectSpread({}, itemProps), {}, {
      disabled,
      className,
      'ref': r => {
        this.componentRef = r;
      },

      /* eslint-disable-line quote-props */
      'role': 'option',
      'aria-selected': isSelected,
      'tabIndex': tabIndex,
      'aria-disabled': disabled
    }));
  }

}

DropdownItem.defaultProps = {
  tabIndex: 0
};
/**
 * PropType validation for DropdownItem.
 *
 * @enum {Object} propTypes
 * @public
 */

DropdownItem.propTypes = {
  /** Boolean for whether dropdown item is disabled */
  disabled: _propTypes.default.bool,

  /** Boolean for whether dropdown item is active */
  active: _propTypes.default.bool,

  /** Type of dropdown item */
  type: _propTypes.default.string,

  /** Url for dropdown item when clicked */
  href: _propTypes.default.string,

  /** Boolean for whether dropdown item is selected */
  isSelected: _propTypes.default.bool,

  /** Developer indicates tabIndex, default is 0 */
  tabIndex: _propTypes.default.oneOf([-1, 0])
};
var _default = DropdownItem;
exports["default"] = _default;

/***/ }),

/***/ "../../components/dropdown/lib/dropdown-menu.js":
/*!******************************************************!*\
  !*** ../../components/dropdown/lib/dropdown-menu.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.menuAlignmentPropType = exports["default"] = exports.autoAlignments = exports.alignmentTypes = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/objectWithoutProperties */ "../../../node_modules/@babel/runtime/helpers/objectWithoutProperties.js"));

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _classNames = _interopRequireDefault(__webpack_require__(/*! @ux/component-utilities/lib/classNames */ "../../utils/component-utilities/lib/classNames.js"));

var _dropdownDivider = _interopRequireDefault(__webpack_require__(/*! ./dropdown-divider */ "../../components/dropdown/lib/dropdown-divider.js"));

var _dropdownHeader = _interopRequireDefault(__webpack_require__(/*! ./dropdown-header */ "../../components/dropdown/lib/dropdown-header.js"));

var _selectableItem = _interopRequireDefault(__webpack_require__(/*! ./selectable-item */ "../../components/dropdown/lib/selectable-item.js"));

var _button = _interopRequireDefault(__webpack_require__(/*! @ux/button */ "../../components/button/lib/index.js"));

var _x = _interopRequireDefault(__webpack_require__(/*! @ux/icon/x */ "../../components/icon/x/index.js"));

const _excluded = ["menuAlignment", "alignmentOverride", "enableFullscreen", "ariaLabels", "id"];

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

const alignLeft = 'dropdown-menu-left';
const alignRight = 'dropdown-menu-right';
const alignmentTypes = {
  left: 'left',
  right: 'right',
  preferLeft: 'preferLeft',
  preferRight: 'preferRight'
};
exports.alignmentTypes = alignmentTypes;
const autoAlignments = {
  [alignmentTypes.preferLeft]: true,
  [alignmentTypes.preferRight]: true
};
exports.autoAlignments = autoAlignments;
const defaultAlignmentClassName = {
  [alignmentTypes.left]: alignLeft,
  [alignmentTypes.right]: alignRight,
  [alignmentTypes.preferLeft]: alignLeft,
  [alignmentTypes.preferRight]: alignRight
};
const alignmentValues = Object.keys(alignmentTypes).map(key => alignmentTypes[key]);

const menuAlignmentPropType = _propTypes.default.oneOf(alignmentValues);
/**
 * DropdownMenu renders a wrapping div to handle menu alignment (left or right)
 * and wires up all children by cloning them with additional properties.
 *
 * @class DropdownMenu
 * @displayName DropdownMenu (Web)
 * @private
 */


exports.menuAlignmentPropType = menuAlignmentPropType;

class DropdownMenu extends _react.Component {
  constructor() {
    super(...arguments);
    this.onKeyDown = this.onKeyDown.bind(this);
  }
  /**
   * Return DropdownItems of the menu. Dividers and Headers will be ignored. If the
   * dropdown is of type (multi)selected the DropdownItem will be enhanced with
   * additional properties and event handlers.
   *
   * @returns {Array} React elements.
   * @private
   */


  children() {
    const props = this.props;
    let items = 0;
    return _react.default.Children.map(props.children, item => {
      return item.type !== _dropdownDivider.default && item.type !== _dropdownHeader.default ? (0, _selectableItem.default)(this, item, items++) : item;
    });
  }

  onKeyDown(e) {
    if (e.key && (e.key === 'Escape' || e.key === 'Esc' || e.key === 'Enter' || e.key === 'Return')) {
      this.props.toggle();
    }
  }
  /**
   * Render Dropdown menu.
   *
   * @returns {ReactElement} div element with DropdownItems.
   * @private
   */


  render() {
    const _this$props = this.props,
          {
      menuAlignment = alignmentTypes.left,
      alignmentOverride,
      enableFullscreen,
      ariaLabels,
      id
    } = _this$props,
          props = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
    const alignMenuClass = defaultAlignmentClassName[alignmentOverride] || defaultAlignmentClassName[menuAlignment] || alignLeft;
    const autoAlign = autoAlignments[menuAlignment] ? 'dropdown-menu-autoalign' : null;
    const mobileFullscreen = enableFullscreen ? 'full-screen' : null;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classNames.default)('dropdown-menu', alignMenuClass, autoAlign, mobileFullscreen)
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "dropdown-overlay",
      onClick: props.toggle,
      onKeyDown: props.toggle,
      role: "button",
      tabIndex: -1
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "dropdown-menu-background",
      ref: r => this.wrapper = r,
      role: "listbox",
      "aria-label": ariaLabels.menu,
      id: id ? `${id}-menu` : undefined
      /* eslint-disable-line no-undefined */
      ,
      "aria-multiselectable": props.type === 'multiselect' ? true : null
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      className: "dropdown-close",
      design: 'inline',
      onClick: props.toggle,
      "aria-label": ariaLabels.close,
      icon: /*#__PURE__*/_react.default.createElement(_x.default, null)
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "dropdown-list"
    }, this.children())));
  }

}
/**
 * PropType validation
 *
 * @type {Object}
 * @public
 */


DropdownMenu.propTypes = {
  /** Force alignment of dropdown menu */
  alignmentOverride: _propTypes.default.oneOf([alignmentTypes.left, alignmentTypes.right]),

  /** Specify alignment of dropdown menu (when possible) */
  menuAlignment: menuAlignmentPropType,

  /** Boolean whether the dropdown menu is full screen for mobile devices */
  enableFullscreen: _propTypes.default.bool,

  /** onChange event handler */
  onChange: _propTypes.default.func,

  /** onKeyDown event handler */
  onKeyDown: _propTypes.default.func,

  /** Array of selected dropdown item indexes */
  selected: _propTypes.default.array,

  /** Function that toggles the menu open and closed */
  toggle: _propTypes.default.func,

  /** Screenreader labels for sub-elements */
  ariaLabels: _propTypes.default.shape({
    /** Label for mobile-view menu close button */
    close: _propTypes.default.string,

    /** Label for dropdown-menu */
    menu: _propTypes.default.string
  }),

  /** Type of dropdown items in the menu */
  type: _propTypes.default.string,

  /** children to be rendered */
  children: _propTypes.default.node,

  /** ID attribute for the dropdown */
  id: _propTypes.default.string
};
/**
 * Default props for DropdownMenu.
 *
 * @enum {Object} defaultProps
 * @public
 */

DropdownMenu.defaultProps = {
  menuAlignment: alignmentTypes.left,
  toggle: () => {},
  ariaLabels: {
    close: 'Close',
    menu: 'Menu items'
  },
  selected: [],
  type: 'button'
};
var _default = DropdownMenu;
exports["default"] = _default;

/***/ }),

/***/ "../../components/dropdown/lib/dropdown.js":
/*!*************************************************!*\
  !*** ../../components/dropdown/lib/dropdown.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.types = exports["default"] = exports.BasePropTypes = exports.BaseDefaultProps = void 0;

var _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../../node_modules/@babel/runtime/helpers/defineProperty.js"));

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _toggler = __webpack_require__(/*! toggler */ "../../../node_modules/toggler/lib/index.js");

var _button = _interopRequireDefault(__webpack_require__(/*! @ux/button */ "../../components/button/lib/index.js"));

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      (0, _defineProperty2.default)(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
} //
// Allowed dropdown types.
//


const types = Object.values(_button.default.designs).concat('button', 'select', 'multiselect', 'tripledot', 'custom');
/**
 * Display a Dropdown that works standalone button, as select or multiselect.
 *
 * @class Dropdown
 * @public
 */

exports.types = types;

class Base extends _react.Component {
  constructor() {
    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    super(props, ...args);
    this.toggle = (0, _toggler.toggle)(this, 'open', () => {
      const isOpen = this.state.open;

      if (typeof this.props.onToggle === 'function') {
        this.props.onToggle(isOpen);
      }

      if (typeof this.toggleBackground === 'function') {
        this.toggleBackground(isOpen);
      }
    });
    const selectedItems = Array.isArray(props.selected) || typeof props.selected === 'number' ? props.selected : props.defaultSelected;
    this.state = _objectSpread(_objectSpread({}, this.state), {}, {
      error: false,
      open: this.props.open || false,
      selected: [].concat(selectedItems),
      keyboardSelectionIndex: -1
    });
    this.calledWarn = false;

    this._warn();
  }
  /**
   *  console warning about missing id for accessibility purposes
   */


  _warn() {
    // eslint-disable-next-line no-process-env
    if (false) {}

    if (!this.props.id && !this.calledWarn) {
      this.calledWarn = true;
      console.warn('Warning: <Dropdown> requires an id prop to be fully accessible.');
      /* eslint-disable-line */
    }
  }
  /**
   * Returns all children that are not of a specific type. This will be
   * overridden by the separate web and native specitic implementations of
   * the dropdown.
   *
   * @param {React.Element[]} children - React elements.
   * @throws {Error} error if this method is not overridden
   * @private
   */


  items(children) {
    throw new Error('Must be implemented by derived class.');
  }
  /**
   * Returns true if the current dropdown is a multiselect dropdown
   *
   * @returns {Boolean} true if dropdown is multiselect
   * @public
   */


  isMultiSelect() {
    return this.props.type === 'multiselect';
  }
  /**
   * Sets the document location if the given item has a valid href
   *
   * @param {Object} itemProps Fully formed props from the selected item
   * @private
   */


  redirectToHrefIfAvailable(itemProps) {
    const {
      href
    } = itemProps;

    if (href && typeof href === 'string' && href !== '#') {
      document.location = href;
    }
  }
  /**
   * Select the item for a given index and trigger onChange from props if provided.
   * In the case of multiselect, it will also unselect.
   *
   * @param {Number} itemIndex Zero-based index of the item (among DropdownItems only).
   * @param {Event} event Event passed in from the source of the select
   * @param {function} callback Callback to fire after state has been updated
   * @public
   */


  selectIndex(itemIndex, event) {
    const items = this.items(_react.default.Children.toArray(this.props.children));
    const item = items[itemIndex];

    if (!item) {
      return;
    }

    const listener = item.props.type === 'multiselect' ? 'onChange' : 'onClick';
    this.selectItem(_objectSpread(_objectSpread({}, item.props), {}, {
      itemIndex
    }), event, item.props[listener]);
  }
  /**
   * Select the item with the given `itemProps.itemIndex` and trigger onChange
   * from props if provided. Finally also trigger the **item's** onChange or
   * onClick handler (represented by `callback`). In the case of multiselect,
   * it will also unselect.
   *
   * @param {Object} itemProps Fully formed props from the selected item
   * @param {Event} event Event passed in from the source of the select
   * @param {function} callback Callback to fire after state has been updated
   * @public
   */


  selectItem(itemProps, event, callback) {
    this.redirectToHrefIfAvailable(itemProps);
    let {
      selected
    } = this.state;
    const {
      itemIndex
    } = itemProps;

    if (this.isMultiSelect()) {
      const index = selected.indexOf(itemIndex);

      if (index > -1) {
        selected.splice(index, 1);
      } else {
        selected.push(itemIndex);
      }
    } else {
      selected = [itemIndex];
    }

    const nextState = {
      selected,
      keyboardSelectionIndex: itemIndex
    };
    let nextSelected = selected;

    if (!this.isMultiSelect()) {
      this.hide();
      nextSelected = nextSelected[0];
    }

    this.setState(nextState, () => {
      this.broadcast(_objectSpread(_objectSpread({}, itemProps), {}, {
        selected: nextSelected
      }), event, callback);
    });
  }
  /**
   * broadcast item selection to the dropdown onChange prop as well as
   * either the onClick or onChange callback of dropdown items if defined
   *
   * @param {Object} options selected item properties
   * @param {event} event the react proxy event that originates at the doprdown item
   * @param {function} callback callback function to invoke in addition to dropdown onChange
   * @private
   */


  broadcast(options, event, callback) {
    if (!event) {
      return;
    }

    if (this.props.onChange) {
      this.props.onChange(options, event);
    }

    callback && callback(options, event);
  }
  /**
   * On change of incoming `open` prop update internal state using `toggler`
   *
   * @param {Object} prevProps - Object of Previous Props
   * @private
   */


  componentDidUpdate(prevProps) {
    if (typeof this.props.open !== 'undefined' && prevProps.open !== this.props.open) {
      this.toggle();
    }

    if (this.props.selected !== prevProps.selected) {
      this.setState({
        selected: [].concat(this.props.selected),
        keyboardSelectionIndex: -1
      });
    }
  }
  /**
   * Event handler to show and hide the dropdown.
   *
   * @returns {Function} Event handler
   * @public
   */


  get show() {
    return this.props.show || (event => {
      this.toggle(event);
    });
  }
  /**
   * Event handler to hide the dropdown after clicking on another dropdown,
   * the state check is done to prevent state
   * changes when the dropdown is already hidden. This method is used by the
   * document click listeners.
   *
   * @returns {Function} Event handler
   * @public
   */


  get hide() {
    return this.props.hide || (event => {
      if (!this.state.open) {
        return;
      }

      this.toggle(event);
    });
  }
  /**
   * Return selected indexes of dropdown items.
   *
   * @returns {Array} Selected item indexes.
   * @private
   */


  get selected() {
    return this.state.selected;
  }
  /**
   * When space or enter is pressed select the DropdownItem. Incase of multiselect select the Dropdown item on space.
   * When escape is pressed close the dropdown.
   * When a Arrowup or Arrowdown is pressed move the pointer accordingly.
   * Incase of Button, on enter or space it opens the link.
   * @param {object} e Event object sent from the browser
   * @private
   */


  keyDown(e) {
    const key = e.key;

    switch (key) {
      case 'Escape':
        this.hide();
        break;

      case 'ArrowUp':
      case 'ArrowDown':
        this.onArrowUpDown(e);
        break;

      case 'Space': // Space bar

      case 'Enter':
        {
          // Enter
          if (this.state.open) {
            const {
              keyboardSelectionIndex
            } = this.state;
            this.selectIndex(keyboardSelectionIndex, e);
          }

          break;
        }

      default:
        break;
    }
  }
  /**
   * On ArrowUp or ArrowDown sets the index of the dropdown item.
   * @param {KeyboardEvent} e Event object sent from the browser
   * @private
   */


  onArrowUpDown(e) {
    if (e.key === 'ArrowDown' && !this.state.open) {
      this.show();
    }

    let {
      keyboardSelectionIndex
    } = this.state;
    const delta = e.key === 'ArrowDown' ? 1 : -1;

    if (keyboardSelectionIndex === -1 && e.key === 'ArrowUp') {
      keyboardSelectionIndex = 0;
    }

    const items = this.items(_react.default.Children.toArray(this.props.children));
    const dataLength = items.length;

    if (items.filter(item => !item.props.disabled).length > 0) {
      // Using bounds just outside the acceptable range. This is for logic safety only.
      for (let i = keyboardSelectionIndex + delta; i < dataLength + 1 && i > -2; i += delta) {
        // Reset the index if it's beyond the bounds of the list, allowing looping.
        i = (i + dataLength) % dataLength;

        if (!items[i].props.disabled) {
          this.setState({
            keyboardSelectionIndex: i
          });
          break;
        }
      }
    }

    e.preventDefault();
  }
  /**
   * Extract the children (text) of the selected DropdownItem.
   *
   * @param {Array} childs Current children of this instance.
   * @returns {Array} Join of selected items.
   * @private
   */


  getSelectedItem(childs) {
    let items = this.items(childs) || [];
    items = items.filter((item, i) => this.selected.includes(i));

    if (!items.length) {
      return null;
    }

    return items.reduce((memo, item, i) => {
      if (i) memo.push(', ');
      memo.push(item.props.children);
      return memo;
    }, []);
  }

}
/**
 * Default to button dropdown.
 *
 * @enum {Object} defaultProps
 * @public
 */


exports["default"] = Base;
const BaseDefaultProps = Base.defaultProps = {
  defaultSelected: [],
  disabled: false,
  onChange: () => {},
  onToggle: () => {}
};
/**
 * Define properties and validate the type of children that are passed
 * to the Dropdown.
 *
 * @enum {Object} propTypes
 * @public
 */

exports.BaseDefaultProps = BaseDefaultProps;
const BasePropTypes = Base.propTypes = {
  name: _propTypes.default.string,
  children: _propTypes.default.node,
  open: _propTypes.default.bool,
  show: _propTypes.default.func,
  hide: _propTypes.default.func,
  required: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.bool]),
  onChange: _propTypes.default.func,
  onToggle: _propTypes.default.func,
  type: _propTypes.default.oneOf(types),
  content: _propTypes.default.oneOfType([_propTypes.default.element, _propTypes.default.string]),
  disabled: _propTypes.default.bool,
  placeholder: _propTypes.default.node,
  label: _propTypes.default.node,
  toggleIcon: _propTypes.default.oneOf(['clock', 'dropdown']),
  selected: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.array]),
  defaultSelected: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.array]),
  id: _propTypes.default.string,
  contextmenu: _propTypes.default.bool
};
exports.BasePropTypes = BasePropTypes;

/***/ }),

/***/ "../../components/dropdown/lib/index.js":
/*!**********************************************!*\
  !*** ../../components/dropdown/lib/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "DropdownControl", ({
  enumerable: true,
  get: function () {
    return _dropdownControl.default;
  }
}));
Object.defineProperty(exports, "DropdownDivider", ({
  enumerable: true,
  get: function () {
    return _dropdownDivider.default;
  }
}));
Object.defineProperty(exports, "DropdownHeader", ({
  enumerable: true,
  get: function () {
    return _dropdownHeader.default;
  }
}));
Object.defineProperty(exports, "DropdownItem", ({
  enumerable: true,
  get: function () {
    return _dropdownItem.default;
  }
}));
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../../node_modules/@babel/runtime/helpers/defineProperty.js"));

var _extends2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ "../../../node_modules/@babel/runtime/helpers/extends.js"));

var _reactComponentValidator = _interopRequireDefault(__webpack_require__(/*! react-component-validator */ "../../../node_modules/react-component-validator/lib/index.js"));

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _dropdown = _interopRequireWildcard(__webpack_require__(/*! ./dropdown */ "../../components/dropdown/lib/dropdown.js"));

var _classNames = _interopRequireDefault(__webpack_require__(/*! @ux/component-utilities/lib/classNames */ "../../utils/component-utilities/lib/classNames.js"));

var _useClickOutsideHoc = _interopRequireDefault(__webpack_require__(/*! @ux/component-utilities/lib/use-click-outside-hoc */ "../../utils/component-utilities/lib/use-click-outside-hoc.js"));

var _scrollIntoView = _interopRequireDefault(__webpack_require__(/*! @ux/component-utilities/lib/scroll-into-view */ "../../utils/component-utilities/lib/scroll-into-view.js"));

var _dropdownControl = _interopRequireDefault(__webpack_require__(/*! ./dropdown-control */ "../../components/dropdown/lib/dropdown-control.js"));

var _dropdownDivider = _interopRequireDefault(__webpack_require__(/*! ./dropdown-divider */ "../../components/dropdown/lib/dropdown-divider.js"));

var _dropdownHeader = _interopRequireDefault(__webpack_require__(/*! ./dropdown-header */ "../../components/dropdown/lib/dropdown-header.js"));

var _dropdownMenu = _interopRequireWildcard(__webpack_require__(/*! ./dropdown-menu */ "../../components/dropdown/lib/dropdown-menu.js"));

var _dropdownItem = _interopRequireDefault(__webpack_require__(/*! ./dropdown-item */ "../../components/dropdown/lib/dropdown-item.js"));

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      (0, _defineProperty2.default)(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}
/**
 * Track of the current selected value with a hidden input element. Allowing
 * simple POST requests of forms.
 *
 * @class DropdownValue
 * @private
 */


class DropdownValue extends _react.Component {
  render() {
    const allowedTypes = ['select', 'tripledot', 'custom'];

    if (!allowedTypes.includes(this.props.type)) {
      return null;
    }

    return /*#__PURE__*/_react.default.createElement("input", (0, _extends2.default)({}, this.props, {
      type: "hidden",
      readOnly: true
    }));
  }

}
/**
 * PropType validation
 *
 * @enum {Object} propTypes
 * @public
 */


DropdownValue.propTypes = {
  /** Type of dropdown */
  type: _propTypes.default.oneOf(_dropdown.types)
};
/**
 * Display a Dropdown that works standalone button, as select or multiselect.
 *
 * @displayName Dropdown (Web)
 * @class Dropdown
 * @extends React.Component
 * @public
 */

class DropdownComponent extends _dropdown.default {
  constructor() {
    super(...arguments);
    this.hideHandle = null;
    this.selectItem = this.selectItem.bind(this);
    this.toggleBackground = this.toggleBackground.bind(this);
    this.element = /*#__PURE__*/_react.default.createRef();
    this.dropdownRef = /*#__PURE__*/_react.default.createRef();
    this.ariaLabels = _objectSpread(_objectSpread({}, DropdownComponent.defaultProps.ariaLabels), this.props.ariaLabels);
    this.focusDropdown = this.focusDropdown.bind(this);
  }
  /**
   * Added this to force focus to the dropdown when the label is clicked.
   *
   * @private
   */


  focusDropdown() {
    // Explicitly focus the text input using the raw DOM API
    // Note: we're accessing "current" to get the DOM node
    this.dropdownRef.current.focus();
  }
  /**
   * Remove the attached click event listener.
   *
   * @private
   */


  componentWillUnmount() {
    document.removeEventListener('click', this.hideHandle || this.hide);
    this.hideHandle = null;
  }
  /**
   * Scroll to the active item.
   *
   * @param {object} prevProps - Previous props before update
   * @param {object} prevState - Previous state before update
   * @private
   */


  componentDidUpdate(prevProps, prevState) {
    super.componentDidUpdate(prevProps);
    const activeItem = this.element.current && this.element.current.querySelector('.active');
    const {
      open
    } = this.state;

    if (open && open !== prevState.open) {
      const _this$getElementBound = this.getElementBounds(),
            bounds = (0, _extends2.default)({}, _this$getElementBound);

      let newState = this.getHorizontalRender(bounds);
      newState = _objectSpread(_objectSpread({}, newState), this.getVerticalRender(bounds));

      if (Object.keys(newState).length > 0) {
        this.setState(newState);
      }
    }

    if (open && activeItem) {
      (0, _scrollIntoView.default)(activeItem);
    }
  }
  /**
   * Fetches all element bounds to necessary calculations of display
   * @private
   * @returns {object} element bounds
   */


  getElementBounds() {
    // Viewport Bounds
    const viewportBounds = {
      x: window.pageXOffset,
      y: window.pageYOffset,
      width: window.innerWidth,
      height: window.innerHeight
    }; // Main Dropdown Element

    const elementBounds = this.element.current && this.element.current.getBoundingClientRect(); // Dropdown Menu Element

    const menuBounds = this.menuElement && this.menuElement.wrapper && this.menuElement.wrapper.getBoundingClientRect(); // Label Element (if one exists)

    const labelBounds = this.componentLabel && this.componentLabel.getBoundingClientRect(); // Menu Item Element

    const menuItemRef = this.menuElement && this.menuElement.dropdownItem && this.menuElement.dropdownItem.getRef && this.menuElement.dropdownItem.getRef();
    const menuItemBounds = menuItemRef && menuItemRef.getBoundingClientRect(); // Get Dropdown Item height

    const itemHeight = menuItemBounds && menuItemBounds.height || 45;
    return {
      viewportBounds,
      elementBounds,
      menuBounds,
      labelBounds,
      itemHeight
    };
  }
  /**
   * Compute vertical spacing for menu and determine whether to show above or below the dropdown control.
   *
   * @param {object} bounds - Object containing element bounds calculated in getElementBounds()
   * @returns {obbject} Temporary updated state object
   * @private
   */


  getVerticalRender(bounds) {
    // Temporary object to prevent multiple state updates
    const newState = {};
    const {
      viewportBounds,
      elementBounds,
      menuBounds,
      labelBounds,
      itemHeight
    } = bounds;
    const hasLabel = labelBounds && labelBounds.height > 0;

    if (this.state.hasLabel !== hasLabel) {
      newState.hasLabel = hasLabel;
    }

    if (elementBounds) {
      // Determine to show the menu above or below
      const menuBottomBound = elementBounds.top + elementBounds.height + menuBounds.height - itemHeight / 2;
      const overflowBelow = viewportBounds.height < menuBottomBound;
      const spaceAbove = elementBounds.top - menuBounds.height > 0;
      const showUp = overflowBelow && spaceAbove;

      if (this.state.showUp !== showUp) {
        newState.showUp = showUp;
      }
    }

    return newState;
  }
  /**
   * Compute horizontal spacing for menu and determine whether to show aligned left or right to the dropdown control.
   *
   * @param {object} bounds - Object containing menu bounds calculated in getElementBounds()
   * @returns {object} Temporary updated state object
   * @private
   */


  getHorizontalRender(bounds) {
    const newState = {};

    if (_dropdownMenu.autoAlignments[this.props.menuAlignment] || !this.props.menuAlignment) {
      const {
        elementBounds,
        menuBounds,
        viewportBounds
      } = bounds;

      if (elementBounds && menuBounds) {
        const left = elementBounds.right + viewportBounds.x - window.document.documentElement.clientLeft - menuBounds.width;
        const right = elementBounds.left + viewportBounds.x - window.document.documentElement.clientLeft + menuBounds.width;
        let alignmentOverride; // The element needs to be right aligned if it's too close or outside the bounds of the viewport
        // and it it small enough to fit inside a viewport, if it's too big we'll leave the default

        if (viewportBounds.width - right < 10 && menuBounds.width < viewportBounds.width) {
          alignmentOverride = _dropdownMenu.alignmentTypes.right;
        } else if (left < 10) {
          // Only force different than the default if the leftmost bounds is outside or too close to the left side of the viewport
          alignmentOverride = _dropdownMenu.alignmentTypes.left;
        } // Compare with current state


        if (this.state.alignmentOverride !== alignmentOverride) {
          newState.alignmentOverride = alignmentOverride;
        }
      }
    }

    return newState;
  }

  toggleBackground(isOpen) {
    if (this.props.enableFullscreen) {
      if (isOpen) {
        document.body.classList.add('dropdown-open');
      } else {
        document.body.classList.remove('dropdown-open');
      }
    }

    const {
      open,
      selected
    } = this.state;
    const {
      required
    } = this.props;

    if (!open && selected.length === 0 && required) {
      this.setState({
        error: true
      });
    } else if (selected.length > 0 && required) {
      this.setState({
        error: false
      });
    }
  }
  /**
   * Extract DropdownControl from all children.
   *
   * @param {React.Element[]} children - React elements.
   * @returns {React.Element} DropdownControl with children.
   * @private
   */


  control(children) {
    const {
      placeholder,
      type,
      disabled,
      toggleIcon,
      content,
      size,
      merch,
      id,
      tabIndex
    } = this.props;
    const dropdownRef = this.dropdownRef;

    const dropdownControl = children.filter(child => child.type === _dropdownControl.default)[0] || /*#__PURE__*/_react.default.createElement(_dropdownControl.default, {
      id: id ? `${id}-control` : undefined
    });

    return /*#__PURE__*/_react.default.cloneElement(dropdownControl, {
      ['aria-labelledby']: this.props.label && `${id}-label`,
      ['ariaLabels']: this.ariaLabels,
      ['aria-controls']: id ? `${id}-menu` : undefined,
      children: dropdownControl.props.children || this.getSelectedItem(children) || placeholder,
      hasPlaceholder: !!(!dropdownControl.props.children && !this.getSelectedItem(children) && placeholder),
      ref: dropdownRef,
      key: 'control',
      id: id ? `${id}-control` : undefined,
      toggle: this.show,
      open: this.state.open,
      type,
      onKeyDown: this.keyDown.bind(this),
      disabled,
      toggleIcon,
      content,
      size,
      merch,
      tabIndex
    });
  }
  /**
   * Returns all children that are not of type DropdownControl.
   *
   * @param {React.Element[]} children - React elements.
   * @returns {React.Element[]} React elements.
   * @private
   */


  items(children) {
    return children.filter(child => {
      return child.type !== _dropdownControl.default && child.type !== _dropdownHeader.default && child.type !== _dropdownDivider.default;
    });
  }
  /**
   * Render Dropdown component.
   *
   * @returns {React.Element} div element with Dropdown.
   * @private
   */


  render() {
    const {
      keyboardSelectionIndex,
      open,
      showUp,
      hasLabel,
      error
    } = this.state;

    const props = _objectSpread(_objectSpread({}, this.props), {}, {
      keyboardSelectionIndex,
      onChange: this.selectItem,
      onToggle: this.toggle
    });

    const select = props.type.includes('select');
    const tripledot = props.type === 'tripledot'; // Use the alignment if set, otherwise tripledot prefersRight by default,
    // Everything else should left align

    props.menuAlignment = props.menuAlignment || (tripledot ? _dropdownMenu.alignmentTypes.preferRight : _dropdownMenu.alignmentTypes.left);

    const children = _react.default.Children.toArray(props.children);

    const disabled = props.disabled;

    const title = (props.label || props.required) && /*#__PURE__*/_react.default.createElement(_react.Fragment, null, props.label &&
    /*#__PURE__*/
    // eslint-disable-next-line jsx-a11y/no-static-element-interactions
    _react.default.createElement("label", {
      id: `${props.id}-label`,
      key: "label",
      onClick: this.focusDropdown,
      onKeyPress: this.focusDropdown,
      ref: r => {
        this.componentLabel = r;
      }
    }, props.label), props.required && /*#__PURE__*/_react.default.createElement("span", {
      className: "text-danger"
    }, "*"));

    const className = (0, _classNames.default)(props.className, {
      'ux-select-dropdown': select
    }, 'dropdown', {
      'triple-dot-dropdown btn btn-link': tripledot,
      'dropdown-disabled disabled': disabled,
      open,
      'menu-up': showUp,
      'has-label': hasLabel,
      'full-screen': this.props.enableFullscreen,
      error
    });
    const ElementType = props.elementType;
    return /*#__PURE__*/_react.default.createElement(_useClickOutsideHoc.default, {
      targetRef: this.element,
      onClick: this.hide
    }, /*#__PURE__*/_react.default.createElement(ElementType, {
      ref: this.element,
      id: props.id,
      className: className,
      "aria-expanded": open,
      role: "combobox",
      "aria-label": this.ariaLabels.label
    }, title, this.control(children), /*#__PURE__*/_react.default.createElement(DropdownValue, {
      key: "value",
      type: props.type,
      value: props.value,
      name: props.name
    }), /*#__PURE__*/_react.default.createElement(_dropdownMenu.default, (0, _extends2.default)({
      key: "menu"
    }, props, {
      ref: r => {
        this.menuElement = r;
      },
      toggle: this.toggle,
      ariaLabels: {
        close: this.ariaLabels.close,
        menu: this.ariaLabels.menu
      },
      selected: this.selected,
      alignmentOverride: this.state.alignmentOverride,
      keyboardSelectionIndex: this.state.keyboardSelectionIndex
    }), children.filter(child => child.type !== _dropdownControl.default)), error && props.required && /*#__PURE__*/_react.default.createElement("span", {
      className: "form-error",
      role: "alert"
    }, props.required)));
  }

}
/**
 * Default to button dropdown.
 *
 * @enum {Object} defaultProps
 * @public
 */


DropdownComponent.defaultProps = _objectSpread(_objectSpread({}, _dropdown.BaseDefaultProps), {}, {
  type: 'button',
  elementType: 'div',
  enableFullscreen: true,
  ariaLabels: {
    close: 'Close',
    menu: 'Menu Options',
    label: 'Menu'
  }
});
/**
 * Define properties and validate the type of children that are passed
 * to the Dropdown.
 *
 * @enum {Object} propTypes
 * @public
 */

DropdownComponent.propTypes = _objectSpread(_objectSpread({}, _dropdown.BasePropTypes), {}, {
  /** Developer indicates tabIndex */
  tabIndex: _propTypes.default.oneOf([-1, 0]),

  /** ID attribute for the dropdown container */
  id: _propTypes.default.string,

  /** Type of the dropdown */
  type: _propTypes.default.oneOf(_dropdown.types),

  /** Wrapper element type for the dropdown */
  elementType: _propTypes.default.string,

  /** Alignment of the dropdown menu */
  alignment: _dropdownMenu.menuAlignmentPropType,

  /** Boolean whether the dropdown menu is fullscreen (mobile only) */
  enableFullscreen: _propTypes.default.bool,

  /** Screenreader labels for sub-elements */
  ariaLabels: _propTypes.default.shape({
    /** Label for mobile-view menu close button */
    close: _propTypes.default.string,

    /** Label for dropdown-menu that contains the selectable items */
    menu: _propTypes.default.string,

    /** Label for .ux-dropdown-menu which is the outer container of dropdown */
    label: _propTypes.default.string
  }),

  /** Children components of a dropdown. Can be a DropdownControl,
   *  DropdownDivider, DropdownHeader, or DropdownItem */
  children: (0, _reactComponentValidator.default)([_dropdownControl.default, _dropdownItem.default, _dropdownDivider.default, _dropdownHeader.default]),

  /** Error message to show if the dropdown is required */
  required: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.bool])
}); //
// Attach childs to the main Component for availability without ES6 imports.
//

DropdownComponent.DropdownControl = _dropdownControl.default;
DropdownComponent.DropdownDivider = _dropdownDivider.default;
DropdownComponent.DropdownHeader = _dropdownHeader.default;
DropdownComponent.DropdownItem = _dropdownItem.default; //
// Export the Class and related children.
//

const Dropdown = DropdownComponent;
exports["default"] = Dropdown;

/***/ }),

/***/ "../../components/dropdown/lib/selectable-item.js":
/*!********************************************************!*\
  !*** ../../components/dropdown/lib/selectable-item.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = cloneItem;

var _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../../node_modules/@babel/runtime/helpers/defineProperty.js"));

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _dropdownItem = _interopRequireDefault(__webpack_require__(/*! ./dropdown-item */ "../../components/dropdown/lib/dropdown-item.js"));

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      (0, _defineProperty2.default)(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}
/**
 * Utility method to extract props from Dropdown Menu object
 *
 * @param {React.ReactElement} wrapper Dropdown Menu component
 * @returns {Object} props from Dropdown Menu component
 * @private
 */


function extractWrapperProps(wrapper) {
  const listener = wrapper.props.type === 'multiselect' ? 'onChange' : 'onClick';
  const selected = wrapper.props.selected || [];
  return {
    listener,
    selected
  };
}
/**
 * Utility method to extract item state information.
 *
 * @param {React.ReactElement} wrapper Dropdown Menu component
 * @param {React.ReactElement} item Dropdown Item component
 * @param {Array} selected Array of selected items
 * @param {int} index Index of Dropdown Item
 * @returns {Object} active and isSelected states
 * @private
 */


function getItemState(wrapper, item, selected, index) {
  let active;
  let isSelected;

  if (wrapper.props.type === 'multiselect' || wrapper.props.keyboardSelectionIndex !== -1) {
    isSelected = selected.includes(index);

    if (index === wrapper.props.keyboardSelectionIndex && !item.props.disabled) {
      active = true;
    }
  } else {
    active = selected.includes(index);
  }

  active = !wrapper.props.contextmenu && (item.props.active || active);
  return {
    active,
    isSelected
  };
}
/**
 * Returns a React clone of the specified `item` attaching selection behavior
 * using closure scope of onChange or onClick handler(s) passed through to the item.
 *
 * @param  {Object} wrapper Full references to parent DropdownMenu.
 * @param  {React.Element} item React element representing the {Dropdown,Checkbox}Item child.
 * @param  {Number} index Zero-based index in the normalized set of {Dropdown,Checkbox}Items.
 * @returns {React.Element} Cloned item with selection behavior
 * @public
 */


function cloneItem(wrapper, item, index) {
  if (! /*#__PURE__*/_react.default.isValidElement(item)) {
    return item;
  } //
  // Enhance the DropdownItem to work as a selectable item. Active will
  // change the item's appearance to selected. The href is required to display
  // correct mouse pointers when each item is hovered. Multiselect requires onChange
  // which will be triggered from a click on the label. Thus both clicks on the label
  // and checkbox result in an onChange. Thus properly toggling the input checkbox.
  //


  const itemProps = item.props;
  const {
    listener,
    selected
  } = extractWrapperProps(wrapper); //
  // This is our opportunity to determine selected and active state
  // before we clone the element. It is easiest to track this state at the
  // menu instead of the individual DropdownItem instances.
  //

  const {
    active,
    isSelected
  } = getItemState(wrapper, item, selected, index); // If wrapper is dropdown column, get the menu reference to set the dropdownItem reference

  const menuRef = wrapper.props.menuRef || wrapper; //
  // For type='base', type='primary', etc. Pass-thru "active" set on the individual
  // item props, if it exists. Otherwise default to the internal selection logic.
  //

  if (!wrapper.props.type.includes('select') && !wrapper.props.type.includes('inline') && !wrapper.props.type.includes('primary') && wrapper.props.type !== 'tripledot' && wrapper.props.type !== 'custom' || item.type !== _dropdownItem.default) {
    return /*#__PURE__*/_react.default.cloneElement(item, {
      active,
      ref: r => {
        menuRef.dropdownItem = r;
      }
    });
  }

  return /*#__PURE__*/_react.default.cloneElement(item, {
    isSelected,
    active,
    name: wrapper.props.name,
    ref: r => {
      menuRef.dropdownItem = r;
    },
    type: wrapper.props.type,
    href: itemProps.href || '#',
    [listener]: event => {
      if (itemProps.disabled || itemProps.href === '#' || listener === 'onClick') event.preventDefault();
      if (itemProps.disabled) return;
      wrapper.props.onChange(_objectSpread({
        itemIndex: index,
        active: !active
      }, itemProps), event, itemProps[listener]);
    }
  });
}

/***/ }),

/***/ "../../components/fieldset/lib/fieldset.js":
/*!*************************************************!*\
  !*** ../../components/fieldset/lib/fieldset.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}
/**
 * Platform independant Fieldset base class.
 *
 * @Constructor
 * @public
 */


class Base extends _react.Component {
  /**
   * Check if the child input elements contain a given property.
   *
   * @param {Array} children Child elements.
   * @param {String} prop Name of the property that should be present.
   * @returns {Boolean} Results
   * @private
   */
  includes(children, prop) {
    return _react.default.Children.toArray(children).some(child => {
      if (!child.type || !child.props) return false;

      if (child.type === 'input' || child.type.toString() === 'TextInput') {
        return prop in child.props;
      }

      return this.includes(child.props.children, prop);
    });
  }
  /**
   * Check if our given input is invalid.
   *
   * @param {Array} children Child elements.
   * @returns {Boolean} Results
   * @public
   */


  invalid(children) {
    return this.includes(children || this.props.children, 'data-invalid');
  }
  /**
   * Check if our given input is valid.
   *
   * @param {Array} children Child elements.
   * @returns {Boolean} Results
   * @public
   */


  valid(children) {
    return this.includes(children || this.props.children, 'data-valid');
  }
  /**
   * Default proxy value.
   *
   * TODO (crobbins): Should be combined with index.js since it only has
   * one concrete implementation.
   *
   * @public
   */


  get proxy() {
    throw new Error('Proxy implementation required');
  }
  /**
   * Default view value.
   *
   * TODO (crobbins): Should be combined with index.js since it only has
   * one concrete implementation.
   *
   * @public
   */


  get view() {
    throw new Error('View implementation required');
  }
  /**
   * Render the view of the class unless the `proxy` property is true.
   *
   * @returns {ReactElement} View from extended class.
   * @private
   */


  render() {
    const {
      proxy,
      children
    } = this.props;

    if (proxy) {
      return _react.Children.count(children) === 1 ? children : this.proxy;
    }

    return this.view;
  }

}
/**
 * PropType validation
 *
 * @type {Object}
 * @private
 */


exports["default"] = Base;
Base.propTypes = {
  /** Determines if the children are wrapped in a proxy component */
  proxy: _propTypes.default.bool,

  /** Child components in the fieldset */
  children: _propTypes.default.node
};

/***/ }),

/***/ "../../components/fieldset/lib/index.js":
/*!**********************************************!*\
  !*** ../../components/fieldset/lib/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.Fieldset = void 0;

var _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../../node_modules/@babel/runtime/helpers/defineProperty.js"));

var _extends2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ "../../../node_modules/@babel/runtime/helpers/extends.js"));

var _objectWithoutProperties2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/objectWithoutProperties */ "../../../node_modules/@babel/runtime/helpers/objectWithoutProperties.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _fieldset = _interopRequireDefault(__webpack_require__(/*! ./fieldset */ "../../components/fieldset/lib/fieldset.js"));

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _classNames = _interopRequireDefault(__webpack_require__(/*! @ux/component-utilities/lib/classNames */ "../../utils/component-utilities/lib/classNames.js"));

const _excluded = ["children", "classNames"],
      _excluded2 = ["className", "children"];

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      (0, _defineProperty2.default)(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

const FieldSetWithRef = /*#__PURE__*/_react.default.forwardRef((_ref, ref) => {
  let {
    children,
    classNames
  } = _ref,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  return /*#__PURE__*/_react.default.createElement("fieldset", (0, _extends2.default)({
    ref: ref,
    className: classNames
  }, props), children);
});
/**
 * PropType validation
 *
 * @type {Object}
 * @private
 */


FieldSetWithRef.propTypes = _objectSpread(_objectSpread({}, _fieldset.default.propTypes), {}, {
  /** Classes applied to a fieldset */
  classNames: _propTypes.default.string
});
/**
 * Render a field set.
 *
 * @class Fieldset
 * @displayName Fieldset (Web)
 * @public
 */

class Fieldset extends _fieldset.default {
  /**
   * Render a plain div when proxy with multiple child elements.
   *
   * @returns {React.DOM} View element.
   * @private
   */
  get proxy() {
    return /*#__PURE__*/_react.default.createElement("div", null, this.props.children);
  }
  /**
   * Render the Fieldset, with or without error messages.
   *
   * @returns {React.DOM} Fieldset element.
   * @private
   */


  get view() {
    const _this$props = this.props,
          {
      className,
      children
    } = _this$props,
          props = (0, _objectWithoutProperties2.default)(_this$props, _excluded2); //
    // This property should not be spread onto the fieldset
    //

    delete props.proxy; //
    // Preserve class ordering (form-group, props.className, rest)
    //

    const classNames = (0, _classNames.default)('form-group', className, (0, _classNames.default)({
      'has-danger': this.invalid()
    }));
    return /*#__PURE__*/_react.default.createElement(FieldSetWithRef, (0, _extends2.default)({
      classNames: classNames
    }, props), children);
  }

  render() {
    return super.render();
  }

}
/**
 * PropType validation
 *
 * @type {Object}
 * @private
 */


exports.Fieldset = Fieldset;
Fieldset.propTypes = _objectSpread(_objectSpread({}, _fieldset.default.propTypes), {}, {
  /** Classes applied to a fieldset */
  className: _propTypes.default.string
});
var _default = Fieldset;
exports["default"] = _default;

/***/ }),

/***/ "../../components/growl/lib/index.js":
/*!*******************************************!*\
  !*** ../../components/growl/lib/index.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.UX_GROWL_DELAY_MS = void 0;

var _extends2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ "../../../node_modules/@babel/runtime/helpers/extends.js"));

var _objectWithoutProperties2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/objectWithoutProperties */ "../../../node_modules/@babel/runtime/helpers/objectWithoutProperties.js"));

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _reactDom = _interopRequireDefault(__webpack_require__(/*! react-dom */ "../../../node_modules/react-dom/index.js"));

var _dialog = _interopRequireDefault(__webpack_require__(/*! @ux/dialog */ "../../components/dialog/lib/index.js"));

var _button = _interopRequireDefault(__webpack_require__(/*! @ux/button */ "../../components/button/lib/index.js"));

var _legacy = __webpack_require__(/*! ./legacy */ "../../components/growl/lib/legacy.js");

const _excluded = ["dismiss", "lifetime"];

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

const UX_GROWL_CLASSNAME = 'ux-growl';
const UX_GROWL_DELAY_MS = '--uxGrowl-message--delayMilliseconds';
/**
 * Toggles the animation for the messages
 *
 * @param {Object} config - Configuration object
 * @param {Element} config.currentTarget - The DOM node to check
 * @param {Number} config.lifetime - How long the message should persist for
 * @returns {Boolean} - Whether or not the animation is active
 */

exports.UX_GROWL_DELAY_MS = UX_GROWL_DELAY_MS;

function toggleAnimationTrigger(_ref) {
  let {
    currentTarget,
    lifetime
  } = _ref;
  const exists = hasDismissal({
    currentTarget,
    lifetime
  });
  !isNaN(lifetime) && currentTarget.style.setProperty(UX_GROWL_DELAY_MS, `${lifetime}ms`);
  return exists;
}
/**
 * Determines if the dismissal animation should exist
 *
 * @param {Object} config - Configuration object
 * @param {Element} config.currentTarget - The DOM node to check
 * @param {Number} config.lifetime - How long the message should persist for
 * @returns {Boolean} - Whether or not the dismissal animation is applied
 */


function hasDismissal(_ref2) {
  let {
    currentTarget,
    lifetime
  } = _ref2;
  return !isNaN(lifetime) && Boolean(currentTarget.style.getPropertyValue(UX_GROWL_DELAY_MS));
}
/**
 * Controls when the dismissal should pause
 *
 * @param {Object} config - Configuration object
 * @param {Element} config.currentTarget - The DOM node to check
 * @param {Number} config.lifetime - How long the message should persist for
 * @param {Boolean} config.active - Whether or not to pause the dismissal
 */


function pauseDismissal(_ref3) {
  let {
    currentTarget,
    lifetime,
    pause
  } = _ref3; // If the message persists, do nothing

  if (!hasDismissal(currentTarget, lifetime)) return; // Otherwise, we stop the dismissal animation from running while active

  if (pause) {
    currentTarget.style.setProperty('animation-name', 'none');
  } else {
    currentTarget.style.removeProperty('animation-name');
  }
}
/**
 * A wrapper for the <Dialog/> component which adds animation
 *
 * @param {Function} dismiss - Function which dismisses the message by id
 * @param {Number} lifetime - How long the message should persist for
 * @param {String} emphasis - Describes the importance of the message
 * @returns {Component} - <Message/> component with a <Dialog/>
 */


const Message = /*#__PURE__*/(0, _react.memo)(_ref4 => {
  let {
    dismiss,
    lifetime
  } = _ref4,
      rest = (0, _objectWithoutProperties2.default)(_ref4, _excluded);
  const {
    id
  } = rest;

  const onAnimationEnd = _ref5 => {
    let {
      currentTarget
    } = _ref5;
    toggleAnimationTrigger({
      currentTarget,
      lifetime
    }) && dismiss(id);
  };

  const userEventIn = _ref6 => {
    let {
      currentTarget
    } = _ref6;
    pauseDismissal({
      currentTarget,
      lifetime,
      pause: true
    });
  };

  const userEventOut = _ref7 => {
    let {
      currentTarget
    } = _ref7;
    pauseDismissal({
      currentTarget,
      lifetime,
      pause: false
    });
  };

  return /*#__PURE__*/_react.default.createElement("li", {
    className: `${UX_GROWL_CLASSNAME}-message`,
    onFocus: userEventIn,
    onBlur: userEventOut,
    onMouseEnter: userEventIn,
    onMouseLeave: userEventOut,
    onAnimationEnd: onAnimationEnd
  }, /*#__PURE__*/_react.default.createElement(_dialog.default, (0, _extends2.default)({
    role: "alert",
    stretch: true,
    onClose: () => dismiss(id)
  }, rest)));
});
Message.propTypes = {
  /** Function which dismisses the message by id */
  dismiss: _propTypes.default.func,

  /** How long the message should persist for */
  lifetime: _propTypes.default.number
};
let preloadedMessages = [];
/**
 * Create a <Growl/> component
 *
 * @param {Object} props - Configuration object
 * @param {String} [props.closeLabel] - Label for the button to clear messages
 * @returns {Component} - <Growl/> component
 */

function Growl() {
  let {
    closeLabel
  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  const [messages, setMessages] = (0, _react.useState)([]);
  const addMessage = (0, _react.useCallback)(message => setMessages(prevMessages => prevMessages.concat((0, _legacy.transform)(message))), []);
  const removeMessage = (0, _react.useCallback)(id => setMessages(prevMessages => prevMessages.filter(message => message.id !== id)), []);
  (0, _react.useEffect)(() => {
    Growl.__mounted++;

    const onUnmountCleanup = () => Growl.__mounted--;

    if (Growl.__mounted > 1) {
       true && console.warn('<Growl /> has been mounted more than once. This may produce undefined behavior and overlapping or doubled messages.');
    }

    Growl.addGrowlMessage = addMessage;
    Growl.removeGrowlMessage = removeMessage;

    while (preloadedMessages.length > 0) {
      Growl.addGrowlMessage(preloadedMessages.shift());
    }

    return onUnmountCleanup;
  }, []); // eslint-disable-line react-hooks/exhaustive-deps
  // The above disabled exhaustive-deps becuase addMessage and removeMessage are stable due to useCallback

  const clearButton = /*#__PURE__*/_react.default.createElement(_button.default, {
    className: `${UX_GROWL_CLASSNAME}-clear`,
    text: closeLabel || 'Close All',
    onClick: () => setMessages([]),
    design: "primary"
  });

  const growl = /*#__PURE__*/_react.default.createElement("div", {
    className: `${UX_GROWL_CLASSNAME}-shell`,
    "aria-live": "polite"
  }, messages.length > 1 && clearButton, /*#__PURE__*/_react.default.createElement("ul", {
    className: `${UX_GROWL_CLASSNAME}-messages`
  }, messages.map(props => /*#__PURE__*/_react.default.createElement(Message // eslint-disable-next-line react/prop-types
  , (0, _extends2.default)({
    key: props.id // Always use the internal remove message instead of Growl.removeGrowlMessage in case of a double mount.
    ,
    dismiss: removeMessage
  }, props)))));

  return messages.length ? /*#__PURE__*/_reactDom.default.createPortal(growl, document.body) : null;
} // Initial function to warn when the <Growl/> is not yet mounted


Growl.addGrowlMessage = config => {
  // eslint-disable-next-line max-len
   true && console.warn('You attemped to add a growl message before <Growl /> was mounted and ready. We will attempt to replay this message when <Growl /> is finally mounted.', config);
  preloadedMessages.push(config);
};

Growl.removeGrowlMessage = id => {
  // eslint-disable-next-line max-len
   true && console.warn('You attemped to remove a growl message before <Growl /> was mounted and ready. We will attempt to remove this message from the replay.', id);
  preloadedMessages = preloadedMessages.filter(message => message.id !== id);
};

Growl.__mounted = 0;
Growl.propTypes = {
  /** Label for the button to clear messages */
  closeLabel: _propTypes.default.string
};
var _default = Growl;
exports["default"] = _default;

/***/ }),

/***/ "../../components/growl/lib/legacy.js":
/*!********************************************!*\
  !*** ../../components/growl/lib/legacy.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.transform = transform;

var _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../../node_modules/@babel/runtime/helpers/defineProperty.js"));

var _objectWithoutProperties2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/objectWithoutProperties */ "../../../node_modules/@babel/runtime/helpers/objectWithoutProperties.js"));

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _text = _interopRequireDefault(__webpack_require__(/*! @ux/text */ "../../components/text/lib/index.js"));

const _excluded = ["title", "content", "children", "fadeTime", "lifetime", "icon", "emphasis", "id"];

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      (0, _defineProperty2.default)(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}
/**
 * Generates an id
 * @returns {Number} - An incremented number
 */


let i = 0;

function generateNextId() {
  return i++;
}
/**
 * Converts the addGrowlMessage configuration object into props for <Dialog/>
 *
 * @param {Object} config - Configuration object
 * @param {String|Node} title - Title of the message
 * @param {Node} content - Alias for children
 * @param {Node} children - Content for the message
 * @param {Number} fadeTime - Alias for lifetime
 * @param {Number} lifetime - The amount of time to persist the message
 * @param {String} icon - Alias for emphasis
 * @param {String} emphasis - The status of the message, one of the feedback types
 * @param {String} id - A unique id for the message
 * @returns {Object} - A converted props object for <Dialog/>
 */


function transform(config) {
  const {
    title,
    content,
    children,
    fadeTime,
    lifetime,
    icon,
    emphasis,
    id
  } = config,
        rest = (0, _objectWithoutProperties2.default)(config, _excluded);
  warn(config);
  const translation = icon === 'none' ? 'info' : icon || emphasis;
  return _objectSpread({
    title: typeof title === 'string' ? /*#__PURE__*/_react.default.createElement(_text.default.h2, {
      text: title,
      as: "title"
    }) : title,
    children: content || children,
    lifetime: fadeTime || lifetime,
    id: id || `ux-growl-${generateNextId()}`,
    emphasis: translation
  }, rest);
}

const warnings = new Set();
/**
 * Warns when the shim is used
 *
 * @param {Object} props - Configuration object
 * @param {Node} content - Alias for children
 * @param {Number} fadeTime - Alias for lifetime
 * @param {String} icon - Alias for emphasis
 * @param {String} id - A unique id for the message
 */

function warn(props) {
  const {
    content,
    fadeTime,
    icon,
    id
  } = props;

  if (content) {
    const warning = 'Prop `content` for Growl.addGrowlMessage will be removed in v2201, please replace with `children`';
    !warnings.has(warning) && warnings.add(warning) && console.warn(warning);
  }

  if (fadeTime) {
    const warning = 'Prop `fadeTime` for Growl.addGrowlMessage will be removed in v2201, please replace with `lifetime`';
    !warnings.has(warning) && warnings.add(warning) && console.warn(warning);
  }

  if (icon) {
    const warning = 'Prop `icon` for Growl.addGrowlMessage will be removed in v2201, please replace with `emphasis`';
    !warnings.has(warning) && warnings.add(warning) && console.warn(warning);
  }

  if (icon === 'none') {
    const warning = '`icon=none` for Growl.addGrowlMessage now maps to emphasis=info, icons are required for all Growl messages';
    !warnings.has(warning) && warnings.add(warning) && console.warn(warning);
  }

  if (!id) {
    const warning = 'Prop `id` for Growl.addGrowlMessage is required for 2200';
    !warnings.has(warning) && warnings.add(warning) && console.warn(warning);
  }
}

/***/ }),

/***/ "../../components/icon/alert/index.js":
/*!********************************************!*\
  !*** ../../components/icon/alert/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


/**
 * /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\
 * /!\                                                                     /!\
 * /!\   WARNING THIS FILE IS AUTOMATICALLY GENERATED. DO NOT ALTER IT'S   /!\
 * /!\      CONTENTS MANUALLY. UPDATE THE TEMPLATE FILE INSTEAD.           /!\
 * /!\                                                                     /!\
 * /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\
 */

const create = __webpack_require__(/*! ../base.js */ "../../components/icon/base.js"); //
// @ux/require: './index.css';
//
// Unfortunately, WebPack decided to remove the ability to use labels as require
// indicator as that would be the only way we could make WebPack automatically
// bundle files without them actually being required serverside.
//


module.exports = create('alert', 'false');

/***/ }),

/***/ "../../components/icon/base.js":
/*!*************************************!*\
  !*** ../../components/icon/base.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _svgosm = __webpack_require__(/*! ./svgosm.js */ "../../components/icon/svgosm.js");

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

const _excluded = ["width", "height", "placeholder", "className", "title", "desc", "role"];

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };
  return _extends.apply(this, arguments);
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}
/**
 * Detect if we are running in a Node.js environment.
 *
 * @type {Boolean}
 * @private
 */


const isNode = !!(typeof process !== 'undefined' && process.versions && process.versions.node);
/**
 * Generates our dedicated Icon component.
 *
 * @param {String} displayName Name of the Icon.
 * @param {String} deprecated Indication if the icon should be deprecated
 * @returns {React.Component} The React Component.
 * @public
 */

module.exports = function create(displayName, deprecated) {
  const warned = {};
  /**
   * The base component that renders the Icon.
   *
   * @constructor
   * @param {Object} props All the props
   * @param {Number} props.width Width of the icon.
   * @param {Number} props.height Height of the icon.
   * @param {String} props.className Class name of the icon.
   * @param {String} props.title A11y title of the icon.
   * @param {String} props.desc A11y description of the icon.
   * @param {String} props.role A11y role for the icon.
   * @param {Object} props.placeholder Information used to statically render the icon.
   * @param {Object} props.props The rest of the props that are spread on the <use> tag.
   * @param {React.Ref} ref Forwarding reference
   * @private
   */

  const Fwd = /*#__PURE__*/_react.default.forwardRef(function Icon(_ref, ref) {
    let {
      width = '1.5em',
      height = '1.5em',
      placeholder,
      className,
      title,
      desc,
      role = 'presentation'
    } = _ref,
        rest = _objectWithoutProperties(_ref, _excluded);

    const [sym, setSymbol] = (0, _react.useState)(placeholder); //
    // We use the useEffect hook to bypass the SSR hydration warnings. In a SSR
    // application we do not have access to the icon information as that is
    // extracted from the CSS. Nor do we want to duplicate the content in
    // HTML as that means we're shipping the icons multiple times to our users.
    //

    (0, _react.useEffect)(function retry() {
      const res = _svgosm.svgosm.get(displayName, function extract() {
        const details = _svgosm.svgosm.extract(`uxp-icon-${displayName}`);

        if (!details) return;
        return Object.assign(details, {
          title: title,
          desc: desc
        });
      });

      if (res) return setSymbol(res); //
      // If we don't have a result from the svg manager it's most likely caused
      // by missing CSS so we're going to advice the user, only dev/test,
      // in the browser (because we don't care bout node.js env) that they need
      // to import the CSS.
      //

      if ( true && !isNode && !warned.css) {
        console.log(`Unable to render the icon, did you forget to include the required css? @ux/icon/${displayName}/index.(css|scss)?`);
        warned.css = true;
      }
    }, [displayName]); //
    // Return early with no content if there isn't any icon to render.
    //

    if (!sym) return null;
    const props = {};
    const svg = {
      className: ['uxicon-svg-container', className].join(' ').trim(),
      height: height || sym.height,
      width: width || sym.width,
      role,
      ref
    }; //
    // Extract the `aria-` prefixed props from the supplied props as they
    // need to be applied to the <svg> element, the rest of the props
    // need to be applied to the <use> element, for styling purposes.
    //

    Object.keys(rest).forEach(function propSort(key) {
      if (key.startsWith('aria-') || key.startsWith('data-')) svg[key] = rest[key];else props[key] = rest[key];
    }); //
    // When no `aria-labelledby` is provided to us, but we did receive a title
    // or a desc, we're going to generate the correct aria- role by default.
    //

    if (!svg['aria-labelledby'] && (title || desc)) {
      const unique = sym.link.slice(1);
      const labels = [];
      if (title) labels.push(`${unique}-title`);
      if (desc) labels.push(`${unique}-desc`);
      svg['aria-labelledby'] = labels.join(' ');
    }

    return /*#__PURE__*/_react.default.createElement("svg", svg, /*#__PURE__*/_react.default.createElement("use", _extends({
      fill: "currentColor"
    }, props, {
      xlinkHref: sym.link
    })));
  }); //
  // Ease debugging.
  //


  Fwd.displayName = displayName + 'Icon';
  /**
   * PropType validation.
   *
   * @type {Object}
   * @private
   */

  Fwd.propTypes = {
    width: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
    height: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
    placeholder: _propTypes.default.shape({
      link: _propTypes.default.string
    }),
    className: _propTypes.default.string,
    desc: _propTypes.default.string,
    title: _propTypes.default.string,
    role: _propTypes.default.string
  }; //
  // Ensure that this is not active in production environments, should be
  // auto deleted by minifiers.
  //

  if (true) {
    //
    // Please note that the icon is passed as string because of our
    // {namespace:field} template pattern. The files are processed with babel
    // which thinks it's an object pattern and reformats it as a pretty object
    // which breaks the template engine. So we're just gonna pass it as string
    // to work around that limitation.
    //
    if (deprecated === 'true' && !warned.dep) {
      console.log(`The icon "${displayName}" is deprecated and will be removed in the next major release of @ux/icon`);
      warned.dep = true;
    }
  }

  return Fwd;
};

/***/ }),

/***/ "../../components/icon/checkmark/index.js":
/*!************************************************!*\
  !*** ../../components/icon/checkmark/index.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


/**
 * /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\
 * /!\                                                                     /!\
 * /!\   WARNING THIS FILE IS AUTOMATICALLY GENERATED. DO NOT ALTER IT'S   /!\
 * /!\      CONTENTS MANUALLY. UPDATE THE TEMPLATE FILE INSTEAD.           /!\
 * /!\                                                                     /!\
 * /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\
 */

const create = __webpack_require__(/*! ../base.js */ "../../components/icon/base.js"); //
// @ux/require: './index.css';
//
// Unfortunately, WebPack decided to remove the ability to use labels as require
// indicator as that would be the only way we could make WebPack automatically
// bundle files without them actually being required serverside.
//


module.exports = create('checkmark', 'false');

/***/ }),

/***/ "../../components/icon/chevron-dbl-left/index.js":
/*!*******************************************************!*\
  !*** ../../components/icon/chevron-dbl-left/index.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


/**
 * /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\
 * /!\                                                                     /!\
 * /!\   WARNING THIS FILE IS AUTOMATICALLY GENERATED. DO NOT ALTER IT'S   /!\
 * /!\      CONTENTS MANUALLY. UPDATE THE TEMPLATE FILE INSTEAD.           /!\
 * /!\                                                                     /!\
 * /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\
 */

const create = __webpack_require__(/*! ../base.js */ "../../components/icon/base.js"); //
// @ux/require: './index.css';
//
// Unfortunately, WebPack decided to remove the ability to use labels as require
// indicator as that would be the only way we could make WebPack automatically
// bundle files without them actually being required serverside.
//


module.exports = create('chevron-dbl-left', 'false');

/***/ }),

/***/ "../../components/icon/chevron-dbl-right/index.js":
/*!********************************************************!*\
  !*** ../../components/icon/chevron-dbl-right/index.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


/**
 * /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\
 * /!\                                                                     /!\
 * /!\   WARNING THIS FILE IS AUTOMATICALLY GENERATED. DO NOT ALTER IT'S   /!\
 * /!\      CONTENTS MANUALLY. UPDATE THE TEMPLATE FILE INSTEAD.           /!\
 * /!\                                                                     /!\
 * /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\
 */

const create = __webpack_require__(/*! ../base.js */ "../../components/icon/base.js"); //
// @ux/require: './index.css';
//
// Unfortunately, WebPack decided to remove the ability to use labels as require
// indicator as that would be the only way we could make WebPack automatically
// bundle files without them actually being required serverside.
//


module.exports = create('chevron-dbl-right', 'false');

/***/ }),

/***/ "../../components/icon/chevron-down/index.js":
/*!***************************************************!*\
  !*** ../../components/icon/chevron-down/index.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


/**
 * /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\
 * /!\                                                                     /!\
 * /!\   WARNING THIS FILE IS AUTOMATICALLY GENERATED. DO NOT ALTER IT'S   /!\
 * /!\      CONTENTS MANUALLY. UPDATE THE TEMPLATE FILE INSTEAD.           /!\
 * /!\                                                                     /!\
 * /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\
 */

const create = __webpack_require__(/*! ../base.js */ "../../components/icon/base.js"); //
// @ux/require: './index.css';
//
// Unfortunately, WebPack decided to remove the ability to use labels as require
// indicator as that would be the only way we could make WebPack automatically
// bundle files without them actually being required serverside.
//


module.exports = create('chevron-down', 'false');

/***/ }),

/***/ "../../components/icon/chevron-left/index.js":
/*!***************************************************!*\
  !*** ../../components/icon/chevron-left/index.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


/**
 * /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\
 * /!\                                                                     /!\
 * /!\   WARNING THIS FILE IS AUTOMATICALLY GENERATED. DO NOT ALTER IT'S   /!\
 * /!\      CONTENTS MANUALLY. UPDATE THE TEMPLATE FILE INSTEAD.           /!\
 * /!\                                                                     /!\
 * /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\
 */

const create = __webpack_require__(/*! ../base.js */ "../../components/icon/base.js"); //
// @ux/require: './index.css';
//
// Unfortunately, WebPack decided to remove the ability to use labels as require
// indicator as that would be the only way we could make WebPack automatically
// bundle files without them actually being required serverside.
//


module.exports = create('chevron-left', 'false');

/***/ }),

/***/ "../../components/icon/chevron-right/index.js":
/*!****************************************************!*\
  !*** ../../components/icon/chevron-right/index.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


/**
 * /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\
 * /!\                                                                     /!\
 * /!\   WARNING THIS FILE IS AUTOMATICALLY GENERATED. DO NOT ALTER IT'S   /!\
 * /!\      CONTENTS MANUALLY. UPDATE THE TEMPLATE FILE INSTEAD.           /!\
 * /!\                                                                     /!\
 * /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\
 */

const create = __webpack_require__(/*! ../base.js */ "../../components/icon/base.js"); //
// @ux/require: './index.css';
//
// Unfortunately, WebPack decided to remove the ability to use labels as require
// indicator as that would be the only way we could make WebPack automatically
// bundle files without them actually being required serverside.
//


module.exports = create('chevron-right', 'false');

/***/ }),

/***/ "../../components/icon/chevron-up/index.js":
/*!*************************************************!*\
  !*** ../../components/icon/chevron-up/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


/**
 * /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\
 * /!\                                                                     /!\
 * /!\   WARNING THIS FILE IS AUTOMATICALLY GENERATED. DO NOT ALTER IT'S   /!\
 * /!\      CONTENTS MANUALLY. UPDATE THE TEMPLATE FILE INSTEAD.           /!\
 * /!\                                                                     /!\
 * /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\
 */

const create = __webpack_require__(/*! ../base.js */ "../../components/icon/base.js"); //
// @ux/require: './index.css';
//
// Unfortunately, WebPack decided to remove the ability to use labels as require
// indicator as that would be the only way we could make WebPack automatically
// bundle files without them actually being required serverside.
//


module.exports = create('chevron-up', 'false');

/***/ }),

/***/ "../../components/icon/clock/index.js":
/*!********************************************!*\
  !*** ../../components/icon/clock/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


/**
 * /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\
 * /!\                                                                     /!\
 * /!\   WARNING THIS FILE IS AUTOMATICALLY GENERATED. DO NOT ALTER IT'S   /!\
 * /!\      CONTENTS MANUALLY. UPDATE THE TEMPLATE FILE INSTEAD.           /!\
 * /!\                                                                     /!\
 * /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\
 */

const create = __webpack_require__(/*! ../base.js */ "../../components/icon/base.js"); //
// @ux/require: './index.css';
//
// Unfortunately, WebPack decided to remove the ability to use labels as require
// indicator as that would be the only way we could make WebPack automatically
// bundle files without them actually being required serverside.
//


module.exports = create('clock', 'false');

/***/ }),

/***/ "../../components/icon/comment/index.js":
/*!**********************************************!*\
  !*** ../../components/icon/comment/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


/**
 * /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\
 * /!\                                                                     /!\
 * /!\   WARNING THIS FILE IS AUTOMATICALLY GENERATED. DO NOT ALTER IT'S   /!\
 * /!\      CONTENTS MANUALLY. UPDATE THE TEMPLATE FILE INSTEAD.           /!\
 * /!\                                                                     /!\
 * /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\
 */

const create = __webpack_require__(/*! ../base.js */ "../../components/icon/base.js"); //
// @ux/require: './index.css';
//
// Unfortunately, WebPack decided to remove the ability to use labels as require
// indicator as that would be the only way we could make WebPack automatically
// bundle files without them actually being required serverside.
//


module.exports = create('comment', 'false');

/***/ }),

/***/ "../../components/icon/delete/index.js":
/*!*********************************************!*\
  !*** ../../components/icon/delete/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


/**
 * /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\
 * /!\                                                                     /!\
 * /!\   WARNING THIS FILE IS AUTOMATICALLY GENERATED. DO NOT ALTER IT'S   /!\
 * /!\      CONTENTS MANUALLY. UPDATE THE TEMPLATE FILE INSTEAD.           /!\
 * /!\                                                                     /!\
 * /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\
 */

const create = __webpack_require__(/*! ../base.js */ "../../components/icon/base.js"); //
// @ux/require: './index.css';
//
// Unfortunately, WebPack decided to remove the ability to use labels as require
// indicator as that would be the only way we could make WebPack automatically
// bundle files without them actually being required serverside.
//


module.exports = create('delete', 'false');

/***/ }),

/***/ "../../components/icon/ellipsis/index.js":
/*!***********************************************!*\
  !*** ../../components/icon/ellipsis/index.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


/**
 * /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\
 * /!\                                                                     /!\
 * /!\   WARNING THIS FILE IS AUTOMATICALLY GENERATED. DO NOT ALTER IT'S   /!\
 * /!\      CONTENTS MANUALLY. UPDATE THE TEMPLATE FILE INSTEAD.           /!\
 * /!\                                                                     /!\
 * /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\
 */

const create = __webpack_require__(/*! ../base.js */ "../../components/icon/base.js"); //
// @ux/require: './index.css';
//
// Unfortunately, WebPack decided to remove the ability to use labels as require
// indicator as that would be the only way we could make WebPack automatically
// bundle files without them actually being required serverside.
//


module.exports = create('ellipsis', 'false');

/***/ }),

/***/ "../../components/icon/help/index.js":
/*!*******************************************!*\
  !*** ../../components/icon/help/index.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


/**
 * /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\
 * /!\                                                                     /!\
 * /!\   WARNING THIS FILE IS AUTOMATICALLY GENERATED. DO NOT ALTER IT'S   /!\
 * /!\      CONTENTS MANUALLY. UPDATE THE TEMPLATE FILE INSTEAD.           /!\
 * /!\                                                                     /!\
 * /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\
 */

const create = __webpack_require__(/*! ../base.js */ "../../components/icon/base.js"); //
// @ux/require: './index.css';
//
// Unfortunately, WebPack decided to remove the ability to use labels as require
// indicator as that would be the only way we could make WebPack automatically
// bundle files without them actually being required serverside.
//


module.exports = create('help', 'false');

/***/ }),

/***/ "../../components/icon/information/index.js":
/*!**************************************************!*\
  !*** ../../components/icon/information/index.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


/**
 * /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\
 * /!\                                                                     /!\
 * /!\   WARNING THIS FILE IS AUTOMATICALLY GENERATED. DO NOT ALTER IT'S   /!\
 * /!\      CONTENTS MANUALLY. UPDATE THE TEMPLATE FILE INSTEAD.           /!\
 * /!\                                                                     /!\
 * /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\
 */

const create = __webpack_require__(/*! ../base.js */ "../../components/icon/base.js"); //
// @ux/require: './index.css';
//
// Unfortunately, WebPack decided to remove the ability to use labels as require
// indicator as that would be the only way we could make WebPack automatically
// bundle files without them actually being required serverside.
//


module.exports = create('information', 'false');

/***/ }),

/***/ "../../components/icon/link-arrow/index.js":
/*!*************************************************!*\
  !*** ../../components/icon/link-arrow/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


/**
 * /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\
 * /!\                                                                     /!\
 * /!\   WARNING THIS FILE IS AUTOMATICALLY GENERATED. DO NOT ALTER IT'S   /!\
 * /!\      CONTENTS MANUALLY. UPDATE THE TEMPLATE FILE INSTEAD.           /!\
 * /!\                                                                     /!\
 * /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\
 */

const create = __webpack_require__(/*! ../base.js */ "../../components/icon/base.js"); //
// @ux/require: './index.css';
//
// Unfortunately, WebPack decided to remove the ability to use labels as require
// indicator as that would be the only way we could make WebPack automatically
// bundle files without them actually being required serverside.
//


module.exports = create('link-arrow', 'false');

/***/ }),

/***/ "../../components/icon/minus/index.js":
/*!********************************************!*\
  !*** ../../components/icon/minus/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


/**
 * /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\
 * /!\                                                                     /!\
 * /!\   WARNING THIS FILE IS AUTOMATICALLY GENERATED. DO NOT ALTER IT'S   /!\
 * /!\      CONTENTS MANUALLY. UPDATE THE TEMPLATE FILE INSTEAD.           /!\
 * /!\                                                                     /!\
 * /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\
 */

const create = __webpack_require__(/*! ../base.js */ "../../components/icon/base.js"); //
// @ux/require: './index.css';
//
// Unfortunately, WebPack decided to remove the ability to use labels as require
// indicator as that would be the only way we could make WebPack automatically
// bundle files without them actually being required serverside.
//


module.exports = create('minus', 'false');

/***/ }),

/***/ "../../components/icon/plus/index.js":
/*!*******************************************!*\
  !*** ../../components/icon/plus/index.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


/**
 * /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\
 * /!\                                                                     /!\
 * /!\   WARNING THIS FILE IS AUTOMATICALLY GENERATED. DO NOT ALTER IT'S   /!\
 * /!\      CONTENTS MANUALLY. UPDATE THE TEMPLATE FILE INSTEAD.           /!\
 * /!\                                                                     /!\
 * /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\
 */

const create = __webpack_require__(/*! ../base.js */ "../../components/icon/base.js"); //
// @ux/require: './index.css';
//
// Unfortunately, WebPack decided to remove the ability to use labels as require
// indicator as that would be the only way we could make WebPack automatically
// bundle files without them actually being required serverside.
//


module.exports = create('plus', 'false');

/***/ }),

/***/ "../../components/icon/refresh/index.js":
/*!**********************************************!*\
  !*** ../../components/icon/refresh/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


/**
 * /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\
 * /!\                                                                     /!\
 * /!\   WARNING THIS FILE IS AUTOMATICALLY GENERATED. DO NOT ALTER IT'S   /!\
 * /!\      CONTENTS MANUALLY. UPDATE THE TEMPLATE FILE INSTEAD.           /!\
 * /!\                                                                     /!\
 * /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\
 */

const create = __webpack_require__(/*! ../base.js */ "../../components/icon/base.js"); //
// @ux/require: './index.css';
//
// Unfortunately, WebPack decided to remove the ability to use labels as require
// indicator as that would be the only way we could make WebPack automatically
// bundle files without them actually being required serverside.
//


module.exports = create('refresh', 'false');

/***/ }),

/***/ "../../components/icon/search/index.js":
/*!*********************************************!*\
  !*** ../../components/icon/search/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


/**
 * /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\
 * /!\                                                                     /!\
 * /!\   WARNING THIS FILE IS AUTOMATICALLY GENERATED. DO NOT ALTER IT'S   /!\
 * /!\      CONTENTS MANUALLY. UPDATE THE TEMPLATE FILE INSTEAD.           /!\
 * /!\                                                                     /!\
 * /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\
 */

const create = __webpack_require__(/*! ../base.js */ "../../components/icon/base.js"); //
// @ux/require: './index.css';
//
// Unfortunately, WebPack decided to remove the ability to use labels as require
// indicator as that would be the only way we could make WebPack automatically
// bundle files without them actually being required serverside.
//


module.exports = create('search', 'false');

/***/ }),

/***/ "../../components/icon/star/index.js":
/*!*******************************************!*\
  !*** ../../components/icon/star/index.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


/**
 * /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\
 * /!\                                                                     /!\
 * /!\   WARNING THIS FILE IS AUTOMATICALLY GENERATED. DO NOT ALTER IT'S   /!\
 * /!\      CONTENTS MANUALLY. UPDATE THE TEMPLATE FILE INSTEAD.           /!\
 * /!\                                                                     /!\
 * /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\
 */

const create = __webpack_require__(/*! ../base.js */ "../../components/icon/base.js"); //
// @ux/require: './index.css';
//
// Unfortunately, WebPack decided to remove the ability to use labels as require
// indicator as that would be the only way we could make WebPack automatically
// bundle files without them actually being required serverside.
//


module.exports = create('star', 'false');

/***/ }),

/***/ "../../components/icon/svgosm.js":
/*!***************************************!*\
  !*** ../../components/icon/svgosm.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.svgosm = exports["default"] = exports.SVGOSM = void 0;
const _excluded = ["viewBox", "title", "desc", "shapes"];

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}
/**
 * Our default root element.
 *
 * @type {DOMElement|Null}
 * @private
 */


const html = typeof document !== 'undefined' ? document.body || document.documentElement : null;
/**
 * SVG Object Storage Manager (SVGOSM) attempts to reduce the SVG DOM footprint
 * by moving all SVG objects into symbols so they can be re-used without having
 * to inject the full SVG structure in multiple places.
 *
 * @class
 * @param {String} name Name, id of the container to inject.
 * @public
 */

class SVGOSM {
  constructor(name, root = html) {
    this.id = name; // Name of the container.

    this.tracker = {}; // Storage tracker to reduce DOM lookup.

    this.mounted = []; // List of all roots we need to operate in.

    this.root = root;
  }
  /**
   * Inject a new SVG element into a given root that is going to be used as
   * storage for all our new symbols so they can be referenced in our HTML.
   *
   * @param {DOMElement} root Container we need to mount in.
   * @public
   */


  mount(root) {
    const container = document.createElement('div');
    container.style = 'display:none';
    container.id = this.id;
    const svg = document.createElementNS(SVGOSM.xmlns, 'svg');
    container.appendChild(svg);
    root.appendChild(container);
    this.mounted.push({
      svg,
      root,
      container
    }); //
    // Populate with other discovered icons.
    //

    Object.keys(this.tracker).forEach(key => {
      svg.innerHTML += this.tracker[key].sym;
    });
  }
  /**
   * Extract information out the CSS of a given HTML element and extract the svg
   * content and the size of the element.
   *
   * @param {String} name Name of the CSS variable we need to extract.
   * @returns {Object|Undefined} The resulting information.
   * @public
   */


  extract(name) {
    if (!name) return;
    let match;

    if (this.root) {
      this.mount(this.root);
      this.root = null;
    }

    this.mounted.some(function search({
      container
    }) {
      const style = window.getComputedStyle(container, ':before');
      const cssvar = name.startsWith('--') ? name : `--${name}`;
      const cssvarvalue = style.getPropertyValue(cssvar);
      let content = style.getPropertyValue('content'); //
      // BLACK MAGIC WARNING: The following blocks provide the following:
      //
      // - Provide backwards compatibility to content: url(svg)
      // - Bail out of old font based content: "\char" properties
      // - Prefer cssvariable values over old content: url() as they can
      //   be overridden for white labels.
      //
      // The big problem here is that `content` can really be anything, it can
      // be `none`, it can be `''`, even `normal` when nothing is assigned to it
      // depending on the element it receives. So we need to figure out _when_
      // to bail out.
      //
      // Browsers also handle reading out the `content` property differently,
      // literally all over the place. Some encode the content, include the
      // quotes that are wrapped around the content, others just include the
      // actual string. So, we just want to normalize this to what ever we want
      // to validate against, which is a single character.
      //

      if (content.length === 3) content = content.charAt(1);

      if (content) {
        if (content.includes('svg')) {
          match = content;
        } else if (content.length === 1 && !/[a-z\d]/i.test(content)) {
          //
          // The contents of icon fonts would be a unicode wrapped in quotes. So
          // if it's 3 chars length (not binary size), and the 2nd character is
          // not alphabetical or a number, it must be unicde char and we should
          // proceed to **not** transform anything here.
          //
          return !!match;
        }
      } //
      // If a CSS variable is defined it should always be used as SVG contents.
      // When we found absolutely nothing at this point, bail out.
      //


      if (cssvarvalue && cssvarvalue.includes('svg')) match = cssvarvalue;
      return !!match;
    });
    if (!match) return;
    return this.parse(match);
  }
  /**
   * Parses the given SVG string and extracts contents.
   *
   * @param {String} str The encoded SVG string.
   * @returns {Object} Parsed SVG result.
   * @private
   */


  parse(str) {
    if (!~str.indexOf('svg')) return {};
    str = decodeURI(str).replace(/%23/g, '#').replace(/\\"/g, '"');
    const start = str.indexOf('>');
    const finish = str.indexOf('</svg>');
    const result = /viewBox=.*?([\d\s.]+)/.exec(str.substr(0, start));
    if (!result) return {};
    return {
      shapes: str.slice(start + 1, finish),
      viewBox: result[1]
    };
  }
  /**
   * Returns the correct reference to the object.
   *
   * @param {String} name The name of the object we want to use.
   * @param {Function} [fn] Sets the value if there isn't any.
   * @returns {Object|Null} The value that should be used in the `xlink:href` attr.
   * @public
   */


  get(name, fn) {
    const res = this.tracker[name];
    if (res || !fn) return res;
    this.set(name, fn(name));
    return this.tracker[name];
  }
  /**
   * Store a new Symbol in our managed SVG object.
   *
   * @param {String} name Name of the symbol.
   * @param {Object} data Detailed information about the symbol.
   * @param {String} data.viewBox The viewBox of the symbol.
   * @param {String} data.title Title of the symbol.
   * @param {String} data.desc Description of the symbol.
   * @param {String} data.shapes The actual symbol that need to be stored.
   * @returns {Boolean} Indication if the shape was inserted.
   * @public
   */


  sym(name, _ref = {}) {
    let {
      viewBox,
      title,
      desc,
      shapes
    } = _ref,
        data = _objectWithoutProperties(_ref, _excluded);

    if (!shapes) return false;
    const uid = `${this.id}-${name}`;
    const a11ytitle = title ? `<title id="${uid}-title">${title}</title>` : '';
    const a11ydesc = desc ? `<desc id="${uid}-desc">${desc}</desc>` : '';
    const sym = `<symbol id="${uid}" viewBox="${viewBox}">${a11ytitle}${a11ydesc}${shapes}</symbol>`;
    this.tracker[name] = _objectSpread(_objectSpread({}, data), {}, {
      link: `#${this.id}-${name}`,
      viewBox,
      sym
    });
    return sym;
  }
  /**
   * Store a new Symbol in our managed SVG object.
   *
   * @param {String} name Name of the symbol.
   * @param {Object} data Detailed information about the symbol.
   * @returns {Boolean} Indication if the shape was inserted.
   * @public
   */


  set(name, data) {
    const sym = this.sym(name, data);
    if (!sym) return false;

    if (this.root) {
      this.mount(this.root);
      this.root = null;
    }

    this.mounted.forEach(({
      svg
    }) => {
      svg.innerHTML += sym;
    });
    return true;
  }

}
/**
 * The XML namespace.
 *
 * @type {String}
 * @private
 */


exports.SVGOSM = exports["default"] = SVGOSM;
SVGOSM.xmlns = 'http://www.w3.org/2000/svg';
/**
 * Pre-create an instance.
 *
 * @type {SVGOSM}
 * @public
 */

const svgosm = new SVGOSM('svg-container');
exports.svgosm = svgosm;

/***/ }),

/***/ "../../components/icon/window-new/index.js":
/*!*************************************************!*\
  !*** ../../components/icon/window-new/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


/**
 * /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\
 * /!\                                                                     /!\
 * /!\   WARNING THIS FILE IS AUTOMATICALLY GENERATED. DO NOT ALTER IT'S   /!\
 * /!\      CONTENTS MANUALLY. UPDATE THE TEMPLATE FILE INSTEAD.           /!\
 * /!\                                                                     /!\
 * /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\
 */

const create = __webpack_require__(/*! ../base.js */ "../../components/icon/base.js"); //
// @ux/require: './index.css';
//
// Unfortunately, WebPack decided to remove the ability to use labels as require
// indicator as that would be the only way we could make WebPack automatically
// bundle files without them actually being required serverside.
//


module.exports = create('window-new', 'false');

/***/ }),

/***/ "../../components/icon/x/index.js":
/*!****************************************!*\
  !*** ../../components/icon/x/index.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


/**
 * /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\
 * /!\                                                                     /!\
 * /!\   WARNING THIS FILE IS AUTOMATICALLY GENERATED. DO NOT ALTER IT'S   /!\
 * /!\      CONTENTS MANUALLY. UPDATE THE TEMPLATE FILE INSTEAD.           /!\
 * /!\                                                                     /!\
 * /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\
 */

const create = __webpack_require__(/*! ../base.js */ "../../components/icon/base.js"); //
// @ux/require: './index.css';
//
// Unfortunately, WebPack decided to remove the ability to use labels as require
// indicator as that would be the only way we could make WebPack automatically
// bundle files without them actually being required serverside.
//


module.exports = create('x', 'false');

/***/ }),

/***/ "../../components/label/lib/index.js":
/*!*******************************************!*\
  !*** ../../components/label/lib/index.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
exports.ensureLabelComponent = ensureLabelComponent;

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _classnames = _interopRequireDefault(__webpack_require__(/*! classnames */ "../../../node_modules/classnames/index.js"));

var _text = _interopRequireDefault(__webpack_require__(/*! @ux/text */ "../../components/text/lib/index.js"));

var _classes = _interopRequireDefault(__webpack_require__(/*! @ux/text/classes */ "../../components/text/lib/classes.js"));

const UX_LABEL_CLASSNAME = 'ux-label';
/**
 * Creates a label component
 *
 * @param {Object} props - Component configuration
 * @param {Element} props.children - Content for the label
 * @param {String} [props.className] - Optional class name
 * @param {Boolean} [props.float] - Sets the label as floating
 * @param {String} props.htmlFor - Sets the for attribute on the label
 * @param {String} props.id - Sets the id attribute on the label
 * @param {Boolean} [props.internal] - Sets the label as internal to a component
 * @param {Boolean|Object} [props.required] - Marks the label as required
 * @param {String} [props.required.emphasis] - @ux/text emphasis for required mark
 * @param {String} [props.required.text] - Content for the required mark
 * @param {Object} ref - Element reference
 * @returns {Element} - Label component
 */

const Label = /*#__PURE__*/_react.default.forwardRef(function label(props, ref) {
  const {
    children,
    className,
    float,
    htmlFor,
    id,
    internal,
    required
  } = props;
  return /*#__PURE__*/_react.default.createElement("label", {
    className: (0, _classnames.default)(UX_LABEL_CLASSNAME, className, {
      // Meant as external label, expected to appear above the input field
      [(0, _classes.default)({
        as: 'label'
      })]: !internal,
      // Inherit styles from input, potentially float
      [`${UX_LABEL_CLASSNAME}--internal`]: internal,
      [`${UX_LABEL_CLASSNAME}--floating`]: float && internal
    }),
    htmlFor: htmlFor,
    id: id,
    ref: ref
  }, children, required && /*#__PURE__*/_react.default.createElement(_text.default.span, {
    "aria-hidden": true,
    className: `${UX_LABEL_CLASSNAME}-required`,
    emphasis: typeof required === 'object' && required.emphasis || 'critical',
    text: typeof required === 'object' && required.text || '*'
  }));
});

Label.propTypes = {
  /** Children to render as siblings */
  children: _propTypes.default.node.isRequired,

  /** Class for the root component */
  className: _propTypes.default.string,

  /** Sets the label as floating */
  float: _propTypes.default.bool,

  /** Sets the for attribute on the label */
  htmlFor: _propTypes.default.string.isRequired,

  /** id for the label */
  id: _propTypes.default.string,

  /** Sets the label as internal to parent */
  internal: _propTypes.default.bool,

  /** Sets the label as required */
  required: _propTypes.default.oneOfType([
  /** Use defaults */
  _propTypes.default.bool,
  /** Customize required */
  _propTypes.default.shape({
    /** Default is 'critical' */
    emphasis: _propTypes.default.string,

    /** Default is asterisk (*) */
    text: _propTypes.default.node
  })])
};
Label.displayName = 'Label';
/**
 * Ensures a @ux/label is created
 *
 * @param {Object|String} label - Common configuration for a label
 * @param {Object} props - Additional props to construct a new label
 * @returns {Object} - Label
 */

function ensureLabelComponent(label) {
  let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  if (!label) return null;
  return typeof label === 'object' && label.type === Label ? label : /*#__PURE__*/_react.default.createElement(Label, props, label);
}

var _default = Label;
exports["default"] = _default;

/***/ }),

/***/ "../../components/message-overlay/lib/index.js":
/*!*****************************************************!*\
  !*** ../../components/message-overlay/lib/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../../node_modules/@babel/runtime/helpers/defineProperty.js"));

var _objectWithoutProperties2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/objectWithoutProperties */ "../../../node_modules/@babel/runtime/helpers/objectWithoutProperties.js"));

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _disrupt = _interopRequireDefault(__webpack_require__(/*! @ux/disrupt */ "../../components/disrupt/lib/index.js"));

const _excluded = ["children", "show"];

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      (0, _defineProperty2.default)(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

const UX_MESSAGE_OVERLAY_CLASSNAME = 'ux-message-overlay';
/**
 * <MessageOverlay/> component, props are inherited from <Disrupt/>
 *
 * @param {Object} props - Component props
 * @returns {Component} <MessageOverlay/>
 */

function MessageOverlay(props) {
  const {
    children,
    show
  } = props,
        rest = (0, _objectWithoutProperties2.default)(props, _excluded);
  if (typeof show !== 'undefined' && !show) return null;
  return /*#__PURE__*/_react.default.createElement(_disrupt.default, rest, /*#__PURE__*/_react.default.createElement("div", {
    className: `${UX_MESSAGE_OVERLAY_CLASSNAME}-content`
  }, children));
}

MessageOverlay.propTypes = _objectSpread({}, _disrupt.default.propTypes);
var _default = MessageOverlay;
exports["default"] = _default;

/***/ }),

/***/ "../../components/modal/lib/index.js":
/*!*******************************************!*\
  !*** ../../components/modal/lib/index.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../../node_modules/@babel/runtime/helpers/defineProperty.js"));

var _extends2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ "../../../node_modules/@babel/runtime/helpers/extends.js"));

var _objectWithoutProperties2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/objectWithoutProperties */ "../../../node_modules/@babel/runtime/helpers/objectWithoutProperties.js"));

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _classnames = _interopRequireDefault(__webpack_require__(/*! classnames */ "../../../node_modules/classnames/index.js"));

var _disrupt = _interopRequireDefault(__webpack_require__(/*! @ux/disrupt */ "../../components/disrupt/lib/index.js"));

var _dialog = _interopRequireDefault(__webpack_require__(/*! @ux/dialog */ "../../components/dialog/lib/index.js"));

var _legacy = __webpack_require__(/*! ./legacy */ "../../components/modal/lib/legacy.js");

const _excluded = ["children", "className", "focusLock", "onClose", "onEventBehind", "portalElem", "stretch", "strategy", "show"];

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      (0, _defineProperty2.default)(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

const UX_MODAL_CLASSNAME = 'ux-modal';

function Modal(props) {
  const {
    children,
    className,
    focusLock = true,
    onClose,
    onEventBehind,
    portalElem,
    stretch,
    strategy,
    show
  } = props,
        dialogProps = (0, _objectWithoutProperties2.default)(props, _excluded);
  if (typeof show !== 'undefined' && !show) return null;
  if (!portalElem && (typeof document === 'undefined' || !document.body)) return null;
  return /*#__PURE__*/_react.default.createElement(_disrupt.default, {
    portalElem: portalElem || document.body,
    strategy: strategy || 'fixed',
    onClose: onClose,
    focusLock: focusLock,
    onEventBehind: onEventBehind,
    stretch: stretch
  }, /*#__PURE__*/_react.default.createElement(_dialog.default, (0, _extends2.default)({
    "aria-modal": true,
    role: "dialog",
    className: (0, _classnames.default)(UX_MODAL_CLASSNAME, className),
    onClose: onClose
  }, (0, _legacy.transform)(dialogProps)), children));
}

Modal.propTypes = _objectSpread(_objectSpread({}, _disrupt.default.propTypes), _dialog.default.propTypes);
var _default = Modal;
exports["default"] = _default;

/***/ }),

/***/ "../../components/modal/lib/legacy.js":
/*!********************************************!*\
  !*** ../../components/modal/lib/legacy.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.transform = transform;

var _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../../node_modules/@babel/runtime/helpers/defineProperty.js"));

var _objectWithoutProperties2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/objectWithoutProperties */ "../../../node_modules/@babel/runtime/helpers/objectWithoutProperties.js"));

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _text = _interopRequireDefault(__webpack_require__(/*! @ux/text */ "../../components/text/lib/index.js"));

const _excluded = ["title", "footer", "actions"];

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      (0, _defineProperty2.default)(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}
/**
 * Converts the legacy configuration object into props for <Dialog/>
 *
 * @param {Object} config - Configuration object
 * @param {String|Node} title - Title of the message
 * @param {Component} footer - Legacy footer for the modal
 * @param {Component} actions - New actions for the modal
 * @returns {Object} - A converted props object for <Dialog/>
 */


function transform(config) {
  const {
    title,
    footer,
    actions
  } = config,
        rest = (0, _objectWithoutProperties2.default)(config, _excluded);
  warn(config);
  return _objectSpread({
    title: typeof title === 'string' ? /*#__PURE__*/_react.default.createElement(_text.default.h1, {
      text: title,
      as: "title"
    }) : title,
    actions: footer || actions
  }, rest);
}

const warnings = new Set();
/**
 * Warns when the shim is used
 *
 * @param {Object} props - Configuration object
 * @param {Component} footer - Legacy container for the modal
 */

function warn(props) {
  const {
    footer
  } = props;

  if (footer) {
    const warning = 'Prop `footer` for <Modal/> will be removed in v2201, please replace with `actions`';
    !warnings.has(warning) && warnings.add(warning) && console.warn(warning);
  }
}

/***/ }),

/***/ "../../components/pivot/lib/index.js":
/*!*******************************************!*\
  !*** ../../components/pivot/lib/index.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = Pivots;

var _extends2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ "../../../node_modules/@babel/runtime/helpers/extends.js"));

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _classNames = _interopRequireDefault(__webpack_require__(/*! @ux/component-utilities/lib/classNames */ "../../utils/component-utilities/lib/classNames.js"));

var _pivot = _interopRequireDefault(__webpack_require__(/*! ./pivot */ "../../components/pivot/lib/pivot.js"));

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
} // Import child components

/**
 * Pivots class to render multiple pivot components
 *
 * @displayName Pivots
 * @function Pivots
 * @param {ReactProps} props - component props
 * @returns {ReactElement} - React Element
 * @public
 */


function Pivots(props) {
  const [selectedIndex, setIndex] = (0, _react.useState)(props.selectedIndex);
  /**
   * Sets index based on update
   */

  (0, _react.useEffect)(() => {
    setIndex(props.selectedIndex);
  }, [props.selectedIndex]);
  /**
   * @function handlePivotSelected
   * @param {String} index The index of the pivot selected
   * @public
   */

  function handlePivotSelected() {
    let index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;
    setIndex(index);
  } // Assign so they can be passed to Pivots


  const {
    grid,
    design,
    xsSubtitles,
    xsGraphics,
    pivotList
  } = props; // Create pivots from custom data

  const pivotListRender = pivotList.map((data, i) => /*#__PURE__*/_react.default.createElement(_pivot.default, (0, _extends2.default)({}, data, {
    grid: grid,
    design: design,
    xsSubtitles: xsSubtitles,
    key: `pivot-list-${i}`,
    index: i,
    onSelected: () => handlePivotSelected(i),
    selected: i === selectedIndex
  }))); // Create class names

  const classes = (0, _classNames.default)('ux-pivot-group', 'row', {
    'ux-pivot-slats': design === 'slats',
    'ux-pivot-xs-graphics': xsGraphics
  });
  return /*#__PURE__*/_react.default.createElement("div", {
    role: "navigation",
    className: classes
  }, pivotListRender);
}
/**
 * Property Definitions
 * @public
 */


Pivots.propTypes = {
  /** default is tile buttons meant for tablet/desktop.
   * `slats` which is the default mobile rendering can be forced for tablet/desktop by passing `slats` as design */
  design: _propTypes.default.string,

  /** the bootstrap grid specification */
  grid: _propTypes.default.object,

  /** Array of pivot data structures to generate pivot components */
  pivotList: _propTypes.default.array,

  /** force graphics to render on mobile */
  xsGraphics: _propTypes.default.bool,

  /** force subtitles to render on mobile */
  xsSubtitles: _propTypes.default.bool,

  /**
   * Default selected tile/slat when initially rendered
   * @param {Object} props React props
   * @returns {Error|null} validation
   */
  selectedIndex: props => {
    const {
      selectedIndex,
      pivotList
    } = props;
    if (!(selectedIndex && pivotList)) return null;
    const error = typeof selectedIndex !== 'number' && 'selectedIndex must be a number' || (selectedIndex > pivotList.length - 1 || selectedIndex < -1) && 'selectedIndex is invalid';
    return error ? new Error(error) : null;
  }
};
/**
 * Default Properties
 * @public
 */

Pivots.defaultProps = {
  grid: {
    md: 6,
    xl: 4
  },
  selectedIndex: -1
};

/***/ }),

/***/ "../../components/pivot/lib/pivot.js":
/*!*******************************************!*\
  !*** ../../components/pivot/lib/pivot.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = Pivot;

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _classNames = _interopRequireDefault(__webpack_require__(/*! @ux/component-utilities/lib/classNames */ "../../utils/component-utilities/lib/classNames.js"));

var _useBreakpoints = _interopRequireDefault(__webpack_require__(/*! @ux/component-utilities/lib/use-breakpoints */ "../../utils/component-utilities/lib/use-breakpoints.js"));

var _chevronRight = _interopRequireDefault(__webpack_require__(/*! @ux/icon/chevron-right */ "../../components/icon/chevron-right/index.js"));

var _linkArrow = _interopRequireDefault(__webpack_require__(/*! @ux/icon/link-arrow */ "../../components/icon/link-arrow/index.js"));
/* eslint-disable no-undefined */

/**
 * Render a chevron icon.
 *
 * @returns {React.Element} The icon.
 * @private
 */


function Chevron() {
  return /*#__PURE__*/_react.default.createElement(_chevronRight.default, {
    width: 26,
    height: 26
  });
} // Define grid names (should be in ux-component)


const breakpointSizes = {
  mobile: 'xs',
  phablet: 'sm',
  tablet: 'md',
  desktop: 'lg',
  large: 'xl',
  xlarge: 'xxl'
};
/**
 * Default class for the pivot component
 *
 * @displayName Pivot
 * @class Pivot
 * @param {Object} props - react props
 * @public
 */

function Pivot(props) {
  const {
    breakpoint
  } = (0, _useBreakpoints.default)('mobile', 'phablet', 'tablet', 'desktop', 'large', 'xlarge');
  /**
   * @function handleClick
   * @param {Event} e Dom event for handling click
   * @public
   */

  function handleClick(e) {
    const {
      disabled,
      href,
      onClick,
      onSelected
    } = props;

    if (disabled) {
      e.preventDefault();
    } else if (onClick) {
      onClick(e);
      if (!href) onSelected();
    }
  }
  /**
   * Determine if its necessary to apply a clear class
   * @function determineClearing
   * @returns {boolean} whether or not we need to add clear class
   * @public
   */


  function determineClearing() {
    const {
      design,
      grid: columns,
      index
    } = props;

    if (design === 'slats') {
      return false;
    } // Assign custom grid classes


    const currentSize = breakpointSizes[breakpoint]; // Create an array of sizes

    const sizes = Object.keys(breakpointSizes).map(function (key) {
      return breakpointSizes[key];
    }); // Find current base size

    for (let i = sizes.indexOf(currentSize); i >= 0; i--) {
      if (sizes[i] in columns) {
        // If there are custom grid classes, appropriately clear pivots
        const gridClearNum = 12 / columns[sizes[i]];
        return index % gridClearNum === 0;
      }
    }

    return false;
  }
  /**
   * @function render
   * @returns {ReactElement} The pivot
   * @public
   */


  const {
    title,
    subtitle,
    xsSubtitles,
    design,
    grid,
    graphic,
    href,
    onClick,
    disabled,
    selected,
    id,
    arrow
  } = props; // Creates optional subtitle

  const subtitleRender = subtitle && /*#__PURE__*/_react.default.createElement("span", {
    className: 'ux-pivot-subtitle' + (xsSubtitles ? `` : ` hidden-xs-down`)
  }, subtitle); // Assign custom grid classes if not slats


  const columns = design !== 'slats' ? grid : {}; // Use a button instead of an anchor if no href, but onClick

  const useButton = !href && onClick;
  const Tag = useButton ? 'button' : 'a';
  const linkButton = useButton ? 'button' : 'link'; // Grid option only supports these sizes (xs and sm are set values)

  const gridClasses = (0, _classNames.default)({
    [`col-md-${columns.md}`]: columns.md,
    [`col-lg-${columns.lg}`]: columns.lg,
    [`col-xl-${columns.xl}`]: columns.xl,
    [`col-xxl-${columns.xxl}`]: columns.xxl
  }, 'col-xs-12'); // Apply clear if necessary for IE9

  const gridStyle = determineClearing() ? {
    clear: 'left'
  } : {};
  const aStyle = (0, _classNames.default)('ux-pivot', {
    'ux-pivot-disabled': disabled,
    'ux-pivot-selected': useButton && selected,
    'ux-pivot-arrow': arrow
  });
  return /*#__PURE__*/_react.default.createElement("div", {
    className: gridClasses,
    style: gridStyle,
    role: "navigation"
  }, /*#__PURE__*/_react.default.createElement(Tag, {
    className: aStyle,
    href: href,
    onClick: handleClick,
    role: linkButton,
    "aria-labelledby": id ? `title-${id}` : undefined,
    "aria-selected": selected,
    id: id ? id : undefined
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "ux-pivot-graphic",
    "aria-hidden": "true"
  }, arrow ? /*#__PURE__*/_react.default.createElement(_linkArrow.default, null) : graphic), /*#__PURE__*/_react.default.createElement("span", {
    className: "ux-pivot-title",
    id: id ? `title-${id}` : undefined
  }, title), subtitleRender, /*#__PURE__*/_react.default.createElement("span", {
    className: "ux-pivot-chevron"
  }, design === 'slats' && /*#__PURE__*/_react.default.createElement(Chevron, null))));
}
/**
 * Define Properties
 * @public
 */


Pivot.propTypes = {
  /**
   * link to be assigned to this pivot
   * @function hrefValidate
   * @param {Object} props React props
   * @param {String} propName Name of this href prop
   * @returns {Error|null} validation
   * */
  href: function hrefValidate(props, propName) {
    const value = props[propName];

    if (value && typeof value !== 'string') {
      return new Error('href must be a string');
    }

    if (!value && !props.onClick) {
      return new Error('Either href or onClick required for Pivot');
    }

    return null;
  },

  /**
   * Validate label and require ID if label is a ReactElement
   *
   * @param {Object} props the props passed in
   * @param {string} propName the name of the current prop
   * @param {string} componentName the name of the component
   * @returns {Error|null} validation
   */
  graphic: function validatePropTypeGraphic(props, propName, componentName) {
    if (!props.arrow) {
      _propTypes.default.checkPropTypes({
        graphic: _propTypes.default.element.isRequired
      }, props, propName, componentName);
    }

    return null;
  },

  /** title for the tile/slat */
  title: _propTypes.default.node.isRequired,

  /** optional subtitle for tile/slat */
  subtitle: _propTypes.default.node,

  /** the specified design, `slats` is special cased */
  design: _propTypes.default.string,

  /** index of this specific pivot relative to total set */
  index: _propTypes.default.number,

  /** bootstrap grid specification */
  grid: _propTypes.default.object,

  /** if subtitles should render on mobile  */
  xsSubtitles: _propTypes.default.bool,

  /** click handler */
  onClick: _propTypes.default.func,

  /** onSelected handler */
  onSelected: _propTypes.default.func,

  /** whether this tile/slat is currently selected */
  selected: _propTypes.default.bool,

  /** whether this tile/slat is rendered in disabled state */
  disabled: _propTypes.default.bool,

  /** An optional unique id attribute for the element */
  id: _propTypes.default.string,

  /** adds a specific class to change the way a pivot looks */
  arrow: _propTypes.default.bool
};
/**
 *
 * Default Properties
 * @public
 */

Pivot.defaultProps = {
  grid: {},
  disabled: false,
  selected: false,
  arrow: false
};

/***/ }),

/***/ "../../components/progress-bar/lib/index.js":
/*!**************************************************!*\
  !*** ../../components/progress-bar/lib/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _id2 = _interopRequireDefault(__webpack_require__(/*! @ux/component-utilities/lib/id */ "../../utils/component-utilities/lib/id.js"));

var _breakpointsHoc = _interopRequireDefault(__webpack_require__(/*! @ux/component-utilities/lib/breakpoints-hoc */ "../../utils/component-utilities/lib/breakpoints-hoc.js"));

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}
/**
 * Possible status types
 *
 * @type {object}
 */


const STATUS = {
  Error: 'error',
  Warning: 'warning',
  Success: 'success',
  Info: 'info',
  Primary: 'primary'
};
/**
 * Circle size configurations needed for svg calculation.
 *
 * @type {object}
 */

const CIRCLE_SIZES = {
  XS: {
    size: 50,
    strokeWidth: 4
  },
  SM: {
    size: 100,
    strokeWidth: 6
  },
  MD: {
    size: 150,
    strokeWidth: 14
  },
  LG: {
    size: 250,
    strokeWidth: 22
  }
};
/**
 * Array of ordered breakpoints to check against
 *
 * @type {object}
 */

const BREAKPOINTS = ['mobile', 'phablet', 'tablet', 'desktop', 'large', 'xlarge'];
/**
* Display a progress bar
*
* @displayName ProgressBar
* @class ProgressBar
* @public
*/

class ProgressBar extends _react.Component {
  /**
   * Get the integer part of the current percentage completed (0-100)
   *
   * @returns {number} percent
   * @private
   */
  get _percent() {
    return Math.floor(this._exactPercent);
  }
  /**
   * Get the current percentage completed (0-100)
   *
   * @returns {number} percent
   * @private
   */


  get _exactPercent() {
    return this.props.value / this.props.max * 100;
  }
  /**
   * Get the label element if `label` prop is set.
   *
   * @returns {ReactElement} label element
   * @private
   */


  get _labelElement() {
    const id = (0, _id2.default)('label', {
      props: this.props
    }).toLowerCase();

    if (!this.props.label) {
      return null;
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      id: id,
      className: "ux-progress-label"
    }, this.props.label);
  }
  /**
   * Get the notice element if `notice` prop is set.
   *
   * @returns {ReactElement} notice element
   * @private
   */


  get _noticeElement() {
    if (!this.props.notice) {
      return null;
    }

    return /*#__PURE__*/_react.default.createElement("small", {
      className: "ux-progress-bar-notice"
    }, this.props.notice);
  }
  /**
   * Get the display element if `children` or `showPercent` prop is set.
   * Will not render if small bar.
   * @param {string} breakpoint current viewpoints
   * @returns {ReactElement} percentage text element
   * @private
   */


  _displayElement(breakpoint) {
    const {
      showPercent,
      children,
      shape,
      startShiftPercent
    } = this.props;

    const {
      value,
      unit
    } = this._size(breakpoint);

    let size = this._size(breakpoint);

    let style;

    if (value && unit) {
      size = value + unit;
      style = {
        lineHeight: size
      };
    }

    if (!(!!showPercent || !!children) || shape === 'bar' && ~size.lastIndexOf('xs')) {
      return null;
    }

    const percent = this._percent;
    const classNames = ['ux-progress-text'];

    if (percent < startShiftPercent && !(shape === 'bar' && ~size.lastIndexOf('sm'))) {
      classNames.push('ux-progress-text-start');
    }

    const displayElement = children || `${percent}%`;
    return /*#__PURE__*/_react.default.createElement("span", {
      "aria-hidden": "true",
      className: classNames.join(' '),
      style: style
    }, displayElement);
  }
  /**
   * Get the size to render the progress element at
   * @param {string} breakpoint current view point
   * @returns {string} size
   * @private
   */


  _size(breakpoint) {
    const {
      size
    } = this.props;

    if (typeof size === 'string' || size.value && size.unit) {
      return size;
    } else if (size[breakpoint]) {
      return size[breakpoint];
    } // find the next smallest breakdown size


    let breakdown;
    const targetIdx = BREAKPOINTS.indexOf(breakpoint);

    for (let idx = BREAKPOINTS.length - 1; idx >= 0; idx--) {
      if (size[BREAKPOINTS[idx]]) {
        breakdown = BREAKPOINTS[idx];

        if (idx < targetIdx) {
          break;
        }
      }
    }

    return !breakdown ? 'md' : size[breakdown];
  }
  /**
   * Get the classes to apply to the progress component.
   * @param {string} breakpoint current view point
   * @returns {string} classes
   * @private
   */
  // eslint-disable-next-line complexity


  _progressClasses(breakpoint) {
    const classNames = ['ux-progress'];
    classNames.push(`ux-progress-${this.props.shape}`);

    switch (this._size(breakpoint)) {
      case 'xsmall':
      case 'xs':
        classNames.push('ux-progress-xs');
        break;

      case 'small':
      case 'sm':
        classNames.push('ux-progress-sm');
        break;

      case 'large':
      case 'lg':
        classNames.push('ux-progress-lg');
        break;

      default:
        classNames.push('ux-progress-md');
    }

    switch (this.props.status) {
      case STATUS.Error:
        classNames.push('ux-progress-danger');
        break;

      case STATUS.Warning:
        classNames.push('ux-progress-warning');
        break;

      case STATUS.Info:
        classNames.push('ux-progress-info');
        break;

      case STATUS.Success:
        classNames.push('ux-progress-success');
        break;

      default:
        classNames.push('ux-progress-primary');
    }

    if (this.props.shape !== 'circle') {
      if (this.props.striped) {
        classNames.push('ux-progress-striped');
      }

      if (this._tickCount) {
        classNames.push('ux-progress-tick-marks');
      }
    }

    return classNames.join(' ');
  }

  isSmall(breakpoint) {
    const size = this._size(breakpoint);

    const {
      value,
      unit
    } = size;
    return size === 'sm' || size === 'small' || value < 1.5 && ~unit.indexOf('em') || value < 24;
  }
  /**
   * Get the number of tick marks to display
   *
   * @returns {number} count
   * @private
   */


  get _tickCount() {
    return this.props.tickCount || this.props.ticks.length;
  }
  /**
   * Get a single tick mark label
   *
   * @param {number} index index of label in row, starting at zero
   * @param {object} style additional style (if any) to apply to label
   * @returns {ReactElement} element
   * @private
   */


  tickLabel(index, style) {
    const {
      min,
      max,
      ticks,
      tickCount
    } = this.props;
    const offset = (max - min) / (this._tickCount - 1) + min;
    const value = tickCount ? index * offset : ticks[index];
    return /*#__PURE__*/_react.default.createElement("span", {
      key: value,
      className: "ux-progress-tick-label"
    }, /*#__PURE__*/_react.default.createElement("span", {
      style: style
    }, value));
  }
  /**
   * Get the row of tick mark labels
   *
   * @returns {ReactElement} element
   * @private
   */


  get _tickLabels() {
    const labels = [];
    let i = 0;

    if (i < this._tickCount) {
      labels.push(this.tickLabel(i, {
        transform: 'translateX(0)'
      }));
    }

    for (i = 1; i < this._tickCount - 1; i++) {
      labels.push(this.tickLabel(i));
    }

    if (i < this._tickCount) {
      labels.push(this.tickLabel(i, {
        transform: 'translateX(-100%)'
      }));
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "ux-progress-tick-labels"
    }, labels);
  }
  /**
   * Get the row of tick mark lines
   *
   * @returns {ReactElement} element
   * @private
   */


  get _tickLines() {
    const ticks = [];

    for (let i = 0; i < this._tickCount - 2; i++) {
      ticks.push( /*#__PURE__*/_react.default.createElement("span", {
        key: i,
        className: "ux-progress-tick-line",
        style: {
          width: this.props.tickWidth
        }
      }));
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "ux-progress-tick-lines"
    }, ticks);
  }
  /**
   * Get the progress element as a bar
   * @param {string} breakpoint current view point
   * @returns {ReactElement} element
   * @private
   */


  _bar(breakpoint) {
    const {
      value,
      unit
    } = this._size(breakpoint);

    const id = (0, _id2.default)('label', {
      props: this.props
    }).toLowerCase();
    const isSmall = this.isSmall(breakpoint);
    let style;

    if (value && unit) {
      style = {
        height: value + unit
      };
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: this._progressClasses(breakpoint)
    }, this._labelElement, !!this._tickCount && !this.props.hideTickLabels && this._tickLabels, /*#__PURE__*/_react.default.createElement("div", {
      role: "progressbar",
      "aria-valuenow": this._percent,
      "aria-valuemax": this.props.max,
      "aria-valuemin": this.props.min,
      "aria-labelledby": id,
      style: style,
      className: "ux-progress-area"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "ux-progress-fill",
      style: {
        width: `${this._exactPercent}%`
      }
    }, !isSmall && this._displayElement(breakpoint)), !!this._tickCount && this._tickLines), !style && isSmall && this._displayElement(breakpoint), this._noticeElement);
  }
  /**
   * Get the progress element as a circle
   * @param {string} breakpoint current view point
   * @returns {ReactElement} element
   * @private
   */


  _circle(breakpoint) {
    let circleSize;

    switch (this._size(breakpoint)) {
      case 'xsmall':
      case 'xs':
        circleSize = CIRCLE_SIZES.XS;
        break;

      case 'small':
      case 'sm':
        circleSize = CIRCLE_SIZES.SM;
        break;

      case 'large':
      case 'lg':
        circleSize = CIRCLE_SIZES.LG;
        break;

      default:
        circleSize = CIRCLE_SIZES.MD;
    }

    const {
      size,
      strokeWidth
    } = circleSize;
    const percent = this._percent;
    const center = size / 2;
    const radius = center - strokeWidth;
    const c = Math.PI * (radius * 2);
    const offset = (100 - percent) / 100 * c;
    const fillStyle = {
      strokeDashoffset: offset,
      strokeDasharray: c
    };
    const id = (0, _id2.default)('label', {
      props: this.props
    }).toLowerCase();
    return /*#__PURE__*/_react.default.createElement("div", {
      "aria-valuenow": this._percent,
      role: "progressbar",
      "aria-valuemax": this.props.max,
      "aria-valuemin": this.props.min,
      className: this._progressClasses(breakpoint),
      "aria-labelledby": id
    }, /*#__PURE__*/_react.default.createElement("svg", {
      width: size,
      height: size,
      viewBox: `0 0 ${size} ${size}`
    }, /*#__PURE__*/_react.default.createElement("circle", {
      fill: "none",
      strokeWidth: strokeWidth,
      className: "ux-progress-area",
      r: radius,
      cx: center,
      cy: center
    }), /*#__PURE__*/_react.default.createElement("circle", {
      fill: "none",
      strokeWidth: strokeWidth,
      className: "ux-progress-fill",
      r: radius,
      cx: center,
      cy: center,
      style: fillStyle,
      strokeLinecap: "butt",
      transform: `rotate(-90 ${center} ${center})`
    })), this._displayElement(breakpoint), this._labelElement, this._noticeElement);
  }
  /**
   * Renders the component.
   *
   * @returns {ReactElement} Rendered ProgressBar element.
   * @private
   */


  render() {
    return /*#__PURE__*/_react.default.createElement(_breakpointsHoc.default, {
      breakpoints: BREAKPOINTS
    }, _ref => {
      let {
        breakpoint
      } = _ref;
      return this.props.shape === 'circle' ? this._circle(breakpoint) : this._bar(breakpoint);
    }) // this.props.shape === 'circle' ? this._circle() : this._bar()
    ;
  }

}

ProgressBar.Status = STATUS;
ProgressBar.propTypes = {
  /** The title text above the bar */
  label: _propTypes.default.node,

  /** The number that the progress bar starts at, this is mainly for aria-valuemin accessibility */
  min: _propTypes.default.number,

  /** The maximum number of increments */
  max: _propTypes.default.number,

  /** The current increment */
  value: _propTypes.default.number,

  /** Sets the status color/style (active | complete | warning | error) */
  status: _propTypes.default.string,

  /** Sets the small text label below the bar */
  notice: _propTypes.default.node,

  /** Whether or not to show the percentage text */
  showPercent: _propTypes.default.bool,

  /** The start percent value to shift text to right on bar */
  startShiftPercent: _propTypes.default.number,

  /**
   * Set the size (xs | xsmall | sm | small | md | medium | lg | large).
   * Object can be used to specify sizes at different breakpoints.
   * Object can also be used to specify a custom height.
   */
  size: _propTypes.default.oneOfType([_propTypes.default.oneOf(['xsmall', 'xs', 'sm', 'small', 'md', 'medium', 'lg', 'large', 'xl', 'xlarge']), _propTypes.default.object]),

  /** Set the shape (bar | circle)  */
  shape: _propTypes.default.oneOf(['bar', 'circle']),

  /** Can be used to customize the value to display; overrides showPercent */
  children: _propTypes.default.node,

  /**  Whether or not to have a striped progress bar. Won't work with the circle version */
  striped: _propTypes.default.bool,

  /** An array of custom tick labels to be used only when tickCount is too generic */
  ticks: _propTypes.default.array,

  /** Number of ticks (if any) to show. Won't work with the circle version */
  tickCount: _propTypes.default.number,

  /** Width of ticks (in px) */
  tickWidth: _propTypes.default.number,

  /** Whether or not to hide the tick mark labels */
  hideTickLabels: _propTypes.default.bool
};
ProgressBar.defaultProps = {
  min: 0,
  value: 0,
  max: 100,
  size: 'md',
  shape: 'bar',
  startShiftPercent: 10,
  label: '',
  ticks: [],
  tickCount: 0,
  tickWidth: 2
};
var _default = ProgressBar;
exports["default"] = _default;

/***/ }),

/***/ "../../components/progress-steps/lib/index.js":
/*!****************************************************!*\
  !*** ../../components/progress-steps/lib/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "ProgressStep", ({
  enumerable: true,
  get: function () {
    return _progressStep.default;
  }
}));
exports["default"] = void 0;

var _reactComponentValidator = _interopRequireDefault(__webpack_require__(/*! react-component-validator */ "../../../node_modules/react-component-validator/lib/index.js"));

var _progressStep = _interopRequireDefault(__webpack_require__(/*! ./progress-step */ "../../components/progress-steps/lib/progress-step.js"));

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

const STATUS = _progressStep.default.Status;
/**
* Displays progress in steps.
*
* @displayName Progress Steps
* @class ProgressSteps
* @public
*/

class ProgressSteps extends _react.Component {
  /**
   * Get a step's status name based on current progress value.
   *
   * @param {number} idx Step index
   * @returns {string} status
   * @private
   */
  _getStepStatus(idx) {
    let status = STATUS.Incomplete;

    if (idx < this.props.value) {
      status = STATUS.Complete;
    } else if (idx === this.props.value) {
      status = STATUS.Current;
    }

    return status;
  }
  /**
   * Setup the child step elements.
   *
   * @returns {Array} Step children
   * @private
   */


  get _stepElements() {
    const results = [];

    if (this.props.steps) {
      results.push(...this.props.steps.map((name, i) => {
        const idx = i + 1;
        return /*#__PURE__*/_react.default.createElement(_progressStep.default, {
          key: idx,
          tabIndex: this.props.tabIndex,
          status: this._getStepStatus(idx)
        }, name);
      }));
    }

    if (this.props.children) {
      const offset = results.length + 1;
      results.push(...this.props.children.map((step, i) => {
        const idx = i + offset;
        return /*#__PURE__*/_react.default.cloneElement(step, {
          key: idx,
          tabIndex: this.props.tabIndex,
          status: this._getStepStatus(idx)
        });
      }));
    }

    return results;
  }
  /**
   * Renders the component.
   *
   * @returns {React.DOM} Rendered ProgressSteps element.
   * @private
   */


  render() {
    return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("ul", {
      className: "ux-tabs-wiz-list"
    }, this._stepElements));
  }

}

exports["default"] = ProgressSteps;
ProgressSteps.Step = _progressStep.default;
ProgressSteps.propTypes = {
  /** Names of each step */
  steps: _propTypes.default.array,

  /** Current value of each step */
  value: _propTypes.default.number,

  /** Child React.Components to be displayed underneath */
  children: (0, _reactComponentValidator.default)([_progressStep.default]),

  /** Developer indicates tabIndex */
  tabIndex: _propTypes.default.oneOf([-1, 0])
};
ProgressSteps.defaultProps = {
  value: 1
};

/***/ }),

/***/ "../../components/progress-steps/lib/progress-step.js":
/*!************************************************************!*\
  !*** ../../components/progress-steps/lib/progress-step.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = ProgressStep;

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _checkmark = _interopRequireDefault(__webpack_require__(/*! @ux/icon/checkmark */ "../../components/icon/checkmark/index.js"));
/**
 * Possible status types
 *
 * @type {object}
 */


const STATUS = {
  Incomplete: 'incomplete',
  Current: 'current',
  Complete: 'complete'
};
/**
 * ProgressStep component, representing each individual step.
 *
 * @param {Object} props Props
 * @returns {ReactElement} ReactElement
 */

function ProgressStep(props) {
  return /*#__PURE__*/_react.default.createElement("li", {
    role: "status",
    "aria-live": "polite",
    "aria-label": `step ${props.status}`,
    className: `ux-tabs-wiz-step-${props.status}`
  }, /*#__PURE__*/_react.default.createElement("a", {
    href: props.href,
    onClick: props.onClick,
    className: 'ux-tabs-wiz-link',
    tabIndex: props.href ? null : props.tabIndex
  }, props.status === 'complete' && /*#__PURE__*/_react.default.createElement(_checkmark.default, {
    fill: "white"
  }), /*#__PURE__*/_react.default.createElement("span", {
    className: "ux-tabs-wiz-txt"
  }, props.children)));
}

ProgressStep.propTypes = {
  status: _propTypes.default.string.isRequired,
  href: _propTypes.default.string,
  onClick: _propTypes.default.func,
  children: _propTypes.default.node,
  tabIndex: _propTypes.default.oneOf([-1, 0])
};
ProgressStep.defaultProps = {
  status: STATUS.Incomplete,
  tabIndex: 0
};
ProgressStep.Status = STATUS;

/***/ }),

/***/ "../../components/sibling-set/lib/index.js":
/*!*************************************************!*\
  !*** ../../components/sibling-set/lib/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ "../../../node_modules/@babel/runtime/helpers/extends.js"));

var _objectWithoutProperties2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/objectWithoutProperties */ "../../../node_modules/@babel/runtime/helpers/objectWithoutProperties.js"));

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _classnames = _interopRequireDefault(__webpack_require__(/*! classnames */ "../../../node_modules/classnames/index.js"));

var _label = _interopRequireDefault(__webpack_require__(/*! @ux/label */ "../../components/label/lib/index.js"));

var _text = _interopRequireDefault(__webpack_require__(/*! @ux/text */ "../../components/text/lib/index.js"));

var _classes = _interopRequireDefault(__webpack_require__(/*! @ux/text/classes */ "../../components/text/lib/classes.js"));

const _excluded = ["children", "className", "divider", "gap", "id", "invalid", "label", "helpMessage", "errorMessage", "required", "orientation", "stretch", "wrap"];
const UX_SIBLINGSET_CLASSNAME = 'ux-sibling-set';
/**
 * Creates a SiblingSet component
 *
 * @param {Object} props - Properties to inform the component
 * @param {Elements} props.children - Given children as siblings
 * @param {String} [props.className] - Optional class name
 * @param {Boolean} [props.divider] - Optional divider
 * @param {String} [props.gap] - Optional amount of space between siblings, sm md lg
 * @param {String} [props.id] - Used to inform a11y internals
 * @param {Boolean|String} [props.invalid] - Sets invalid within the component
 * @param {Object} [props.label] - Label configuration object
 * @param {Element} [props.label.content] - Content for the label
 * @param {String} [props.label.id] - `id` for the label
 * @param {String} [props.helpMessage] - Help message
 * @param {String} [props.errorMessage] - Error message
 * @param {String} [props.orientation] - Directions for layout, horizontal or vertical
 * @param {Boolean} [props.stretch] - Determines if the siblings should stretch the full width of the container
 * @param {Boolean} [props.wrap] - Wrap children to the next line
 * @returns {Component} - The SiblingSet component
 */

const SiblingSet = /*#__PURE__*/_react.default.forwardRef(function SiblingSet(props, ref) {
  const _ref = props || {},
        {
    children,
    className,
    divider,
    gap,
    id,
    invalid,
    label,
    helpMessage,
    errorMessage,
    required,
    orientation = 'horizontal',
    stretch,
    wrap
  } = _ref,
        rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);

  delete rest.style;

  if (!children) {
    return null;
  }

  const ariaLabelledBy = label && id && `${id}-label`;
  const helpMessageId = helpMessage && id && `${id}-help`;
  const errorMessageId = errorMessage && id && `${id}-error`;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)(UX_SIBLINGSET_CLASSNAME, className, `${UX_SIBLINGSET_CLASSNAME}-${orientation}`, {
      [`${UX_SIBLINGSET_CLASSNAME}-gap-${gap}`]: gap,
      [`${UX_SIBLINGSET_CLASSNAME}--stretch`]: stretch,
      [`${UX_SIBLINGSET_CLASSNAME}--wrap`]: wrap
    }),
    role: "group",
    "aria-labelledby": ariaLabelledBy,
    "aria-describedby": [helpMessageId, errorMessageId].filter(Boolean).join(' ')
  }, ariaLabelledBy && /*#__PURE__*/_react.default.createElement(_label.default, {
    className: `${UX_SIBLINGSET_CLASSNAME}-label`,
    id: ariaLabelledBy,
    htmlFor: id,
    required: required
  }, label), divider && /*#__PURE__*/_react.default.createElement("hr", null), /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({
    id: id,
    ref: ref,
    "aria-invalid": invalid,
    className: (0, _classes.default)({
      className: `${UX_SIBLINGSET_CLASSNAME}-children`,
      emphasis: invalid ? 'critical' : null
    }),
    style: {
      '--ux-siblingset-amount': children.length
    }
  }, rest), children), helpMessage && /*#__PURE__*/_react.default.createElement(_text.default.p, {
    text: helpMessage,
    as: "caption",
    id: helpMessageId,
    emphasis: "passive"
  }), errorMessage && /*#__PURE__*/_react.default.createElement(_text.default.p, {
    text: errorMessage,
    as: "caption",
    id: errorMessageId,
    emphasis: "critical",
    role: "alert"
  }));
});
/**
 * Determine if given collection of props are valid
 *
 * @param {Object} props - List of given props
 * @param {String} propName - Name of current prop
 * @param {String} componentName - Name of the component
 * @returns {PropTypeValidation} - Property configuration validity
 */


function oneOfRequiredProps(props, propName, componentName) {
  const labelNoId = props.label && !props.id;
  const helpNoId = props.helpMessage && !props.id;
  const errorNoId = props.errorMessage && !props.id;

  if (labelNoId || helpNoId || errorNoId) {
    return new Error(`When using a label, helpMessage or errorMessage, the 'id' prop is required`);
  }

  return _propTypes.default.checkPropTypes({
    [propName]: _propTypes.default.node
  }, props, propName, componentName);
}

SiblingSet.propTypes = {
  /** Children to render as siblings */
  children: _propTypes.default.node,

  /** Optional class name used to help position the component */
  className: _propTypes.default.string,

  /** Sets a divider between the label and siblings, helpful for segregating the label from the siblings */
  divider: _propTypes.default.bool,

  /** Gap between the siblings, no gap by default */
  gap: _propTypes.default.oneOf(['sm', 'md', 'lg']),

  /** Used to inform a11y internals */
  id: oneOfRequiredProps,

  /** Sets the component as invalid */
  invalid: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.oneOf(['grammar', 'spelling'])]),

  /** Optional label for the siblings */
  label: oneOfRequiredProps,

  /** Optional message for the siblings */
  helpMessage: oneOfRequiredProps,

  /** Optional error message for the siblings */
  errorMessage: oneOfRequiredProps,

  /** The direction of the siblings, either horizontal or vertical */
  orientation: _propTypes.default.oneOf(['horizontal', 'vertical']),

  /** Optionally shows group as required */
  required: _label.default.propTypes.required,

  /** Stretch the width of the container, helps for larger siblings */
  stretch: _propTypes.default.bool,

  /** Wrap children when appropriate */
  wrap: _propTypes.default.bool
};
SiblingSet.displayName = 'SiblingSet';
var _default = SiblingSet;
exports["default"] = _default;

/***/ }),

/***/ "../../components/spinner/lib/index.js":
/*!*********************************************!*\
  !*** ../../components/spinner/lib/index.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = Spinner;

var _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../../node_modules/@babel/runtime/helpers/defineProperty.js"));

var _extends2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ "../../../node_modules/@babel/runtime/helpers/extends.js"));

var _objectWithoutProperties2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/objectWithoutProperties */ "../../../node_modules/@babel/runtime/helpers/objectWithoutProperties.js"));

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _classnames = _interopRequireDefault(__webpack_require__(/*! classnames */ "../../../node_modules/classnames/index.js"));

const _excluded = ["size", "ariaLabels", "className"];

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      (0, _defineProperty2.default)(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

const DEFAULT_ARIA_LABELS = {
  spinnerName: 'Your content is loading'
};
/**
 * Size of spinner
 * @typedef {"sm" | "md" | "lg"} Size
 */

/**
 * Aria Labels
 * @typedef AriaLabels
 * @property {string} spinnerName - Screen reader label for spinner
 */

/**
 * Component Props
 * @typedef {Object} Props
 * @property {string} className - Classes to be applied to the spinner
 * @property {Size} size - Defines the size of the spinner
 * @property {AriaLabels} ariaLabels - Screenreader labels for sub-elements
 */

/**
 * Display a spinner.
 * @displayName Spinner (Web)
 * @param {Props} props Component Props
 * @returns {React.ReactElement} Component
 */

function Spinner(_ref) {
  let {
    size,
    ariaLabels,
    className
  } = _ref,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded); // style is explicitly omitted, do not override.

  delete rest.style;
  const classes = (0, _classnames.default)('ux-spinner', className, {
    [`ux-spinner-${size}`]: size
  });
  return /*#__PURE__*/_react.default.createElement("svg", (0, _extends2.default)({
    className: classes,
    "aria-label": ariaLabels.spinnerName,
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 72 72"
  }, rest), /*#__PURE__*/_react.default.createElement("circle", {
    className: "bg-spinner",
    cx: "36",
    cy: "36",
    r: "31",
    fill: "none",
    startOffset: "0"
  }), /*#__PURE__*/_react.default.createElement("circle", {
    className: "fg-spinner",
    cx: "36",
    cy: "36",
    r: "31",
    fill: "none"
  }));
}

Spinner.propTypes = {
  /** Classes to be applied to the spinner */
  className: _propTypes.default.string,

  /** Defines the size of the spinner */
  size: _propTypes.default.PropTypes.oneOf(['sm', 'md', 'lg']).isRequired,

  /** Screenreader labels for sub-elements */
  ariaLabels: _propTypes.default.shape({
    /** Screen reader label for spinner */
    spinnerName: _propTypes.default.string
  })
};
/**
 * Default properties.
 *
 * @type {Object}
 * @private
 */

Spinner.defaultProps = _objectSpread({
  size: 'md',
  // Default size.
  ariaLabels: DEFAULT_ARIA_LABELS
}, {
  className: 'spin-center'
});

/***/ }),

/***/ "../../components/table/lib/collection.js":
/*!************************************************!*\
  !*** ../../components/table/lib/collection.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../../node_modules/@babel/runtime/helpers/defineProperty.js"));

var _sortable = _interopRequireDefault(__webpack_require__(/*! ./sortable */ "../../components/table/lib/sortable.js"));

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      (0, _defineProperty2.default)(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
} //
// Set of mixins that handle rendering of childs. This allows mixing
// regular HTML children with React Elements.
//


class Collection extends _sortable.default {
  /**
   * Determine if the element is allowed to pass sortable properties.
   *
   * @param {ReactElement} element ReactElement.
   * @param {Object} options Predefined set of properties.
   * @returns {Object} extended properties.
   * @private
   */
  sortableChild(element) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    const {
      props = {},
      state = {}
    } = this;
    const sort = props.sortable;
    const elementType = element.type;
    options.direction = state.direction || props.direction;
    options.active = state.active || props.active;
    this.setSortableOptionsForChild(options, sort, elementType);
    return options;
  }
  /**
   * Sets options.sortable if appropriate for the instance & child-type
   *
   * @param {Object} options The options object to set sortable on
   * @param {Boolean|Function} sort The sort value from props
   * @param {string} childElementType The child element type that is being considered
   * @private
   */


  setSortableOptionsForChild(options, sort, childElementType) {
    if (childElementType === 'th') {
      options.sortable = sort;
    }
  }
  /**
   * Add additional properties to child elements by checking if proxy methods are available.
   *
   * @param {ReactElement} element React Table or any of its children.
   * @param {Object} properties Non frozen object to receive sortable properties.
   * @returns {ReactElement} enhanced ReactElement.
   * @private
   */


  getProperties(element) {
    let properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    const props = this.props || {};

    if (props.sortable) {
      this.sortableChild(element, properties);
    }

    return properties;
  }
  /**
   * Render Element, either the provided HTML or a replacement React Element.
   *
   * @param {ReactElement} element ReactElement.
   * @returns {ReactElement} rendered child element.
   * @public
   */


  renderChildren(element) {
    const Component = this.components && this.components[element.type];

    if (!Component) {
      return element;
    }

    return /*#__PURE__*/_react.default.createElement(Component, _objectSpread(_objectSpread({}, this.getProperties(element)), element.props || {}));
  }

}

exports["default"] = Collection;

/***/ }),

/***/ "../../components/table/lib/index.js":
/*!*******************************************!*\
  !*** ../../components/table/lib/index.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "Collection", ({
  enumerable: true,
  get: function () {
    return _collection.default;
  }
}));
Object.defineProperty(exports, "Sortable", ({
  enumerable: true,
  get: function () {
    return _sortable.default;
  }
}));
Object.defineProperty(exports, "Tbody", ({
  enumerable: true,
  get: function () {
    return _tbody.default;
  }
}));
Object.defineProperty(exports, "Td", ({
  enumerable: true,
  get: function () {
    return _td.default;
  }
}));
Object.defineProperty(exports, "Tfoot", ({
  enumerable: true,
  get: function () {
    return _tfoot.default;
  }
}));
Object.defineProperty(exports, "Th", ({
  enumerable: true,
  get: function () {
    return _th.default;
  }
}));
Object.defineProperty(exports, "Thead", ({
  enumerable: true,
  get: function () {
    return _thead.default;
  }
}));
Object.defineProperty(exports, "Tr", ({
  enumerable: true,
  get: function () {
    return _tr.default;
  }
}));
exports["default"] = void 0;

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _collection = _interopRequireDefault(__webpack_require__(/*! ./collection */ "../../components/table/lib/collection.js"));

var _sortable = _interopRequireDefault(__webpack_require__(/*! ./sortable */ "../../components/table/lib/sortable.js"));

var _thead = _interopRequireDefault(__webpack_require__(/*! ./thead */ "../../components/table/lib/thead.js"));

var _tbody = _interopRequireDefault(__webpack_require__(/*! ./tbody */ "../../components/table/lib/tbody.js"));

var _tfoot = _interopRequireDefault(__webpack_require__(/*! ./tfoot */ "../../components/table/lib/tfoot.js"));

var _th = _interopRequireDefault(__webpack_require__(/*! ./th */ "../../components/table/lib/th.js"));

var _tr = _interopRequireDefault(__webpack_require__(/*! ./tr */ "../../components/table/lib/tr.js"));

var _td = _interopRequireDefault(__webpack_require__(/*! ./td */ "../../components/table/lib/td.js")); //
// Set of allowed child Components for the Table.
//


const COMPONENTS = {
  thead: _thead.default,
  tbody: _tbody.default,
  tfoot: _tfoot.default,
  tr: _tr.default
};
/**
 * Enhanced Table.
 *
 * @displayName Table
 * @class Table
 * @public
 */

class Table extends _collection.default {
  constructor() {
    super(...arguments);
    this.index = this.index.bind(this);
  }
  /**
   * Getter that returns the allowed children.
   *
   * @returns {Object} Components
   * @private
   */


  get components() {
    return COMPONENTS;
  }
  /**
   * Sets options.sortable if appropriate for the instance & child-type
   *
   * @param {Object} options The options object to set sortable on
   * @private
   */


  setSortableOptionsForChild(options) {
    options.sortable = this.sort;
  }
  /**
   * Add unique hidden and readonly private key, used by each Table Row and
   * React for rendering optimalization. Skip rows that are already a valid
   * ReactElement.
   *
   * @param {Object} row Single object from the collection of data.
   * @param {Number} i Iterator
   * @returns {Object} Extended row.
   */


  index(row, i) {
    if ( /*#__PURE__*/_react.default.isValidElement(row)) return row;
    Object.defineProperty(row, '_key', {
      enumerable: false,
      writable: true,
      value: i
    });
    Object.defineProperty(row, '_active', {
      enumerable: false,
      writable: true,
      value: i === this.state.activeRow
    });
    return row;
  }
  /**
   * Sorts the data by the given column
   *
   * @private
   */


  sort() {
    super.sort(...arguments);
    this.setState({
      activeRow: 0
    });
  }
  /**
   * Render a table.
   *
   * TODO merge table body element if data is received with actual tbody child.
   *
   * @returns {ReactDOM} Rendered table.
   * @public
   */


  render() {
    const {
      className,
      children,
      enableKeyboard,
      row
    } = this.props;
    let {
      order
    } = this.props;
    const {
      data
    } = this.state; //
    // Convert the order property from a comma separated string to array.
    //

    order = typeof order === 'string' ? order.split(',') : order;
    const tableClassName = className ? `ux-table ${className}` : 'ux-table';
    return /*#__PURE__*/_react.default.createElement("table", {
      className: tableClassName
    }, _react.default.Children.map(children, this.renderChildren, this), /*#__PURE__*/_react.default.createElement(_tbody.default, {
      data: data.map(this.index),
      order: order,
      click: row,
      enableKeyboard: enableKeyboard
    }));
  }

}
/**
 * The default properties of the component.
 *
 * @type {Object}
 * @private
 */


exports["default"] = Table;
Table.defaultProps = {
  data: [],
  enableKeyboard: true,
  row: () => {}
};
/**
 * Allowed properties for Table.
 *
 * @enum {Object} Properties.
 * @public
 */

Table.propTypes = {
  /** Css class name to apply to the table */
  className: _propTypes.default.string,

  /** The data used to populate the table */
  data: _propTypes.default.array,

  /** When false, tabbing is disabled between rows, and enabled between individual table cells,
   * though there is no handler for Enter */
  enableKeyboard: _propTypes.default.bool,

  /** Specifies the column order */
  order: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.string), _propTypes.default.string]),

  /** Function called when a row is clicked on */
  row: _propTypes.default.func
}; // Attach auxiliary components to Table so they're accessible from @ux/uxcore2

Table.Thead = _thead.default;
Table.Tbody = _tbody.default;
Table.Tfoot = _tfoot.default;
Table.Tr = _tr.default;
Table.Td = _td.default;
Table.Th = _th.default;
Table.Collection = _collection.default;
Table.Sortable = _sortable.default; // Also do named exports for those importing from @ux/table directly

/***/ }),

/***/ "../../components/table/lib/sortable.js":
/*!**********************************************!*\
  !*** ../../components/table/lib/sortable.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _react = __webpack_require__(/*! react */ "../../../node_modules/react/index.js"); //
// Set of functions required for sorting Table rows.
//


class Sortable extends _react.Component {
  constructor() {
    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    super(...arguments);
    this.sort = this.sort.bind(this);
    this.state = {
      data: (props.data || []).slice()
    };
  }
  /**
   * Immutably assign `data` into our `state` if it exists in `this.props`.
   * @param  {Object} prevProps Previous properties to be set on this instance.
   */


  componentDidUpdate(prevProps) {
    if (this.props && Array.isArray(this.props.data) && prevProps.data !== this.props.data) {
      const newData = this.props.data.slice();

      if (this.state.comparator) {
        newData.sort(this.state.comparator);
      }

      this.setState({
        data: newData
      });
    }
  }
  /**
   * Simple helper to spread the required stateful sortable properties to child
   * Components, data is not provided to allow more developer control.
   *
   * @returns {Object} Sortable properties
   * @public
   */


  getSortableProps() {
    const {
      state: {
        active,
        direction
      },
      sort: sortable
    } = this;
    return {
      direction,
      sortable,
      active
    };
  }
  /**
   * Set the sort order for the provided column. Ascending `asc` is the default
   * and will be initially set. Descending `desc` will invert the sort order.
   * The column will be compared to the active sorting column to determine the
   * order state.
   *
   * @param {String} column Name of the current sorting column.
   * @returns {Number} Sort order, either ascending (1) or descending (-1).
   * @private
   */


  flip(column) {
    const state = this.state || {};
    let dir = state.direction || 1;
    if (typeof dir === 'string') dir = dir === 'asc' ? 1 : -1;
    return state.active !== column ? 1 : -1 * dir;
  }
  /**
   * Sort by the provided column.
   *
   * @param {String} column Name of the current sorting column.
   * @public
   */


  sort(column) {
    const direction = this.flip(column);
    const {
      state,
      props
    } = this;

    if (props.onSort) {
      this.setState({
        active: column,
        direction
      }, () => props.onSort(this.state.active, this.state.direction));
      return;
    }

    const defaultComparator = function defaultComparator(a, b) {
      if (a[column] > b[column]) return direction;
      if (a[column] < b[column]) return direction * -1;
      return 0;
    };

    const comparator = typeof props.sortable === 'function' ? props.sortable(direction, column) : defaultComparator;
    this.setState({
      active: column,
      direction,
      comparator,
      data: state.data.slice().sort(comparator)
    });
  }

}
/**
 * Allowed properties for Sortable.
 *
 * @enum {Object} Properties.
 * @public
 */


exports["default"] = Sortable;
Sortable.propTypes = {
  data: _propTypes.default.array,
  sortable: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.func]),
  onSort: _propTypes.default.func
};

/***/ }),

/***/ "../../components/table/lib/tbody.js":
/*!*******************************************!*\
  !*** ../../components/table/lib/tbody.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../../node_modules/@babel/runtime/helpers/defineProperty.js"));

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _enu = _interopRequireDefault(__webpack_require__(/*! enu */ "../../../node_modules/enu/index.js"));

var _tr = _interopRequireDefault(__webpack_require__(/*! ./tr */ "../../components/table/lib/tr.js"));

var _td = _interopRequireDefault(__webpack_require__(/*! ./td */ "../../components/table/lib/td.js"));

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      (0, _defineProperty2.default)(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
} //
// Set of allowed child Components for the Table Body.
//


const COMPONENTS = {
  tr: _tr.default
};
/**
 * A table body component
 *
 * @displayName Tbody
 * @class Tbody
 * @extends {React.Component}
 */

class Tbody extends _react.default.Component {
  constructor() {
    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    super(...arguments, props); //
    // Define a counter for tabIndexes on each cell.
    //

    this.tabIndex = 0;
  }
  /**
   * Getter that returns the allowed children.
   *
   * @returns {Object} Components
   * @private
   */


  get components() {
    return COMPONENTS;
  }
  /**
   * Iterate over each data row while using the iterator. A predefined ordered
   * list of property references is used by default if it is available, otherwise
   * columns are rendered in the order of properties on the object.
   *
   * @param {Function} iterator Function that generates the content.
   * @param {Object} data Reference to the dataset.
   * @returns {Array} Collection of ReactDOM elements.
   * @private
   */


  compose(iterator, data) {
    let collection = data;

    if (!Array.isArray(data)) {
      collection = this.props.order || Object.keys(data);
    }

    return collection.map(this[iterator](), data);
  }
  /**
   * Return a row iterator.
   *
   * @returns {Function} Iterator that maps children into Tr elements.
   * @private
   */


  row() {
    const self = this;
    const {
      click,
      enableKeyboard
    } = self.props;
    /**
     * Row iterator that expects to be called with the data as scope. Return
     * elements that are already valid ReactElements.
     *
     * @param {String} item Property reference.
     * @param {Number} i Index.
     * @returns {ReactElement} Table row.
     * @private
     */

    return function iterate(item, i) {
      if ( /*#__PURE__*/_react.default.isValidElement(item)) return item; //
      // Extract the enumerable and non enumerable keys from the object so we
      // which properties should be used for the cells and which for the actual
      // properties.
      //

      const props = (0, _enu.default)(item);
      props.non.key = props.non._key || i; //
      // Assign an optional row click listener, pre-bind it to `item` so we get
      // a reference to the clicked item.
      //

      if (click) {
        props.non.click = function clack(evt) {
          click(item, evt);
        };
      }

      let rowProps = _objectSpread({}, props.non);

      if (enableKeyboard) {
        rowProps = _objectSpread(_objectSpread({}, rowProps), {}, {
          tabIndex: 0,
          enableKeyboard
        });
      }

      return /*#__PURE__*/_react.default.createElement(_tr.default, rowProps, self.renderCells(props.enu));
    };
  }
  /**
   * Return a cell iterator.
   *
   * @returns {Function} Iterator that maps children into Td elements.
   * @private
   */


  cell() {
    const self = this;
    /**
     * Cell iterator that expects to be called with the data as scope. Return
     * elements that are already valid ReactElements.
     *
     * @param {String} key Property reference.
     * @param {Number} i Iterator index.
     * @returns {ReactElement} Table cell.
     * @private
     */

    return function iterate(key, i) {
      if ( /*#__PURE__*/_react.default.isValidElement(this[key])) return this[key]; // eslint-disable-line no-invalid-this

      let tabIndex;
      if (!self.props.enableKeyboard) tabIndex = 0;
      return /*#__PURE__*/_react.default.createElement(_td.default, {
        tabIndex,
        className: key,
        key: i
      }, this[key]); // eslint-disable-line no-invalid-this
    };
  }
  /**
   * Render rows from a data collection.
   *
   * @param {Object} data Optional collection of rows that can be rendered.
   * @returns {Array} Collection of ReactDOM elements.
   * @public
   */


  renderRows(data) {
    return this.compose('row', data || this.props.data || {});
  }
  /**
   * Render a set of cells in a single row.
   *
   * @param {Object} data Single object where each property will become a cell.
   * @returns {Array} Collection of ReactDOM elements.
   * @private
   */


  renderCells(data) {
    return this.compose('cell', data);
  }
  /**
   * Render the table body. Allows passing both regular HTML/Components as
   * children or datasets through properties to dynamically generate content.
   *
   * @returns {ReactDOM} Generated table body and respective rows.
   * @public
   */


  render() {
    const {
      style,
      className,
      children
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("tbody", {
      style: style,
      className: className
    }, children, this.renderRows());
  }

}
/**
 * Allowed properties for Tbody.
 *
 * @enum {Object} Properties.
 * @public
 */


exports["default"] = Tbody;
Tbody.propTypes = {
  /** The child rows */
  children: _propTypes.default.node,

  /** Called when a row is clicked */
  click: _propTypes.default.func,

  /** The data to fill the table */
  data: _propTypes.default.array,

  /** When false, tabbing is disabled between rows, and enabled between individual table cells,
   * though there is no handler for Enter */
  enableKeyboard: _propTypes.default.bool,

  /** The column order for the rows */
  order: _propTypes.default.array,

  /** Styles to apply to the element */
  style: _propTypes.default.object,

  /** ClassName to apply to the element */
  className: _propTypes.default.string
};

/***/ }),

/***/ "../../components/table/lib/td.js":
/*!****************************************!*\
  !*** ../../components/table/lib/td.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));
/**
 * A table cell component
 *
 * @displayName Td
 * @param {Object} props passed in properties
 * @returns {React.Element} Rendered Td
 * @extends React.Component
 */


var _default = props => /*#__PURE__*/_react.default.createElement("td", props);

exports["default"] = _default;

/***/ }),

/***/ "../../components/table/lib/tfoot.js":
/*!*******************************************!*\
  !*** ../../components/table/lib/tfoot.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _collection = _interopRequireDefault(__webpack_require__(/*! ./collection */ "../../components/table/lib/collection.js"));

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _tr = _interopRequireDefault(__webpack_require__(/*! ./tr */ "../../components/table/lib/tr.js")); //
// Set of allowed child Components for the Table Body.
//


const COMPONENTS = {
  tr: _tr.default
};
/**
 * A table footer component
 *
 * @displayName Tfoot
 * @export
 * @class Tfoot
 * @extends {Collection}
 */

class Tfoot extends _collection.default {
  /**
   * Getter that returns the allowed children.
   *
   * @returns {Object} Components
   * @private
   */
  get components() {
    return COMPONENTS;
  }
  /**
   * Render a table footer.
   *
   * @returns {ReactElement} Table footer.
   * @public
   */


  render() {
    const {
      style,
      children,
      className
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("tfoot", {
      style: style,
      className: className
    }, _react.default.Children.map(children, this.renderChildren, this));
  }

}

exports["default"] = Tfoot;
Tfoot.propTypes = {
  /** Child row */
  children: _propTypes.default.node,

  /** Styles to apply to the element */
  style: _propTypes.default.object,

  /** ClassName to apply to the element */
  className: _propTypes.default.string
};

/***/ }),

/***/ "../../components/table/lib/th.js":
/*!****************************************!*\
  !*** ../../components/table/lib/th.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _classNames = _interopRequireDefault(__webpack_require__(/*! @ux/component-utilities/lib/classNames */ "../../utils/component-utilities/lib/classNames.js"));

var _chevronDown = _interopRequireDefault(__webpack_require__(/*! @ux/icon/chevron-down */ "../../components/icon/chevron-down/index.js"));

var _chevronUp = _interopRequireDefault(__webpack_require__(/*! @ux/icon/chevron-up */ "../../components/icon/chevron-up/index.js"));

var _ripOut = _interopRequireDefault(__webpack_require__(/*! rip-out */ "../../../node_modules/rip-out/index.js"));

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
} //
// Create a table header Component.
//

/**
 * A table header column component
 *
 * @displayName Th
 * @class Th
 * @extends {Component}
 */


class Th extends _react.Component {
  constructor() {
    super(...arguments);
    this.handleKeyDown = this.handleKeyDown.bind(this);
    this.sort = this.sort.bind(this);
  }
  /**
   * Call the sort method on the parent Table Component. The
   * method sorts the current state by the property column.
   *
   * @param {Event} event Mouse click.
   * @private
   */


  sort(event) {
    const {
      sortable,
      column
    } = this.props;
    sortable(column, event);
  }
  /**
   * Call the sort method on the parent Table Component. The
   * method sorts the current state by the property column.
   *
   * @param {Event} event onKeyDown.
   * @private
   */


  handleKeyDown(event) {
    const key = event.key;
    const {
      sortable,
      column
    } = this.props;

    if (key === 'Enter') {
      sortable(column, event);
    }
  }
  /**
   * Create a plain table header.
   *
   * @returns {ReactElement} Table header cell.
   * @private
   */


  plain() {
    const props = (0, _ripOut.default)(this.props, 'sortable');
    return /*#__PURE__*/_react.default.createElement("th", props);
  }
  /**
   * Create a table header with click event handling.
   *
   * @returns {ReactElement} Table header cell.
   * @private
   */


  sortable() {
    const {
      active,
      column,
      direction,
      className,
      children,
      showIcon,
      style
    } = this.props;
    const dir = ~direction ? 'down' : 'up';
    const iconVisible = active && active === column || showIcon;
    const visibleClass = iconVisible ? 'visible' : 'invisible'; //
    // Show sorting icon with the proper direction.
    //

    return /*#__PURE__*/_react.default.createElement("th", {
      role: "button",
      className: (0, _classNames.default)(className, 'ux-table-sort'),
      tabIndex: "0",
      onKeyDown: this.handleKeyDown,
      onClick: this.sort,
      style: style
    }, children, /*#__PURE__*/_react.default.createElement("span", {
      className: `drop-up-down-icon ${visibleClass}`
    }, dir === 'down' ? /*#__PURE__*/_react.default.createElement(_chevronDown.default, null) : /*#__PURE__*/_react.default.createElement(_chevronUp.default, null)));
  }
  /**
   * Render the sortable header with an optional click event
   * that will sort the current column.
   *
   * @returns {ReactElement} Table header cell.
   * @public
   */


  render() {
    const {
      sortable,
      column
    } = this.props;
    return sortable && column ? this.sortable() : this.plain();
  }

}
/**
 * Allowed properties for Th.
 *
 * @enum {Object} Properties.
 * @public
 */


exports["default"] = Th;
Th.propTypes = {
  /** Function to sort the data by the given column */
  sortable: _propTypes.default.func,

  /** Child components */
  children: _propTypes.default.node,

  /** The name of this column, gets passed to the sortable function */
  column: _propTypes.default.string,

  /** The name of the actively sorted column */
  active: _propTypes.default.string,

  /** The direction of the current sort */
  direction: _propTypes.default.number,

  /** The css classname to apply to the raw th element */
  className: _propTypes.default.string,

  /** Show the sorting indicator for sortable columns */
  showIcon: _propTypes.default.bool,

  /** Styles to apply to the element */
  style: _propTypes.default.object
};

/***/ }),

/***/ "../../components/table/lib/thead.js":
/*!*******************************************!*\
  !*** ../../components/table/lib/thead.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _collection = _interopRequireDefault(__webpack_require__(/*! ./collection */ "../../components/table/lib/collection.js"));

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _tr = _interopRequireDefault(__webpack_require__(/*! ./tr */ "../../components/table/lib/tr.js")); //
// Set of allowed child Components for the Table Body.
//


const COMPONENTS = {
  tr: _tr.default
};
/**
 * A component representing the THEAD element
 *
 * @displayName Thead
 * @class Thead
 * @extends {Collection}
 */

class Thead extends _collection.default {
  /**
   * Getter that returns the allowed children.
   *
   * @returns {Object} Components
   * @private
   */
  get components() {
    return COMPONENTS;
  }
  /**
   * Sets options.sortable if appropriate for the instance & child-type
   *
   * @param {Object} options The options object to set sortable on
   * @param {Boolean|Function} sort The sort value from props
   * @param {string} childElementType The child element type that is being considered
   * @private
   */


  setSortableOptionsForChild(options, sort, childElementType) {
    if (childElementType === 'tr') {
      options.sortable = sort;
    }
  }
  /**
   * Render a table head.
   *
   * @returns {ReactElement} Table head.
   * @public
   */


  render() {
    const {
      style,
      children,
      className
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("thead", {
      style: style,
      className: className
    }, _react.default.Children.map(children, this.renderChildren, this));
  }

}

exports["default"] = Thead;
Thead.propTypes = {
  /** Child row */
  children: _propTypes.default.node,

  /** Styles to apply to the element */
  style: _propTypes.default.object,

  /** ClassName to apply to the element */
  className: _propTypes.default.string
};

/***/ }),

/***/ "../../components/table/lib/tr.js":
/*!****************************************!*\
  !*** ../../components/table/lib/tr.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _collection = _interopRequireDefault(__webpack_require__(/*! ./collection */ "../../components/table/lib/collection.js"));

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _td = _interopRequireDefault(__webpack_require__(/*! ./td */ "../../components/table/lib/td.js"));

var _th = _interopRequireDefault(__webpack_require__(/*! ./th */ "../../components/table/lib/th.js")); //
// Set of allowed child Components for the Table row.
//


const COMPONENTS = {
  td: _td.default,
  th: _th.default
};
/**
 * A table row component
 *
 * @displayName Tr
 * @class Tr
 * @extends {Collection}
 */

class Tr extends _collection.default {
  constructor() {
    super(...arguments);
    this.onKeyDown = this.onKeyDown.bind(this);
  }
  /**
   * Getter that returns the allowed children.
   *
   * @returns {Object} Components
   * @private
   */


  get components() {
    return COMPONENTS;
  }
  /**
   * Private keydown event handler that translates `Enter` keypresses into click events
   *
   * @param {any} event The event of the keydown
   * @private
   */


  onKeyDown(event) {
    if (!this.props.enableKeyboard) return;

    if (event.key === 'Enter') {
      this.props.click(event);
    }
  }
  /**
   * Render a table row.
   *
   * @returns {ReactElement} Table row.
   * @public
   */


  render() {
    const {
      click,
      className,
      children,
      tabIndex,
      style
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("tr", {
      onKeyDown: this.onKeyDown,
      onClick: click,
      className: className,
      tabIndex: tabIndex,
      style: style
    }, _react.default.Children.map(children, this.renderChildren, this));
  }

}

exports["default"] = Tr;
Tr.propTypes = {
  /** Child cells */
  children: _propTypes.default.node,

  /** Called when the row is clicked */
  click: _propTypes.default.func,

  /** Styles to apply to the element */
  style: _propTypes.default.object,

  /** ClassName to apply to the element */
  className: _propTypes.default.string
};

/***/ }),

/***/ "../../components/tabs/lib/index.js":
/*!******************************************!*\
  !*** ../../components/tabs/lib/index.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "Tab", ({
  enumerable: true,
  get: function () {
    return _tab.default;
  }
}));
Object.defineProperty(exports, "TabContent", ({
  enumerable: true,
  get: function () {
    return _tabContent.default;
  }
}));
Object.defineProperty(exports, "TabIndex", ({
  enumerable: true,
  get: function () {
    return _tabIndex.default;
  }
}));
exports["default"] = void 0;

var _reactComponentValidator = _interopRequireDefault(__webpack_require__(/*! react-component-validator */ "../../../node_modules/react-component-validator/lib/index.js"));

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _tabContent = _interopRequireDefault(__webpack_require__(/*! ./tab-content */ "../../components/tabs/lib/tab-content.js"));

var _tabIndex = _interopRequireDefault(__webpack_require__(/*! ./tab-index */ "../../components/tabs/lib/tab-index.js"));

var _tab = _interopRequireDefault(__webpack_require__(/*! ./tab */ "../../components/tabs/lib/tab.js"));

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
} //
// Import all child components.
//

/**
 * Display content as tabs.
 *
 * @class Tabs
 * @displayName Tabs
 * @public
 */


class Tabs extends _react.Component {
  constructor() {
    super(...arguments);
    this.state = {
      selected: 0
    };
  }
  /**
   * Default implementation of tab selection logic. This method can be provided
   * as property and will receive arguments as specified below.
   *
   * @name change
   * @memberof Tabs
   * @returns {Function} Click event handler
   * @public
   */


  get change() {
    return (index, event) => {
      event.preventDefault();
      this.setState({
        selected: index
      });
    };
  }
  /**
   * Return selected tab, prefer props over state.
   *
   * @returns {Number} Index of selected tab
   * @private
   */


  get selected() {
    return 'selected' in this.props ? this.props.selected : this.state.selected;
  }
  /**
   * Extract TabIndex child from all childs.
   *
   * @name navigation
   * @memberof Tabs
   * @param {React.DOM[]} childs - React elements
   * @returns {React.DOM[]} React elements
   * @private
   */


  navigation(childs) {
    const tabIndex = childs.filter(child => child.type === _tabIndex.default)[0];

    if (!tabIndex) {
      return null;
    }

    const contentIds = childs.filter(child => child.type === _tabContent.default).map(child => child.props.id);
    return /*#__PURE__*/_react.default.cloneElement(tabIndex, {
      selected: this.selected,
      change: this.props.change || this.change,
      contentIds
    });
  }
  /**
   * Gets the tab ID for a given child index
   * @param {React.DOM[]} childs Array of children tabs
   * @param {number} idx Index of child to get tab ID for
   * @returns {number} ID of the child at given index
   */


  getTabId(childs, idx) {
    const tabIndex = childs.filter(child => child.type === _tabIndex.default)[0];

    if (!tabIndex) {
      return;
    }

    const tabs = _react.default.Children.toArray(tabIndex.props.children).filter(child => child.type === _tab.default);

    return tabs[idx] && tabs[idx].props && tabs[idx].props.id;
  }
  /**
   * Extract TabContent children from all childs. The double filter is required to
   * ensure the length of the childs array matches the length of the TabIndexes.
   *
   * @name content
   * @memberof Tabs
   * @param {React.DOM[]} childs - React elements
   * @returns {React.DOM[]} React elements
   * @private
   */


  content(childs) {
    const selectedTab = this.getTabId(childs, this.selected);

    if (this.props.renderHidden) {
      const contents = childs.filter(child => child.type === _tabContent.default);
      return contents.map((content, index) => {
        if (!content) {
          return null;
        }

        const className = ['ux-tab-content', index !== this.selected && 'ux-tab-content-hidden', content.props.className].filter(Boolean).join(' ');
        return /*#__PURE__*/_react.default.cloneElement(content, {
          'aria-labelledby': selectedTab,
          className,
          'tabIndex': this.props.tabIndex
        });
      });
    }

    const content = childs.filter(child => child.type === _tabContent.default)[this.selected];

    if (!content) {
      return null;
    }

    return /*#__PURE__*/_react.default.cloneElement(content, {
      'aria-labelledby': selectedTab,
      'tabIndex': this.props.tabIndex
    });
  }
  /**
   * Render the Tabs Component.
   *
   * @returns {React.DOM} div element with TabIndex and TabContent as children
   * @private
   */


  render() {
    const props = this.props;

    const children = _react.default.Children.toArray(props.children);

    return /*#__PURE__*/_react.default.createElement("div", {
      className: props.className
    }, this.navigation(children), this.content(children));
  }

}
/**
 * Optional properties: selected and change. Also validate the type of children
 * that are passed.
 *
 * @enum {Object} expected types of properties.
 * @public
 */


exports["default"] = Tabs;
Tabs.propTypes = {
  /** Tab index that should be selected */
  selected: _propTypes.default.number,

  /** Function called when selected tab is changed */
  change: _propTypes.default.func,

  /** Child tabs or tab contents */
  children: (0, _reactComponentValidator.default)([_tabIndex.default, _tabContent.default]),

  /** Classes to apply to Tabs */
  className: _propTypes.default.string,

  /** Developer indicates tabIndex */
  tabIndex: _propTypes.default.oneOf([-1, 0]),

  /** Non-selected tab content is hidden with CSS rather than JSX */
  renderHidden: _propTypes.default.bool
};
Tabs.defaultProps = {
  renderHidden: false
}; //
// Attach childs to the main Component for availability without ES6 imports.
//

Tabs.TabContent = _tabContent.default;
Tabs.TabIndex = _tabIndex.default;
Tabs.Tab = _tab.default; //
// Export the Class and related children.
//

/***/ }),

/***/ "../../components/tabs/lib/tab-content.js":
/*!************************************************!*\
  !*** ../../components/tabs/lib/tab-content.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = TabContent;

var _extends2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ "../../../node_modules/@babel/runtime/helpers/extends.js"));

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));
/**
 * Display content of each Tab. The Tabs component can optionally use TabContent.
 * @param {Object} props props
 * @displayName Tab Content
 * @public
 * @returns {React.ReactElement} TabContent
 */


function TabContent(props) {
  return /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({}, props, {
    tabIndex: props.tabIndex,
    role: "tabpanel"
  }));
}
/**
 * Property validation
 *
 * @type {Object}
 * @api private
 */


TabContent.propTypes = {
  /** Classes to be applied to tab content */
  className: _propTypes.default.string,

  /** Contents of the tab */
  children: _propTypes.default.node,

  /** Developer indicates tabIndex, default is 0 */
  tabIndex: _propTypes.default.oneOf([-1, 0])
};
TabContent.defaultProps = {
  tabIndex: 0
};

/***/ }),

/***/ "../../components/tabs/lib/tab-index.js":
/*!**********************************************!*\
  !*** ../../components/tabs/lib/tab-index.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ "../../../node_modules/@babel/runtime/helpers/extends.js"));

var _reactComponentValidator = _interopRequireDefault(__webpack_require__(/*! react-component-validator */ "../../../node_modules/react-component-validator/lib/index.js"));

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _ripOut = _interopRequireDefault(__webpack_require__(/*! rip-out */ "../../../node_modules/rip-out/index.js"));

var _tab = _interopRequireDefault(__webpack_require__(/*! ./tab */ "../../components/tabs/lib/tab.js"));

var _chevronLeft = _interopRequireDefault(__webpack_require__(/*! @ux/icon/chevron-left */ "../../components/icon/chevron-left/index.js"));

var _chevronRight = _interopRequireDefault(__webpack_require__(/*! @ux/icon/chevron-right */ "../../components/icon/chevron-right/index.js"));

var _breakpointsHoc = _interopRequireDefault(__webpack_require__(/*! @ux/component-utilities/lib/breakpoints-hoc */ "../../utils/component-utilities/lib/breakpoints-hoc.js"));

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
} //
// Control attributes.
//


const directions = {
  prev: {
    side: 'left',
    step: -1
  },
  next: {
    side: 'right',
    step: 1
  }
};
const breakpoints = ['tablet', 'desktop', 'large', 'xlarge'];
/**
 * Render a default set of tabs used with each Component.
 *
 * @class TabIndex
 * @displayName Tab Index
 * @public
 */

class TabIndex extends _react.Component {
  constructor() {
    super(...arguments); //
    // Move the conveyor through margin left styling.
    //

    this.state = {
      conveyorMarginLeft: 0
    };
    this.defaultStepSize = 200;
  }
  /**
   * Step size used to in- or decrement the conveyor position. Can also be provided
   * through properties on TabIndex.
   *
   * @returns {number} Step size
   * @public
   */


  get stepSize() {
    if (!this.props || !this.props.stepSize) return this.defaultStepSize;
    return this.props.stepSize;
  }
  /**
   * Increment or decrement the conveyor steps within bounds.
   * Bounds are: [0, this.tabsExceededWidth].
   *
   * @param {string} direction Previous or next control
   * @returns {Function} Event handler
   * @private
   */


  moveConveyor(direction) {
    return event => {
      event.preventDefault();
      const margin = this.state.conveyorMarginLeft;
      const absMargin = Math.abs(margin);
      let step = this.stepSize;

      if (direction === 'prev' && absMargin < step) {
        step = absMargin;
      } else if (direction === 'next' && this.tabsExceededWidth - absMargin < step) {
        step = this.tabsExceededWidth - absMargin;
      }

      this.setState({
        conveyorMarginLeft: margin + -directions[direction].step * step
      });
    };
  }
  /**
   * Calculate the amount of by which the tabs exceed the width of the conveyor.
   *
   * @returns {number} Exceeded width in pixels
   * @private
   */


  get tabsExceededWidth() {
    const tabindex = this.conveyor;
    let tabs = this.tabs;
    let sum = 0;
    let n;

    if (!tabindex || !tabs) {
      return sum;
    }

    tabs = Array.prototype.map.call(tabs.childNodes, tab => {
      var tabStyles = window.getComputedStyle(tab);
      return parseFloat(tabStyles.width) + parseFloat(tabStyles.marginLeft) + parseFloat(tabStyles.marginRight);
    });
    n = tabs.length;

    while (n--) {
      sum += tabs[n];
    }

    return sum - parseFloat(window.getComputedStyle(tabindex).width);
  }
  /**
   * Check if controls should be visible or hidden.
   *
   * @param {string} side Previous or next control
   * @param {string} breakpoint current view point
   * @returns {Object} Display style
   */


  conveyorArrowStyle(side, breakpoint) {
    const {
      conveyorMarginLeft
    } = this.state;
    const width = this.tabsExceededWidth;

    if (!['large', 'desktop', 'xlarge'].includes(breakpoint)) {
      return {
        display: 'none'
      };
    } else if (side === 'prev' && conveyorMarginLeft || side === 'next' && width !== Math.abs(conveyorMarginLeft) && width > 0) {
      return {
        display: 'flex'
      };
    }

    return {
      display: 'none'
    };
  }
  /**
   * Get attributes that are required for conveyor controls.
   *
   * @param {string} direction Previous or next control
   * @param {string} breakpoint current viewpoint
   * @returns {Object} Control attributes
   * @private
   */


  controlAttributes(direction, breakpoint) {
    return {
      'className': [`ux-conveyor-control-${directions[direction].side}`, 'ux-conveyor-control'].join(' '),
      'style': this.conveyorArrowStyle(direction, breakpoint),
      'onClick': this.moveConveyor(direction),
      'data-slide': direction,
      'role': 'button'
    };
  }
  /**
   * Render the TabIndex Component.
   *
   * @returns {React.DOM} conveyor clipping div element with children
   * @private
   */


  render() {
    const props = this.props;
    const {
      conveyorMarginLeft
    } = this.state;
    const other = (0, _ripOut.default)(props, 'stepSize', 'selected', 'change', 'contentIds');
    return /*#__PURE__*/_react.default.createElement(_breakpointsHoc.default, {
      breakpoints: breakpoints
    }, _ref => {
      let {
        breakpoint
      } = _ref; // Only add the marginLeft if we're on large/desktop breakpoints (prevents scrolling from breaking on small devices)

      const marginLeftStyle = {};

      if (['large', 'desktop', 'xlarge'].includes(breakpoint)) {
        marginLeftStyle.marginLeft = conveyorMarginLeft;
      }

      return /*#__PURE__*/_react.default.createElement("div", {
        className: "ux-conveyor-clip"
      }, /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({}, other, {
        ref: ref => {
          this.conveyor = ref;
        },
        className: "ux-conveyor"
      }), /*#__PURE__*/_react.default.createElement("ul", {
        className: "ux-tabs",
        ref: ref => {
          this.tabs = ref;
        },
        style: marginLeftStyle,
        role: "tablist"
      }, _react.default.Children.map(props.children, (child, i) => /*#__PURE__*/_react.default.cloneElement(child, {
        onClick: props.change.bind(null, i),
        selected: props.selected === i,
        ariaControls: props.contentIds[i]
      })))), /*#__PURE__*/_react.default.createElement("button", this.controlAttributes('prev', breakpoint), /*#__PURE__*/_react.default.createElement(_chevronLeft.default, {
        "aria-hidden": "true"
      }), /*#__PURE__*/_react.default.createElement("span", {
        className: "sr-only"
      }, "Previous")), /*#__PURE__*/_react.default.createElement("button", this.controlAttributes('next', breakpoint), /*#__PURE__*/_react.default.createElement(_chevronRight.default, {
        "aria-hidden": "true"
      }), /*#__PURE__*/_react.default.createElement("span", {
        className: "sr-only"
      }, "Next")));
    });
  }

}
/**
 * Validate that the passed children are of type Tab.
 *
 * @enum {Object} expected types of properties.
 * @api public
 */


exports["default"] = TabIndex;
TabIndex.propTypes = {
  /** Increments or decrements the conveyor position */
  stepSize: _propTypes.default.number,

  /** Function called when selection changes */
  change: _propTypes.default.func,

  /** Index of selected tab */
  selected: _propTypes.default.number,

  /** Child tab */
  children: (0, _reactComponentValidator.default)([_tab.default]),

  /** IDs of linked tab contents */
  contentIds: _propTypes.default.array
};

/***/ }),

/***/ "../../components/tabs/lib/tab.js":
/*!****************************************!*\
  !*** ../../components/tabs/lib/tab.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ "../../../node_modules/@babel/runtime/helpers/extends.js"));

var _ripOut = _interopRequireDefault(__webpack_require__(/*! rip-out */ "../../../node_modules/rip-out/index.js"));

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _classNames = _interopRequireDefault(__webpack_require__(/*! @ux/component-utilities/lib/classNames */ "../../utils/component-utilities/lib/classNames.js"));

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}
/**
 * Display Tab
 *
 * @class Tab
 * @displayName Tab
 * @public
 */


class Tab extends _react.Component {
  /**
   * Render the Tab. Depending on props.selected the tab is rendered as active.
   *
   * @returns {React.DOM} list element with tab caption as link
   * @private
   */
  render() {
    const props = this.props;
    const other = (0, _ripOut.default)(props, 'ariaControls');
    const itemClassName = ['ux-tab-item'].concat(props.className);
    const linkClassName = (0, _classNames.default)(props.design === 'underline' ? 'ux-tab-link-underline' : 'ux-tab-link', {
      active: props.selected
    });
    const ariaControls = props.selected === true ? props.ariaControls : null;
    const ariaSelectedTab = props.selected === true ? 'true' : 'false';
    return /*#__PURE__*/_react.default.createElement("li", (0, _extends2.default)({}, other, {
      className: itemClassName.join(' '),
      role: "presentation"
    }), /*#__PURE__*/_react.default.createElement("button", {
      type: "button",
      className: linkClassName,
      role: "tab",
      "aria-selected": ariaSelectedTab,
      "aria-controls": ariaControls
    }, props.children));
  }

}
/**
 * Property validation.
 *
 * @type {Object}
 * @api public
 */


exports["default"] = Tab;
Tab.propTypes = {
  /** Classes applied to tab */
  className: _propTypes.default.string,

  /** Boolean of whether the tab is selected or not */
  selected: _propTypes.default.bool,

  /** Children elements of a tab */
  children: _propTypes.default.node,

  /** Accessibility attributes */
  ariaControls: _propTypes.default.string,

  /** Design of a tab */
  design: _propTypes.default.string
};

/***/ }),

/***/ "../../components/text/lib/classes.js":
/*!********************************************!*\
  !*** ../../components/text/lib/classes.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.asOptions = void 0;
exports["default"] = textClasses;
exports.emphasisOptions = void 0;

var _classnames = _interopRequireDefault(__webpack_require__(/*! classnames */ "../../../node_modules/classnames/index.js"));

var _feedbackExpressions = _interopRequireDefault(__webpack_require__(/*! @ux/intents/lib/feedback-expressions */ "../../utils/intents/lib/feedback-expressions.js")); // Possible options for as prop


const asOptions = ['title', 'heading', 'paragraph', 'action', 'input', 'label', 'caption'];
exports.asOptions = asOptions;
const emphasisOptions = Object.values(_feedbackExpressions.default).map(v => v.toLowerCase());
exports.emphasisOptions = emphasisOptions;
const UX_TEXT_CLASSNAME = 'ux-text';
/**
 * Creates a collection of classes for text styles
 *
 * @param {Object} props - A props configuration object
 * @param {String} [props.as] - A category of text
 * @param {String} [props.className] - A class name to include
 * @param {String} [props.emphasis] - Includes styles to represent feedback
 * @param {Number} [props.size] - A number representing the font size
 * @returns {String} A collection of class names
 */

function textClasses(props) {
  const {
    as,
    className,
    emphasis,
    size
  } = props || {};
  return (0, _classnames.default)(UX_TEXT_CLASSNAME, className, {
    [`${UX_TEXT_CLASSNAME}-size${size}`]: typeof size === 'number' && size >= -2 && size < 6,
    [`${UX_TEXT_CLASSNAME}-${as}`]: as && asOptions.includes(as),
    [`${UX_TEXT_CLASSNAME}-feedback-${emphasis}`]: emphasis && emphasisOptions.includes(emphasis)
  });
}

/***/ }),

/***/ "../../components/text/lib/index.js":
/*!******************************************!*\
  !*** ../../components/text/lib/index.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.text = exports["default"] = void 0;

var _extends2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ "../../../node_modules/@babel/runtime/helpers/extends.js"));

var _objectWithoutProperties2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/objectWithoutProperties */ "../../../node_modules/@babel/runtime/helpers/objectWithoutProperties.js"));

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _classes = _interopRequireWildcard(__webpack_require__(/*! ./classes */ "../../components/text/lib/classes.js"));

const _excluded = ["as", "className", "children", "emphasis", "size", "text"];

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}
/**
 * Creates a function which represents a dynamic React component
 *
 * @param {String} TagName - The tag name of the element to use for text
 * @returns {Function} - A function to create a component
 */


function create(TagName) {
  /**
   * Creates a React component using the given tag name
   *
   * @param {Object} props - A props configuration object
   * @param {String} [props.as] - A category of text
   * @param {String} [props.className] - A class name to include
   * @param {Node} [props.children] - Deprecated, use text prop instead
   * @param {String} [props.emphasis] - Includes styles to represent feedback
   * @param {Number} [props.size] - A number representing the font size
   * @param {String} [props.text] - The text content
   * @returns {React.Component} - A functional React component
   */
  function Text(props) {
    const _ref = props || {},
          {
      as,
      className,
      children,
      emphasis,
      size,
      text
    } = _ref,
          rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);

    if ( true && children) {
      console.warn(`Warning: The use of children elements within @ux/text is deprecated.
          Please use the 'text' prop instead.`);
    }

    return /*#__PURE__*/_react.default.createElement(TagName, (0, _extends2.default)({
      className: (0, _classes.default)({
        as,
        className,
        emphasis,
        size
      })
    }, rest), text || children);
  }
  /**
   *
   * @enum {Object} expected types of properties.
   * @public
   */


  Text.propTypes = {
    /** The type of text expected in the component */
    as: _propTypes.default.oneOf(_classes.asOptions),

    /** Deprecated, children for the component, please use text prop instead */
    children: _propTypes.default.node,

    /** Classes to apply to component */
    className: _propTypes.default.string,

    /** The emphasis of text expected in the component */
    emphasis: _propTypes.default.oneOf(_classes.emphasisOptions),

    /** The size of the text, affected by the 'as' prop */
    size: _propTypes.default.number,

    /** Text to be displayed */
    text: _propTypes.default.string
  };
  return Text;
}

const text = new Proxy(function () {}, {
  get: function get(target, prop) {
    // Deliberately not using hasOwnProperty to catch things like __proto__
    if (!String(prop).startsWith('_') && typeof target[prop] === 'undefined') {
      // Cache access by creating a key with value
      target[prop] = create(prop);
    } // Always return thing at that key, either undefined or thing set


    return Reflect.get(...arguments);
  }
});
exports.text = text;
var _default = text;
exports["default"] = _default;

/***/ }),

/***/ "../../components/toggle/lib/index.js":
/*!********************************************!*\
  !*** ../../components/toggle/lib/index.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.Toggle = void 0;

var _extends2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ "../../../node_modules/@babel/runtime/helpers/extends.js"));

var _objectWithoutProperties2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/objectWithoutProperties */ "../../../node_modules/@babel/runtime/helpers/objectWithoutProperties.js"));

var _toggle = _interopRequireDefault(__webpack_require__(/*! ./toggle */ "../../components/toggle/lib/toggle.js"));

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _ripOut = _interopRequireDefault(__webpack_require__(/*! rip-out */ "../../../node_modules/rip-out/index.js"));

var _id2 = _interopRequireDefault(__webpack_require__(/*! @ux/component-utilities/lib/id */ "../../utils/component-utilities/lib/id.js"));

var _classNames = _interopRequireDefault(__webpack_require__(/*! @ux/component-utilities/lib/classNames */ "../../utils/component-utilities/lib/classNames.js"));

const _excluded = ["type", "onChange", "onKeyDown", "tabIndex"];
/**
 * Class representing a 2-state switch.
 *
 * @displayName Toggle (web)
 * @class Toggle
 * @public
 */

class Toggle extends _toggle.default {
  render() {
    let _this$props = this.props,
        {
      type,
      onChange,
      onKeyDown,
      tabIndex
    } = _this$props,
        props = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
    const {
      label,
      hideLabel
    } = this.props;
    const checked = !!('checked' in props ? props.checked : this.state.checked);
    const id = (0, _id2.default)('label', {
      props: this.props
    });
    onChange = onChange || this.onChange;
    onKeyDown = onKeyDown || this.onKeyDown;
    type = _toggle.default.allowedTypes.includes(type) ? type : _toggle.default.allowedTypes[0];
    const className = (0, _classNames.default)((0, _classNames.default)('ux-toggle', {
      'disabled': props.disabled,
      'ux-toggle-small': props.small
    }));
    props = (0, _ripOut.default)(props, 'small');
    return /*#__PURE__*/_react.default.createElement("label", {
      htmlFor: id,
      className: className
    }, /*#__PURE__*/_react.default.createElement("input", (0, _extends2.default)({}, props, {
      type: type,
      checked: checked,
      className: 'ux-toggle-checkbox',
      onChange: onChange,
      onKeyDown: onKeyDown,
      id: id,
      tabIndex: tabIndex
    })), /*#__PURE__*/_react.default.createElement("span", {
      className: "ux-toggle-container"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "ux-toggle-bg"
    }), /*#__PURE__*/_react.default.createElement("span", {
      className: "ux-toggle-handle"
    })), !hideLabel && label && /*#__PURE__*/_react.default.createElement("span", {
      className: "ux-toggle-message"
    }, label));
  }

}
/**
 * Inherit the propTypes from the Namespace, as well as our base class. We
 * don't want to add these shapes to our base class as it doesn't need
 * any namespace functionality.
 *
 * @type {Object}
 * @public
 */


exports.Toggle = Toggle;
Toggle.propTypes = {
  /** Defines the type of behavior for the toggle*/
  type: _propTypes.default.oneOf(_toggle.default.allowedTypes),

  /** Identifies the toggle label on the page (used for aria references)*/
  htmlFor: _propTypes.default.string,

  /** Label for the toggle */
  label: _toggle.default.validatePropTypeLabel,

  /** Flag dictating the toggle should be rendered smaller */
  small: _propTypes.default.bool,

  /** Flag dictating if the toggle is disabled */
  disabled: _propTypes.default.bool,

  /** Flag dictating the checked state of the toggle */
  checked: _propTypes.default.bool,

  /** Flag dictating if the toggle should hide its label*/
  hideLabel: _propTypes.default.bool,

  /** onChange callback */
  onChange: _propTypes.default.func,

  /** onKeyDown override, (default allows Enter and Space to flip the toggle) */
  onKeyDown: _propTypes.default.func,

  /** Identifies the toggle on the page, must be unique if multiple component share the same label */
  id: _propTypes.default.string,

  /** Developer indicates tabIndex */
  tabIndex: _propTypes.default.oneOf([-1, 0])
};
var _default = Toggle;
exports["default"] = _default;

/***/ }),

/***/ "../../components/toggle/lib/toggle.js":
/*!*********************************************!*\
  !*** ../../components/toggle/lib/toggle.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _react = __webpack_require__(/*! react */ "../../../node_modules/react/index.js");

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));
/**
 * Class representing a 2-state switch.
 *
 * @displayName Toggle
 * @class Base
 * @public
 */


class Base extends _react.Component {
  constructor(props) {
    super(...arguments);

    if (!('checked' in props)) {
      this.state = {
        checked: false
      };
    }

    this.onChange = this.onChange.bind(this);
    this.onKeyDown = this.onKeyDown.bind(this);
  }
  /**
   * Keep value in state if checked is not provided. Value is used over `checked` for the
   * React Native Switch component which uses `value`.
   *
   * @private
   */


  onChange() {
    const props = this.props;

    if ('onChange' in props) {
      props.onChange(...arguments);
    }

    if (!('checked' in props)) {
      this.setState({
        checked: !this.state.checked
      });
    }
  }
  /**
   * Handles the keyboard events for space and enter keys.
   *
   * @param  {Event} event Keyboard input event from the browser.
   * @private
   */


  onKeyDown(event) {
    const key = event.key;
    const props = this.props;
    const safelistKeys = [' ', 'Enter'];
    event.preventDefault();

    if (safelistKeys.includes(key)) {
      event.stopPropagation();
      if ('onChange' in props) props.onChange(event);
      if (!('checked' in props)) this.setState({
        checked: !this.state.checked
      });
    }
  }

  render() {
    return super.render();
  }

}

exports["default"] = Base;
Base.defaultProps = {
  type: 'checkbox',
  disabled: false,
  tabIndex: 0
};
/**
 * Validate label and require ID if label is a ReactElement
 *
 * @param {Object} props the props passed in
 * @param {string} propName the name of the current prop
 * @param {string} componentName the name of the component
 * @returns {Error | void} returns an error if label is invalid
 */

Base.validatePropTypeLabel = function validatePropTypeLabel(props, propName, componentName) {
  const label = props[propName];

  if (typeof label !== 'string' && !props.id) {
    return new Error(`Invalid prop "${propName}" supplied to "${componentName}". Prop "${propName}" must be a string, otherwise prop "id" must be provided. Validation failed`);
  }
};

Base.allowedTypes = ['checkbox', 'radio'];
Base.propTypes = {
  /** Defines the type of behavior for the toggle*/
  type: _propTypes.default.oneOf(Base.allowedTypes),

  /** Identifies the toggle label on the page (used for aria references)*/
  htmlFor: _propTypes.default.string,

  /** Label for the toggle */
  label: Base.validatePropTypeLabel,

  /** Flag dictating the toggle should be rendered smaller */
  small: _propTypes.default.bool,

  /** Flag dictating if the toggle is disabled */
  disabled: _propTypes.default.bool,

  /** Flag dictating the checked state of the toggle */
  checked: _propTypes.default.bool,

  /** Flag dictating if the toggle should hide its label*/
  hideLabel: _propTypes.default.bool,

  /** onChange callback */
  onChange: _propTypes.default.func,

  /** onKeyDown override, (default allows Enter and Space to flip the toggle) */
  onKeyDown: _propTypes.default.func,

  /** Identifies the toggle on the page, must be unique if multiple component share the same label (used for aria references) */
  // used for aria references.
  id: _propTypes.default.string,

  /** Developer indicates tabIndex */
  tabIndex: _propTypes.default.oneOf([-1, 0])
};

/***/ }),

/***/ "../../legacy/form-element/lib/checkbox.js":
/*!*************************************************!*\
  !*** ../../legacy/form-element/lib/checkbox.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.Checkbox = void 0;

var _index = _interopRequireDefault(__webpack_require__(/*! ../lib/index.js */ "../../legacy/form-element/lib/index.js"));
/**
 * Interface for creating checkbox elements. Note: this code is also used by React Native to set the type
 * of the Form Element component.
 *
 * @displayName Checkbox
 * @class Checkbox
 * @public
 */


class Checkbox extends _index.default {
  constructor() {
    super(...arguments);
    this.type = 'checkbox';
    this.isFlip = true;
  }

}

exports.Checkbox = Checkbox;
var _default = Checkbox;
exports["default"] = _default;

/***/ }),

/***/ "../../legacy/form-element/lib/criteria/criteria-connect.js":
/*!******************************************************************!*\
  !*** ../../legacy/form-element/lib/criteria/criteria-connect.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../../node_modules/@babel/runtime/helpers/defineProperty.js"));

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _criteria = _interopRequireDefault(__webpack_require__(/*! ./criteria */ "../../legacy/form-element/lib/criteria/criteria.js"));

var _util = __webpack_require__(/*! ./util */ "../../legacy/form-element/lib/criteria/util.js");

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      (0, _defineProperty2.default)(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}
/**
 * Names of FormElement events to wire up.
 *
 * @type {string[]}
 * @private
 */


const EVENT_PROPS = ['onChange', 'onFocus', 'onBlur', 'onValidation'];
/**
 * Component used to wire up Criteria to components which inherit from FormElement.
 *
 * @displayName Connect
 *
 * @class Connect
 * @public
 */

class Connect extends _react.Component {
  constructor() {
    super(...arguments);
    this.state = _objectSpread(_objectSpread({}, this.sate), {}, {
      value: '',
      visible: false,
      isValid: false,
      hadInput: false
    });
    this._setupInput = this._setupInput.bind(this);
    this._setupCriteria = this._setupCriteria.bind(this);
    this._onValidChangeHandler = this._onValidChangeHandler.bind(this);
    this._onChangeHandler = this._onChangeHandler.bind(this);
    this._onValidationHandler = this._onValidationHandler.bind(this);
    this._onFocusHandler = this._onFocusHandler.bind(this);
    this._onBlurHandler = this._onBlurHandler.bind(this);
  }
  /**
   * React lifecycle hook invoked when component is about to mount.
   *
   * @private
   */


  componentDidMount() {
    if ('value' in this.props.children[0].props) {
      this.setState({
        value: this.props.children[0].props.value
      });
    }

    if (this.props.forceValidation) {
      this.setState({
        hadInput: this.props.forceValidation
      });
    }
  }
  /**
   * Callback used when FormElement input value is updated.
   *
   * @param {any} value Value to validate against.
   * @private
   */


  _onValidationHandler(value) {
    this.setState({
      value: value,
      hadInput: true
    });
  }
  /**
   * Callback used when FormElement input value changes.
   *
   * @param {Object} evt Change event.
   * @private
   */


  _onChangeHandler(evt) {
    this.setState({
      value: evt.target.value,
      hadInput: true
    });
  }
  /**
   * Callback used when FormElement gains focus.
   *
   * @private
   */


  _onFocusHandler() {
    this.setState({
      visible: true
    });
  }
  /**
   * Callback used when FormElement loses focus.
   *
   * @private
   */


  _onBlurHandler() {
    setTimeout(() => {
      this.setState({
        visible: false
      });
    }, 250);
  }
  /**
   * Callback used when Criteria changes valid state.
   *
   * @param {Boolean} name Name of the Criteria.
   * @param {Boolean} isValid Valid state of Criteria.
   * @private
   */


  _onValidChangeHandler(name, isValid) {
    this.setState({
      isValid
    });
  }
  /**
   * Wires up callbacks to the FormElement.
   *
   * @param {ReactElement} element FormElement.
   * @returns {ReactElement} wired up FormElement.
   * @private
   */


  _setupInput(element) {
    const self = this;
    const state = self.state;
    const {
      validate
    } = element.props;
    const props = {}; //
    // If this component has ever had focus then validation
    // should be run. Otherwise, if it has never had user interaction
    // it should be displayed as valid even if it is invalid.
    //

    if (state.hadInput) {
      let valid = state.isValid;

      if (typeof validate === 'function') {
        valid = valid && validate(state.value);
      }

      props.validates = valid;
    } //
    // If we are visible then pass alone the `open` class to the form
    // element associated with this instance.
    //


    if (state.visible && (!self.props.enableModern || !state.isValid)) {
      props.className = 'open';
    }

    EVENT_PROPS.forEach(method => {
      if (typeof element.props[method] === 'function') {
        props[method] = (0, _util.combineFunctions)(element.props[method], self[`_${method}Handler`]);
      } else {
        props[method] = self[`_${method}Handler`];
      }
    });
    return /*#__PURE__*/_react.default.cloneElement(element, props);
  }
  /**
   * Wires up callbacks to the Criteria component.
   *
   * @param {ReactElement} element Criteria element.
   * @returns {ReactElement} wired up Criteria.
   * @private
   */


  _setupCriteria(element) {
    const props = this.props;
    const state = this.state;
    return /*#__PURE__*/_react.default.cloneElement(element, {
      standalone: false,
      value: state.value,
      visible: state.visible,
      enableModern: props.enableModern,
      onValidChange: typeof element.props.onValidChange === 'function' ? (0, _util.combineFunctions)(element.props.onValidChange, this._onValidChangeHandler) : this._onValidChangeHandler
    });
  }
  /**
   * Renders the component.
   *
   * @returns {React.DOM} Rendered form element.
   * @private
   */


  render() {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "ux-criteria-connect"
    }, this._setupInput(this.props.children[0]), this._setupCriteria(this.props.children[1]));
  }
  /**
   * PropType check that make sure child components are correct type and order.
   *
   * @param {Array} props Props
   * @param {String} propName Name of prop
   * @param {String} componentName Name of component
   * @returns {*} null or Error if invalid children
   * @private
   */


  static childrenPropTypes(props, propName, componentName) {
    const _children = _react.default.Children.toArray(props[propName]);

    if (_children.length !== 2) {
      return new Error(`${componentName} may only have 2 child components`);
    }

    const input = _children[0];
    const criteria = _children[1];

    if (!input.props.label && !input.props.placeholder) {
      return new Error(`${componentName} must have a FormElement component as the first child`);
    }

    if (!(0, _util.isElementOfComponentType)(criteria, _criteria.default)) {
      return new Error(`${componentName} must have a Criteria component as second child`);
    }

    return null;
  }

}
/**
 * PropType validation.
 *
 * @type {Object}
 * @private
 */


exports["default"] = Connect;
Connect.propTypes = {
  /** The child elements */
  children: Connect.childrenPropTypes,

  /** Whether validation should be performed on initial mount */
  forceValidation: _propTypes.default.bool,

  /** Enable control animations and absolute positioning.
   * This should be avoided unless your app/site is experiencing
   * major issues as this will be removed shortly.  */
  enableModern: _propTypes.default.bool
};
Connect.defaultProps = {
  enableModern: true
};

/***/ }),

/***/ "../../legacy/form-element/lib/criteria/criteria-header.js":
/*!*****************************************************************!*\
  !*** ../../legacy/form-element/lib/criteria/criteria-header.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = Header;

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));
/**
 * Header used as the first child of a Criteria component.
 *
 * @displayName Header
 *
 * @param {Object} props Props
 * @returns {ReactElement} ReactElement
 */


function Header(props) {
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "ux-criteria-header title extra-small"
  }, props.children);
}
/**
 * PropType validation.
 *
 * @type {Object}
 * @private
 */


Header.propTypes = {
  /** The child elements */
  children: _propTypes.default.node
};

/***/ }),

/***/ "../../legacy/form-element/lib/criteria/criteria-rule.js":
/*!***************************************************************!*\
  !*** ../../legacy/form-element/lib/criteria/criteria-rule.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../../node_modules/@babel/runtime/helpers/defineProperty.js"));

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _classNames = _interopRequireDefault(__webpack_require__(/*! @ux/component-utilities/lib/classNames */ "../../utils/component-utilities/lib/classNames.js"));

var _refresh = _interopRequireDefault(__webpack_require__(/*! @ux/icon/refresh */ "../../components/icon/refresh/index.js"));

var _checkmark = _interopRequireDefault(__webpack_require__(/*! @ux/icon/checkmark */ "../../components/icon/checkmark/index.js"));

var _reactValidationContext = __webpack_require__(/*! react-validation-context */ "../../../node_modules/react-validation-context/lib/index.js");

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      (0, _defineProperty2.default)(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}
/**
 * Component used to define a criteria rule.
 *
 * @displayName Rule
 *
 * @class Rule
 * @public
 */


class Rule extends _react.Component {
  constructor() {
    super(...arguments);
    this.state = _objectSpread(_objectSpread({}, this.state), {}, {
      isValid: false,
      promisePending: false
    });
    this._queuedValue = null;
  }
  /**
   * React lifecycle hook invoked when component is mounted.
   *
   * @private
   */


  componentDidMount() {
    this._performValidate(this.props.value);
  }
  /**
   * React lifecycle hook invoked when new props are being received.
   *
   * @param {Object} prevProps previous props
   * @private
   */


  componentDidUpdate(prevProps) {
    if (this.props.value !== prevProps.value) {
      this._performValidate(this.props.value);
    }
  }
  /**
   * Executes validate function. If a validate promise is pending, value is queued.
   *
   * @param {*} value The valid to validate.
   * @private
   */


  _performValidate(value) {
    if (this.state.promisePending) {
      this._queuedValue = value;
      return;
    }

    const isValid = this.props.validate(value);

    if (typeof Promise !== 'undefined' && isValid instanceof Promise) {
      const newState = {
        promisePending: true
      };

      if (this.state.isValid) {
        newState.isValid = false;
      }

      isValid.then(() => {
        this._setValidateResults(true);
      }, () => {
        this._setValidateResults(false);
      });
      this.setState(newState);
    } else {
      this._setValidateResults(isValid);
    }
  }
  /**
   * Updates component state and performs validate if there is a queued value.
   *
   * @param {Boolean} isValid Did the rule validate or not.
   * @private
   */


  _setValidateResults(isValid) {
    const newState = {};

    if (this.state.promisePending) {
      newState.promisePending = false;
    }

    if (this.state.isValid !== isValid) {
      newState.isValid = isValid;
    }

    if (Object.keys(newState).length) {
      this.setState(newState);
    }

    if (this._queuedValue !== null) {
      this._performValidate(this._queuedValue);

      this._queuedValue = null;
    }
  }
  /**
   * Renders the component.
   *
   * @returns {React.DOM} Rendered form element.
   * @private
   */


  render() {
    const {
      name,
      onValidChange
    } = this.props;
    const {
      isValid
    } = this.state;
    const iconStateClass = isValid ? 'success' : '';

    let renderIcon = /*#__PURE__*/_react.default.createElement("span", {
      className: 'icon ' + iconStateClass
    }, /*#__PURE__*/_react.default.createElement(_checkmark.default, {
      "aria-hidden": "true",
      width: 17,
      height: 17
    }));

    const ariaCriteriaItem = isValid ? 'true' : 'false';

    if (this.state.promisePending) {
      renderIcon = /*#__PURE__*/_react.default.createElement("span", {
        className: "icon"
      }, /*#__PURE__*/_react.default.createElement(_refresh.default, {
        "aria-hidden": "true"
      }));
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      role: "alert",
      className: (0, _classNames.default)('ux-criteria-rule', {
        'ux-criteria-rule-checked': isValid
      }),
      "aria-hidden": ariaCriteriaItem
    }, /*#__PURE__*/_react.default.createElement(_reactValidationContext.Validates, {
      name: name || '',
      validates: isValid,
      onValidChange: onValidChange
    }), renderIcon, /*#__PURE__*/_react.default.createElement("span", {
      className: `ux-criteria-rule-text`
    }, this.props.children));
  }

}
/**
 * PropType validation.
 *
 * @type {Object}
 * @private
 */


exports["default"] = Rule;
Rule.propTypes = {
  /** How to validate the data, returns true if data is valid */
  validate: _propTypes.default.func.isRequired,

  /** The data being validated */
  value: _propTypes.default.any,

  /** Function called when validation state changes */
  onValidChange: _propTypes.default.func,

  /** The name of the criteria */
  name: _propTypes.default.string,

  /** Child elements */
  children: _propTypes.default.node
};
/**
 * Flag the component as a rule for criteria component to look for.
 *
 * @type {boolean}
 * @private
 */

Rule.isRule = true;

/***/ }),

/***/ "../../legacy/form-element/lib/criteria/criteria.js":
/*!**********************************************************!*\
  !*** ../../legacy/form-element/lib/criteria/criteria.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _classNames = _interopRequireDefault(__webpack_require__(/*! @ux/component-utilities/lib/classNames */ "../../utils/component-utilities/lib/classNames.js"));

var _reactTransitionGroup = __webpack_require__(/*! react-transition-group */ "../../../node_modules/react-transition-group/esm/index.js");

var _reactValidationContext = __webpack_require__(/*! react-validation-context */ "../../../node_modules/react-validation-context/lib/index.js");

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}
/**
 * The primary criteria component.
 *
 * @displayName Criteria
 *
 * @class Criteria
 * @public
 */


class Criteria extends _react.Component {
  constructor() {
    super(...arguments);
    this.state = {
      validates: false
    };
    this.onValidChange = this.onValidChange.bind(this);
    this.setupRules = this.setupRules.bind(this);
  }
  /**
   * Validates the criteria by making sure every child is valid.
   *
   * @param {Object} valids The map of childs to their validities.
   * @returns {Boolean} Whether or not every child is valid.
   */


  validate(valids) {
    return Object.keys(valids).every(k => valids[k]);
  }
  /**
   * Wires up Rule child components.
   *
   * @returns {Array} The resulting children with wired up Rules.
   * @private
   */


  setupRules() {
    const {
      children,
      value,
      iconDesign
    } = this.props;
    let name = this.props.name;
    let key = 0;
    return _react.default.Children.map(children, c => {
      if (c.type.isRule !== true) {
        return c;
      }

      name = c.props.name || `${name} rule ${key}`;

      const w = /*#__PURE__*/_react.default.cloneElement(c, {
        key,
        name,
        value,
        iconDesign
      });

      key++;
      return w;
    });
  }
  /**
   * Wrap the onValidChange handler to set this.state.validates
   *
   * @param {string} name The criteria name
   * @param {boolean} isValid Whether the rule is valid
   * @param {boolean} wasValid Whether the rule used to be valid
   * @private
   */


  onValidChange(name, isValid, wasValid) {
    if (this.props.onValidChange) {
      this.props.onValidChange(name, isValid, wasValid);
    }

    this.setState({
      validates: isValid
    });
  }
  /**
   * Renders the component
   *
   * @returns {React.DOM} The rendered component
   */


  render() {
    const {
      visible,
      name,
      standalone,
      enableModern
    } = this.props;
    const {
      validates
    } = this.state;
    const display = visible ? 'block' : 'none';

    if (enableModern) {
      return /*#__PURE__*/_react.default.createElement(_reactValidationContext.Validate, {
        name: name || '',
        validate: this.validate,
        onValidChange: this.onValidChange
      }, /*#__PURE__*/_react.default.createElement(_reactTransitionGroup.CSSTransition, {
        classNames: "ux-criteria",
        in: standalone || visible && !validates,
        timeout: 400
      }, /*#__PURE__*/_react.default.createElement("div", {
        role: "alert",
        className: (0, _classNames.default)('ux-criteria', {
          standalone: standalone,
          valid: validates
        })
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: (0, _classNames.default)('ux-criteria-content', {
          'fade-in': visible && !validates,
          'fade-out': !visible || validates
        })
      }, this.setupRules()))));
    }

    return /*#__PURE__*/_react.default.createElement(_reactValidationContext.Validate, {
      name: name || '',
      validate: this.validate,
      onValidChange: this.onValidChange
    }, /*#__PURE__*/_react.default.createElement("div", {
      role: "alert",
      style: {
        display
      },
      className: (0, _classNames.default)('ux-criteria ux-criteria-relative', {
        standalone: standalone
      })
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "ux-criteria-content"
    }, this.setupRules())));
  }

}
/**
 * PropType validation.
 *
 * @type {Object}
 * @private
 */


exports["default"] = Criteria;
Criteria.propTypes = {
  /** The value of the data to which to apply the criteria */
  value: _propTypes.default.any,

  /** The name of the criteria */
  name: _propTypes.default.string,

  /** Called when the validation state changes */
  onValidChange: _propTypes.default.func,

  /** Whether the element is visible */
  visible: _propTypes.default.bool,

  /** The child elements */
  children: _propTypes.default.node,

  /** Specifies if the criteria is a standalone control or if it's
  tied to a form field */
  standalone: _propTypes.default.bool,

  /** Enable control animations and absolute positioning.
   * This should be avoided unless your app/site is experiencing
   * major issues as this will be removed shortly.  */
  enableModern: _propTypes.default.bool,

  /** Use custom criteria checkmark design for Criteria.Rules */
  iconDesign: _propTypes.default.any
};
/**
 * PropType defaults.
 *
 * @type {Object}
 * @private
 */

Criteria.defaultProps = {
  visible: true,
  name: '',
  standalone: true,
  enableModern: true
};

/***/ }),

/***/ "../../legacy/form-element/lib/criteria/index.js":
/*!*******************************************************!*\
  !*** ../../legacy/form-element/lib/criteria/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "Connect", ({
  enumerable: true,
  get: function () {
    return _criteriaConnect.default;
  }
}));
Object.defineProperty(exports, "Criteria", ({
  enumerable: true,
  get: function () {
    return _criteria.default;
  }
}));
Object.defineProperty(exports, "Header", ({
  enumerable: true,
  get: function () {
    return _criteriaHeader.default;
  }
}));
Object.defineProperty(exports, "Rule", ({
  enumerable: true,
  get: function () {
    return _criteriaRule.default;
  }
}));
exports["default"] = exports.Rules = void 0;

var _criteria = _interopRequireDefault(__webpack_require__(/*! ./criteria */ "../../legacy/form-element/lib/criteria/criteria.js"));

var _criteriaConnect = _interopRequireDefault(__webpack_require__(/*! ./criteria-connect */ "../../legacy/form-element/lib/criteria/criteria-connect.js"));

var _criteriaHeader = _interopRequireDefault(__webpack_require__(/*! ./criteria-header */ "../../legacy/form-element/lib/criteria/criteria-header.js"));

var _criteriaRule = _interopRequireDefault(__webpack_require__(/*! ./criteria-rule */ "../../legacy/form-element/lib/criteria/criteria-rule.js"));

var Rules = _interopRequireWildcard(__webpack_require__(/*! ./rules */ "../../legacy/form-element/lib/criteria/rules/index.js"));

exports.Rules = Rules;

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
} //
// Attach children to the main Component for availability without ES6 imports.
//


_criteria.default.Connect = _criteriaConnect.default;
_criteria.default.Header = _criteriaHeader.default;
_criteria.default.Rules = Rules;
_criteria.default.Rule = _criteriaRule.default; //
// Export the Class and related children.
//

var _default = _criteria.default;
exports["default"] = _default;

/***/ }),

/***/ "../../legacy/form-element/lib/criteria/rules/include-lowercase.js":
/*!*************************************************************************!*\
  !*** ../../legacy/form-element/lib/criteria/rules/include-lowercase.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = IncludeLowercaseRule;

var _extends2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ "../../../node_modules/@babel/runtime/helpers/extends.js"));

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _criteriaRule = _interopRequireDefault(__webpack_require__(/*! ../criteria-rule */ "../../legacy/form-element/lib/criteria/criteria-rule.js"));
/**
 * Rule component requiring a lowercase character.
 *
 * @displayName IncludeLowercaseRule
 *
 * @param {Object} props Props
 * @returns {ReactElement} ReactElement
 */


function IncludeLowercaseRule(props) {
  return /*#__PURE__*/_react.default.createElement(_criteriaRule.default, (0, _extends2.default)({
    validate: v => /[a-z]/.test(v)
  }, props), props.children);
}
/**
 * PropType validation.
 *
 * @type {Object}
 * @private
 */


IncludeLowercaseRule.propTypes = {
  /** Child elements */
  children: _propTypes.default.node
};

/***/ }),

/***/ "../../legacy/form-element/lib/criteria/rules/include-number.js":
/*!**********************************************************************!*\
  !*** ../../legacy/form-element/lib/criteria/rules/include-number.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = IncludeNumberRule;

var _extends2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ "../../../node_modules/@babel/runtime/helpers/extends.js"));

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _criteriaRule = _interopRequireDefault(__webpack_require__(/*! ../criteria-rule */ "../../legacy/form-element/lib/criteria/criteria-rule.js"));
/**
 * Rule component requiring a numeral character.
 *
 * @displayName IncludeNumberRule
 *
 * @param {Object} props Props
 * @returns {ReactElement} ReactElement
 */


function IncludeNumberRule(props) {
  return /*#__PURE__*/_react.default.createElement(_criteriaRule.default, (0, _extends2.default)({
    validate: v => /\d/.test(v)
  }, props), props.children);
}
/**
 * PropType validation.
 *
 * @type {Object}
 * @private
 */


IncludeNumberRule.propTypes = {
  /** Child elements */
  children: _propTypes.default.node
};

/***/ }),

/***/ "../../legacy/form-element/lib/criteria/rules/include-uppercase.js":
/*!*************************************************************************!*\
  !*** ../../legacy/form-element/lib/criteria/rules/include-uppercase.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = IncludeUppercaseRule;

var _extends2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ "../../../node_modules/@babel/runtime/helpers/extends.js"));

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _criteriaRule = _interopRequireDefault(__webpack_require__(/*! ../criteria-rule */ "../../legacy/form-element/lib/criteria/criteria-rule.js"));
/**
 * Rule component requiring an uppercase character.
 *
 * @displayName IncludeUppercaseRule
 *
 * @param {Object} props Props
 * @returns {ReactElement} ReactElement
 */


function IncludeUppercaseRule(props) {
  return /*#__PURE__*/_react.default.createElement(_criteriaRule.default, (0, _extends2.default)({
    validate: v => /[A-Z]/.test(v)
  }, props), props.children);
}
/**
 * PropType validation.
 *
 * @type {Object}
 * @private
 */


IncludeUppercaseRule.propTypes = {
  /** Child elements */
  children: _propTypes.default.node
};

/***/ }),

/***/ "../../legacy/form-element/lib/criteria/rules/index.js":
/*!*************************************************************!*\
  !*** ../../legacy/form-element/lib/criteria/rules/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "IncludeLowercaseRule", ({
  enumerable: true,
  get: function () {
    return _includeLowercase.default;
  }
}));
Object.defineProperty(exports, "IncludeNumberRule", ({
  enumerable: true,
  get: function () {
    return _includeNumber.default;
  }
}));
Object.defineProperty(exports, "IncludeUppercaseRule", ({
  enumerable: true,
  get: function () {
    return _includeUppercase.default;
  }
}));
Object.defineProperty(exports, "MaxCharactersRule", ({
  enumerable: true,
  get: function () {
    return _maxCharacters.default;
  }
}));
Object.defineProperty(exports, "MinCharactersRule", ({
  enumerable: true,
  get: function () {
    return _minCharacters.default;
  }
}));
Object.defineProperty(exports, "MinMaxCharactersRule", ({
  enumerable: true,
  get: function () {
    return _minMaxCharacters.default;
  }
}));
Object.defineProperty(exports, "NoOuterWhitespaceRule", ({
  enumerable: true,
  get: function () {
    return _noOuterWhitespace.default;
  }
}));

var _minCharacters = _interopRequireDefault(__webpack_require__(/*! ./min-characters */ "../../legacy/form-element/lib/criteria/rules/min-characters.js"));

var _maxCharacters = _interopRequireDefault(__webpack_require__(/*! ./max-characters */ "../../legacy/form-element/lib/criteria/rules/max-characters.js"));

var _minMaxCharacters = _interopRequireDefault(__webpack_require__(/*! ./min-max-characters */ "../../legacy/form-element/lib/criteria/rules/min-max-characters.js"));

var _includeNumber = _interopRequireDefault(__webpack_require__(/*! ./include-number */ "../../legacy/form-element/lib/criteria/rules/include-number.js"));

var _includeUppercase = _interopRequireDefault(__webpack_require__(/*! ./include-uppercase */ "../../legacy/form-element/lib/criteria/rules/include-uppercase.js"));

var _includeLowercase = _interopRequireDefault(__webpack_require__(/*! ./include-lowercase */ "../../legacy/form-element/lib/criteria/rules/include-lowercase.js"));

var _noOuterWhitespace = _interopRequireDefault(__webpack_require__(/*! ./no-outer-whitespace */ "../../legacy/form-element/lib/criteria/rules/no-outer-whitespace.js"));

[_minCharacters.default, _maxCharacters.default, _minMaxCharacters.default, _includeNumber.default, _includeUppercase.default, _includeLowercase.default, _noOuterWhitespace.default].forEach(r => {
  r.isRule = true;
});

/***/ }),

/***/ "../../legacy/form-element/lib/criteria/rules/max-characters.js":
/*!**********************************************************************!*\
  !*** ../../legacy/form-element/lib/criteria/rules/max-characters.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = MaxCharactersRule;

var _extends2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ "../../../node_modules/@babel/runtime/helpers/extends.js"));

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _criteriaRule = _interopRequireDefault(__webpack_require__(/*! ../criteria-rule */ "../../legacy/form-element/lib/criteria/criteria-rule.js"));

var _util = __webpack_require__(/*! ../util */ "../../legacy/form-element/lib/criteria/util.js");
/**
 * Rule component requiring a maximum length of characters.
 *
 * @displayName MaxCharactersRule
 *
 * @param {Object} props Props
 * @returns {ReactElement} ReactElement
 */


function MaxCharactersRule(props) {
  var [a, b] = (0, _util.detach)(props, 'max');
  return /*#__PURE__*/_react.default.createElement(_criteriaRule.default, (0, _extends2.default)({
    validate: v => v.length <= a.max
  }, b), props.children);
}
/**
 * PropType validation.
 *
 * @type {Object}
 * @private
 */


MaxCharactersRule.propTypes = {
  /** The maximum number of characters (inclusive) */
  max: _propTypes.default.number.isRequired,

  /** Child elements */
  children: _propTypes.default.node
};

/***/ }),

/***/ "../../legacy/form-element/lib/criteria/rules/min-characters.js":
/*!**********************************************************************!*\
  !*** ../../legacy/form-element/lib/criteria/rules/min-characters.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = MinCharactersRule;

var _extends2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ "../../../node_modules/@babel/runtime/helpers/extends.js"));

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _criteriaRule = _interopRequireDefault(__webpack_require__(/*! ../criteria-rule */ "../../legacy/form-element/lib/criteria/criteria-rule.js"));

var _util = __webpack_require__(/*! ../util */ "../../legacy/form-element/lib/criteria/util.js");
/**
 * Rule component requiring a minimum length of characters.
 *
 * @displayName MinCharactersRule
 *
 * @param {Object} props Props
 * @returns {ReactElement} ReactElement
 */


function MinCharactersRule(props) {
  var [a, b] = (0, _util.detach)(props, 'min');
  return /*#__PURE__*/_react.default.createElement(_criteriaRule.default, (0, _extends2.default)({
    validate: v => v.length >= a.min
  }, b), props.children);
}
/**
 * PropType validation.
 *
 * @type {Object}
 * @private
 */


MinCharactersRule.propTypes = {
  /** The minimum number of characters (inclusive) */
  min: _propTypes.default.number.isRequired,

  /** Child elements */
  children: _propTypes.default.node
};

/***/ }),

/***/ "../../legacy/form-element/lib/criteria/rules/min-max-characters.js":
/*!**************************************************************************!*\
  !*** ../../legacy/form-element/lib/criteria/rules/min-max-characters.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = MinMaxCharactersRule;

var _extends2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ "../../../node_modules/@babel/runtime/helpers/extends.js"));

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _criteriaRule = _interopRequireDefault(__webpack_require__(/*! ../criteria-rule */ "../../legacy/form-element/lib/criteria/criteria-rule.js"));

var _util = __webpack_require__(/*! ../util */ "../../legacy/form-element/lib/criteria/util.js");
/**
 * Rule component requiring a minimum and maximum length of characters.
 *
 * @displayName MinMaxCharactersRule
 *
 * @param {Object} props Props
 * @returns {ReactElement} ReactElement
 */


function MinMaxCharactersRule(props) {
  var [a, b] = (0, _util.detach)(props, 'min', 'max');
  return /*#__PURE__*/_react.default.createElement(_criteriaRule.default, (0, _extends2.default)({
    validate: v => v.length >= a.min && v.length <= a.max
  }, b), props.children);
}
/**
 * PropType validation.
 *
 * @type {Object}
 * @private
 */


MinMaxCharactersRule.propTypes = {
  /** The minimum number of characters (inclusive) */
  min: _propTypes.default.number.isRequired,

  /** The maximum number of characters (inclusive) */
  max: _propTypes.default.number.isRequired,

  /** Child elements */
  children: _propTypes.default.node
};

/***/ }),

/***/ "../../legacy/form-element/lib/criteria/rules/no-outer-whitespace.js":
/*!***************************************************************************!*\
  !*** ../../legacy/form-element/lib/criteria/rules/no-outer-whitespace.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = NoOuterWhitespaceRule;

var _extends2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ "../../../node_modules/@babel/runtime/helpers/extends.js"));

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _criteriaRule = _interopRequireDefault(__webpack_require__(/*! ../criteria-rule */ "../../legacy/form-element/lib/criteria/criteria-rule.js"));
/**
 * Rule component requiring no spaces at start or end of input.
 *
 * @displayName NoOuterWhitespaceRule
 *
 * @param {Object} props Props
 * @returns {ReactElement} ReactElement
 */


function NoOuterWhitespaceRule(props) {
  return /*#__PURE__*/_react.default.createElement(_criteriaRule.default, (0, _extends2.default)({
    validate: v => v.trim() === v
  }, props), props.children);
}
/**
 * PropType validation.
 *
 * @type {Object}
 * @private
 */


NoOuterWhitespaceRule.propTypes = {
  /** Child elements */
  children: _propTypes.default.node
};

/***/ }),

/***/ "../../legacy/form-element/lib/criteria/util.js":
/*!******************************************************!*\
  !*** ../../legacy/form-element/lib/criteria/util.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.combineFunctions = combineFunctions;
exports.detach = detach;
exports.isElementOfComponentType = isElementOfComponentType;
/**
 * Checks if a React element is or inherits from React component.
 *
 * @param {ReactElement} element The element instance
 * @param {ReactComponent} component The target component
 * @returns {Boolean} Result
 * @private
 */

function isElementOfComponentType(element, component) {
  return element.type === component || element.type.prototype instanceof component;
}
/**
 * Takes two functions and combines them into one.
 *
 * @param {Function} funcA First function
 * @param {Function} funcB Second function
 * @returns {Function} Resulting function
 */


function combineFunctions(funcA, funcB) {
  if (typeof funcA !== 'function') {
    throw new Error('First argument is not a function');
  }

  if (typeof funcB !== 'function') {
    throw new Error('Second argument is not a function');
  }

  return function () {
    funcA(...arguments);
    funcB(...arguments);
  };
}
/**
 * Takes an object and names of properties to extract into new object.
 * Results in the extracted object and an object with the remaining properties.
 *
 * @param {Object} obj The target object.
 * @param {...String} args Names of properties to detach.
 * @returns {[Object,Object]} Resulting objects in array
 */


function detach(obj) {
  const a = {};
  const b = {};
  const keys = Object.keys(obj);

  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  args.filter(arg => keys.indexOf(arg) >= 0).map(k => a[k] = obj[k]);
  keys.filter(k => !a[k]).map(k => b[k] = obj[k]);
  return [a, b];
}

/***/ }),

/***/ "../../legacy/form-element/lib/element.js":
/*!************************************************!*\
  !*** ../../legacy/form-element/lib/element.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../../node_modules/@babel/runtime/helpers/defineProperty.js"));

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _enums = __webpack_require__(/*! ./enums */ "../../legacy/form-element/lib/enums.js");

var _id2 = _interopRequireDefault(__webpack_require__(/*! @ux/component-utilities/lib/id */ "../../utils/component-utilities/lib/id.js"));

var _reactValidationContext = __webpack_require__(/*! react-validation-context */ "../../../node_modules/react-validation-context/lib/index.js");

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _textual = _interopRequireDefault(__webpack_require__(/*! ./textual */ "../../legacy/form-element/lib/textual.js"));

var _flip = _interopRequireDefault(__webpack_require__(/*! ./flip */ "../../legacy/form-element/lib/flip.js"));

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      (0, _defineProperty2.default)(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

const undef = void 0;
/**
 * Helper function to discover data to use.
 *
 * @param {String} name Name of the key to search.
 * @param {Array} dataset Data set to search
 * @param {Mixed} fallback Optional fallback data.
 * @returns {Any} The found result.
 * @private
 */

function find(name, dataset, fallback) {
  const data = dataset.filter(obj => typeof obj[name] !== 'undefined')[0];

  if (typeof data !== 'object') {
    return fallback;
  }

  return data[name];
}
/**
 * Base class that contains the validation logic for inputs
 *
 * @displayName FormElement
 *
 * @class Base
 * @public
 */


class Base extends _react.Component {
  constructor(props) {
    super(...arguments);
    const required = this.select('required');
    this.state = {
      hadInput: !required || 'validates' in props || false
    };
    const type = this.select('type');
    this.isFlip = type === 'checkbox' || type === 'radio';
    this.ignoreProps = [];
    this.elements = {};
    this.clear = this.clear.bind(this);
    this.onChange = this.onChange.bind(this);
  }
  /**
   * React lifecycle hook invoked when component is mounted. Unless the overriding `validates`
   * property is present, initially load the Input as valid and only call `validating` on change.
   *
   * @private
   */


  componentDidMount() {
    const {
      props
    } = this;
    const required = this.select('required');

    if ('validates' in props || required) {
      this.validating(this.select('value'), this.select('validate'), (error, isValid) => {
        this.setState({
          isValid,
          error
        });
      });
    }
  }
  /**
   * Handle state changes.
   *
   * @param {Object} prevProps previous this.props.
   * @param {Object} prevState previous this.state.
   */


  componentDidUpdate(prevProps, prevState) {
    // eslint-disable-line max-statements, complexity
    const nextProps = this.props;
    const lookups = [prevState, prevProps, this];

    if ('validates' in nextProps && prevProps.validates !== nextProps.validates) {
      const failure = nextProps.failure || find('failure', lookups);
      this.setState({
        error: failure && !nextProps.validates ? failure : null,
        isValid: nextProps.validates
      });
    }

    const nextValidate = nextProps.validate;
    const validate = find('validate', lookups);
    const value = nextProps.value || find('value', lookups);

    if ('value' in nextProps && nextProps.value !== prevProps.value && 'onValidation' in nextProps) {
      nextProps.onValidation(nextProps.value);
    }

    const failureMessage = nextProps.failure || (typeof nextProps.required !== 'boolean' ? nextProps.required : undef); //
    // Only revalidate the value if both functions exist, are different and their return value is not equal.
    // This will ensure `validate` does not run if identical arrow or bound functions are passed
    // as properties, that are only distinct by memory reference.
    //

    if (nextValidate !== validate) {
      if (nextValidate && validate && nextValidate(value) === validate(value)) {
        return;
      }

      this.validating(value, nextProps.validate, (error, isValid) => {
        this.setState({
          isValid,
          error: isValid === false && prevState.error !== failureMessage ? failureMessage : error
        });
      });
    } else if (prevState.isValid === false && prevState.error !== failureMessage) {
      this.setState({
        error: failureMessage
      });
    }
  }
  /**
   * Clean up and merge the properties that can be passed to the internal input element.
   *
   * @param {Object} data Attributes.
   * @returns {Object} properties that can be spread,
   * @private
   */


  filter(data) {
    const props = this.props;
    const spread = Object.keys(props).filter(v => !(v in data || v in _enums.propTypes.element || this.ignoreProps.includes(v))).reduce((memo, key) => {
      memo[key] = props[key];
      return memo;
    }, {});

    if (this.isFlip && typeof spread.checked !== 'undefined' && typeof spread.defaultChecked !== 'undefined') {
      delete spread.defaultChecked;
    }

    return spread;
  }
  /**
   * Minor mock change handler that should be provided by the developer.
   *
   * @param {Event} event Change event.
   * @param {boolean=} isClear Is the input being cleared by the clear button, defaults to false
   * @private
   */


  onChange(event) {
    let isClear = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    const property = !isClear ? (0, _enums.getStateProperty)((0, _enums.getType)(event)) : 'value';
    const value = !isClear ? (0, _enums.getValue)(event) : this.state.value;
    const props = this.props;
    this.setState({
      hadInput: true
    }); //
    // Check if the input validates and set state appropriately.
    //

    this.validating(value, this.select('validate'), (error, isValid) => {
      this.setState({
        isValid,
        error
      }); //
      // Always call the provided onChange listener as developers might be
      // interested in doing additional validation against event.target.value.
      // Only call the default onChange mock if no value was explicitly passed
      // as property, this prevents duplicating value states.
      //

      if ('onChange' in props) props.onChange(event, value);
      if ('onValidation' in props) props.onValidation(value);
      if (!(property in props)) this.setState({
        [property]: value
      });
    });
  }
  /**
   * Generate all the attributes to be rendered on an input.
   *
   * @returns {Object} Required data to render an input.
   * @private
   */


  attributes() {
    const {
      isValid,
      hadInput
    } = this.state;
    const defaultValue = this.select('defaultValue');
    let {
      id
    } = this.props; // If no `id` prop was specified, fall back to label

    if (!id) {
      const label = this.select('label');
      id = /*#__PURE__*/_react.default.isValidElement(label) // If the label is a React element with an `id` prop... // use its `id` prop; otherwise...
      ? label.props.id : (0, _id2.default)('label', {
        props: this.props
      }); // generate an `id` from it
    }

    const result = {
      id,
      type: this.select('type', 'text'),
      name: this.select('name'),
      //
      // For value, we want to prefer props over the state, as a provided value
      // prop will indicate that the user is controlling the input, instead of
      // being the default uncontrolled input
      //
      value: find('value', [this.props, this.state, this], defaultValue || ''),
      placeholder: this.select('placeholder'),
      readOnly: this.select('readOnly'),
      disabled: this.select('disabled'),
      autoComplete: this.select('autoComplete'),
      autoCorrect: this.select('autoCorrect'),
      autoCapitalize: this.select('autoCapitalize'),
      dir: this.select('dir'),
      spellCheck: this.select('spellCheck'),
      onChange: this.onChange,
      onBlur: this.select('onBlur')
    };

    if (hadInput && isValid === false) {
      result['data-invalid'] = true;
      result['aria-invalid'] = 'true';
    }

    if (!hadInput || isValid === true) {
      result['data-valid'] = true;
    }

    return result;
  }
  /**
   * Clear the input value.
   *
   * @param {Event} event Input event.
   * @public
   */


  clear(event) {
    const input = this.elements.input;

    if (event) {
      event.preventDefault();
      event.persist();
    }

    if (input) {
      this.setState({
        value: ''
      }, function () {
        this.onChange(event, true);
      });
      input.focus();
    }
  }
  /**
   * Get data from either the state, props or set property. Allow empty strings to
   * be returned, especially important around `value` property.
   *
   * @param {String} name Property name.
   * @param {Mixed} fallback Fallback value when property does not exist.
   * @returns {Mixed} The value.
   * @private
   */


  select(name, fallback) {
    return find(name, [this.state || {}, this.props, this], fallback);
  }
  /**
   * Checks if the input validates.
   *
   * @param {Mixed} value String or number representating the value to validate.
   * @param {Function} validator Validator function to use. By default, selects the 'validate' property.
   * @param {Function} done Completion callback.
   * @returns {Mixed} The result of the callback.
   * @private
   */


  validating(value, validator, done) {
    // eslint-disable-line max-statements, complexity
    validator = validator || this.select('validate');
    const required = this.select('required');
    const failure = this.select('failure');
    const input = this.elements.input; //
    // `validates` prop overrides everything else.
    //

    if ('validates' in this.props) {
      if (failure && !this.props.validates) {
        return done(failure, false);
      }

      return done(undef, this.props.validates);
    }

    if (!(required || typeof validator === 'function')) {
      return done(undef, null);
    }

    if (input) {
      value = input.value || value;
    } else if (typeof value === 'undefined') {
      value = this.select('value') || this.select('defaultValue');
    }

    if (typeof value === 'string') {
      value = value.trim();
    } //
    // No value provided, but input is required. Only render as invalid if required.
    // Assume `required` is the error message if it is a string.
    //


    if (!value) {
      return done(required, required ? false : null);
    } // If a message for failure is provided and the input is invalid


    const isValid = validator && validator.call(this, value);

    if (failure && isValid === false) {
      return done(failure, false);
    }

    return done(undef, validator ? isValid : null);
  }
  /**
   * Render the actual component.
   *
   * @returns {React.DOM} Rendered form element.
   * @private
   */


  render() {
    const {
      onValidChange,
      clearable,
      size
    } = this.props;
    const data = this.attributes();
    const {
      isValid: validates,
      hadInput
    } = this.state;

    const props = _objectSpread(_objectSpread({}, data), {}, {
      hadInput,
      validates,
      size,
      elements: this.elements,
      error: this._error(),
      notice: this._notice(),
      controls: this._controls(),
      input: this._input(data),
      required: this._required(),
      hideLabel: this.select('hideLabel'),
      label: this.select('label'),
      grid: this.select('grid'),
      inline: !!this.select('inline'),
      proxy: !!this.select('proxy'),
      ariaLabels: this.props.ariaLabels
    });

    if (this.isFlip) {
      props.design = this.select('design');
      props.style = this.select('toggleStyle', this.props.style);
      props.action = this.select('action');
      props.checked = !!this.select('checked', !!this.select('defaultChecked'));
      props.indeterminate = !!this.select('indeterminate');
    }

    if (clearable) {
      props.clearable = typeof clearable === 'function' ? clearable : this.clear;
    }

    const Input = this.isFlip ? _flip.default : _textual.default;
    return /*#__PURE__*/_react.default.createElement(_reactValidationContext.Validates, {
      name: data.id || data.name,
      validates: validates,
      onValidChange: onValidChange
    }, /*#__PURE__*/_react.default.createElement(Input, props));
  }

}
/**
 * Allowed Validation properties.
 *
 * @enum {Object} propTypes
 * @public
 */


exports["default"] = Base;
Base.propTypes = _objectSpread(_objectSpread({}, _enums.propTypes.element), {}, {
  /** A function that is triggered every time that your button is clicked. */
  action: _propTypes.default.func,

  /** The default value for input element. */
  defaultValue: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.bool]),

  /** True if the input should receive merch styles  */
  merch: _propTypes.default.bool,

  /** The name of the input element, so you know under what name your value will be submitted. */
  name: _propTypes.default.string,

  /** A function that is triggered when the value is updated by the user. */
  onChange: _propTypes.default.func,

  /** A function that is triggered after the value is updated, by the user or programatically.
   *  Note: Do not use this when wrapping with a Critera.Connect component. */
  onValidation: _propTypes.default.func,

  /** For checkbox only. True when checkbox's state is indeterminate. */
  indeterminate: _propTypes.default.bool,

  /**
   * A boolean or string to indicate if the input field is required. If
   * a string is provided, it will be used as the error message.
   */
  required: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.node]),

  /** Indicates if the input is valid.  Overrides the validate function.
   * Note: Use this when the output of validate is the result of higher
   * order properties that are passed in. */
  validates: _propTypes.default.bool,

  /** A function that returns a boolean as indication for invalid or valid
   * state of the input element. It receives the value as first argument.
   * Note: use this when state is internal to the element, e.g. value or
   * onChange should not be passed in as property. */
  validate: _propTypes.default.func,

  /** optional styles passed through to flip's button */
  toggleStyle: _propTypes.default.object,

  /** Screenreader labels for sub-elements */
  ariaLabels: _propTypes.default.shape({
    /** Screen reader label for clear field button */
    clear: _propTypes.default.string
  })
});

/***/ }),

/***/ "../../legacy/form-element/lib/enums.js":
/*!**********************************************!*\
  !*** ../../legacy/form-element/lib/enums.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.defaultProps = void 0;
exports.getStateProperty = getStateProperty;
exports.getType = getType;
exports.getValue = getValue;
exports.propTypes = void 0;

var _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../../node_modules/@babel/runtime/helpers/defineProperty.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _button = _interopRequireDefault(__webpack_require__(/*! @ux/button */ "../../components/button/lib/index.js"));

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      (0, _defineProperty2.default)(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}
/**
 * Default properties used for components.
 *
 * @type {Object}
 * @public
 */


const defaultProps = {
  input: {
    size: 'default',
    value: '',
    grid: {}
  }
};
/**
 * Allowed properties for both the wrapping element and internal input element.
 *
 * @type {Object}
 * @public
 */

exports.defaultProps = defaultProps;
const props = {
  /** DEPRECATED: Please use 'controls'. This indicates that a button has to be rendered on the right side of the label which
   * you can use to hide/show things for a given element. This does require the action property
   * to also be supplied. */
  button: _propTypes.default.node,

  /** DEPRECATED: Please use 'controls'. optional secondary form element button to be used in conjunction with button.
   * If href is provided it will be set on navigation instead of button if both are provided.
   * If any action is provided it will be used on button or ignored if no button is supplied. */
  navigation: _propTypes.default.node,

  /** Controls to be rendered to the right side of the label, this can be any grouping of elements. */
  controls: _propTypes.default.node,
  elements: _propTypes.default.object,

  /** An error element that will be rendered */
  error: _propTypes.default.element,

  /** An object with classNames if you want to render the input elements in a specific grid.
   * It should have a label and input property with the classNames as value. Note: Provide
   * numbers that represent the relative flex property instead of a className. */
  grid: _propTypes.default.object,

  /** Hide the label for the element */
  hideLabel: _propTypes.default.bool,

  /** The ID of the element, if none is provided, an ID will be generated. It is recommended to provide an ID */
  id: _propTypes.default.string,

  /** Indication if the element should be rendered as inline element. */
  inline: _propTypes.default.bool,

  /** A raw input element to be rendered */
  input: _propTypes.default.element,

  /** The label for the element */
  label: _propTypes.default.node.isRequired,

  /** Prevent the user from changing the value of the input. */
  readOnly: _propTypes.default.bool,

  /** Optional small text that needs to be added at the bottom of the input element. Can be used for hints. */
  notice: _propTypes.default.node,

  /** A change handler triggered whenever the input value changes. */
  onChange: _propTypes.default.func,

  /** A change handler triggered whenever the component blurs (is deselected). */
  onBlur: _propTypes.default.func,

  /** Disables the form element */
  disabled: _propTypes.default.bool,

  /** Do not render the element in a fieldset but use an empty div instead. */
  proxy: _propTypes.default.bool,

  /** The type of input element that needs to be rendered. If nothing is provided, the default text type is used instead. */
  type: _propTypes.default.string,

  /** For checkbox only. True when checkbox's state is indeterminate. */
  indeterminate: _propTypes.default.bool,

  /** Marks the form element as required for the form */
  required: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.bool]),

  /** The value for input element. */
  value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.bool])
};
/**
 * Defined seperatly as the UXCore2 bundle will remove propTypes for performance,
 * FormElement._input depends on this data, this reference will keep it around.
 *
 * @type {Object}
 * @public
 */

const propTypes = {
  input: props,
  element: _objectSpread(_objectSpread({}, props), {}, {
    /** A string to specify what, if any, autocomplete data should be used.
     * https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete */
    autoComplete: _propTypes.default.string,

    /** A string to use as an error message under the input element for invalid input. */
    failure: _propTypes.default.string,

    /** Indicates if the input is valid.  Overrides the validate function.
     * Note: Use this when the output of validate is the result of higher
     * order properties that are passed in. */
    validates: _propTypes.default.bool,

    /** A function that returns a boolean as indication for invalid or valid
     * state of the input element. It receives the value as first argument.
     * Note: use this when state is internal to the element, e.g. value or
     * onChange should not be passed in as property. */
    validate: _propTypes.default.func,

    /** A function that is triggered after the value is updated, by the user or programatically.
      *  Note: Do not use this when wrapping with a Critera.Connect component. */
    onValidation: _propTypes.default.func,

    /** Optional string, either large or small, that corresponds to a large/small height and font size
     * of the input field. The default sizes will display if no string is given */
    size: _propTypes.default.string,

    /** Callback for validity changes. See "Validation". */
    onValidChange: _propTypes.default.func,

    /** The design to use for the input, see @ux/button for design options */
    design: _propTypes.default.oneOf(Object.values(_button.default.designs)),

    /** Adds a small clickable clear button on the element to allow users to easily erase the value from the input.*/
    clearable: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.bool])
  })
};
/**
 * Validates event object
 *
 * @param {SyntheticEvent} event Change event of TextInput or input element.
 * @returns {Boolean} Argument is eventlike.
 * @public
 */

exports.propTypes = propTypes;

function isEvent(event) {
  return typeof event === 'object' && 'target' in event;
}
/**
 * Return the value from an event.
 *
 * @param {SyntheticEvent} event Change event of TextInput or input element.
 * @returns {String} Input value.
 * @public
 */


function getValue(event) {
  if (!isEvent(event)) {
    return event;
  }

  const target = event.target || {};
  return target.value;
}
/**
 * Return the type of input element
 *
 * @param {SyntheticEvent} event Change event of TextInput or input element.
 * @returns {String|Undefined} Input type.
 * @public
 */


function getType(event) {
  if (!isEvent(event)) {
    return;
  }

  return event.target.type || 'text';
}
/**
 * Get the property name that should be used to store in state.
 *
 * @param {String} type Input type.
 * @returns {String} Property name.
 * @public
 */


function getStateProperty(type) {
  //
  // For types like checkbox, radio or unknown (i.e. RN Switch) return `checked` as the preferred property
  //
  if (!type || type === 'checkbox' || type === 'radio') {
    return 'checked';
  }

  return 'value';
}

/***/ }),

/***/ "../../legacy/form-element/lib/flip.js":
/*!*********************************************!*\
  !*** ../../legacy/form-element/lib/flip.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.Flip = void 0;

var _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../../node_modules/@babel/runtime/helpers/defineProperty.js"));

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _classNames = _interopRequireDefault(__webpack_require__(/*! @ux/component-utilities/lib/classNames */ "../../utils/component-utilities/lib/classNames.js"));

var _fieldset = _interopRequireDefault(__webpack_require__(/*! @ux/fieldset */ "../../components/fieldset/lib/index.js"));

var _checkmark = _interopRequireDefault(__webpack_require__(/*! @ux/icon/checkmark */ "../../components/icon/checkmark/index.js"));

var _minus = _interopRequireDefault(__webpack_require__(/*! @ux/icon/minus */ "../../components/icon/minus/index.js"));

var _button = _interopRequireDefault(__webpack_require__(/*! @ux/button */ "../../components/button/lib/index.js"));

var _enums = __webpack_require__(/*! ./enums */ "../../legacy/form-element/lib/enums.js");

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      (0, _defineProperty2.default)(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}
/**
 * Renders a radio/checkbox element according to the design specifications.
 *
 * @displayName Flip (Radio / Checkbox) (Web)
 *
 * @class Flip
 * @private
 */


class Flip extends _react.Component {
  /**
   * Render the actual component.
   *
   * @returns {React.DOM} The component.
   * @private
   */
  render() {
    let currentChecked = !!this.props.checked;

    if (typeof this.props.elements.input !== 'undefined') {
      currentChecked = this.props.elements.input.checked;
    } //
    // This forces the input element to be rendered as a correct checkbox/radio
    // element.
    //


    const isButton = this.props.design === 'button' || _button.default.designs.includes(this.props.design);

    const className = (0, _classNames.default)({
      'ux-custom-control-inline': this.props.inline
    }, ['ux-custom-control', `ux-custom-${this.props.type}`]);
    const targetClassName = (0, _classNames.default)({
      'ux-button': isButton,
      [`ux-button-${this.props.design}`]: _button.default.designs.includes(this.props.design)
    }, ['ux-custom-target']);
    const indicatorClassName = 'ux-control-indicator';
    let indicator;

    if (this.props.type === 'checkbox') {
      indicator = this.props.indeterminate ? /*#__PURE__*/_react.default.createElement(_minus.default, {
        className: indicatorClassName
      }) : /*#__PURE__*/_react.default.createElement(_checkmark.default, {
        className: indicatorClassName
      });
    } else if (this.props.type === 'radio') {
      indicator = /*#__PURE__*/_react.default.createElement("span", {
        className: indicatorClassName
      });
    }

    const label = /*#__PURE__*/_react.default.createElement("label", {
      className: (0, _classNames.default)({
        'sr-only': this.props.hideLabel && !isButton
      }),
      htmlFor: this.props.id,
      ref: r => {
        this.props.elements.label = r;
      },
      id: 'label-' + this.props.id
    }, this.props.label);

    const target = /*#__PURE__*/_react.default.createElement("div", {
      className: targetClassName,
      disabled: this.props.disabled,
      role: "switch",
      "aria-checked": currentChecked
    }, this.props.input, !isButton && indicator, label);

    const control = /*#__PURE__*/_react.default.createElement("div", {
      className: className
    }, target, this.props.notice, this.props.error);

    return /*#__PURE__*/_react.default.createElement(_fieldset.default, {
      proxy: !!this.props.proxy
    }, control);
  }

}
/**
 * PropType validation
 *
 * @type {Object}
 * @private
 */


exports.Flip = Flip;
Flip.propTypes = _objectSpread(_objectSpread({}, _enums.propTypes.input), {}, {
  /** The design to use for the input, see @ux/button for design options */
  design: _propTypes.default.oneOf(Object.values(_button.default.designs)),

  /** True if the element (radio or checkbox) is checked */
  checked: _propTypes.default.bool,

  /** For checkbox only. True when checkbox's state is indeterminate. */
  indeterminate: _propTypes.default.bool
});
/**
 *
 * @enum {Object} defaultProps
 * @public
 */

Flip.defaultProps = _objectSpread({}, _enums.defaultProps.input);
var _default = Flip;
exports["default"] = _default;

/***/ }),

/***/ "../../legacy/form-element/lib/index.js":
/*!**********************************************!*\
  !*** ../../legacy/form-element/lib/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "Fieldset", ({
  enumerable: true,
  get: function () {
    return _fieldset.default;
  }
}));
Object.defineProperty(exports, "Flip", ({
  enumerable: true,
  get: function () {
    return _flip.default;
  }
}));
exports.FormElement = void 0;
Object.defineProperty(exports, "Textual", ({
  enumerable: true,
  get: function () {
    return _textual.default;
  }
}));
Object.defineProperty(exports, "Validation", ({
  enumerable: true,
  get: function () {
    return _element.default;
  }
}));
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../../node_modules/@babel/runtime/helpers/defineProperty.js"));

var _extends2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ "../../../node_modules/@babel/runtime/helpers/extends.js"));

var _enums = __webpack_require__(/*! ./enums */ "../../legacy/form-element/lib/enums.js");

var _classNames = _interopRequireDefault(__webpack_require__(/*! @ux/component-utilities/lib/classNames */ "../../utils/component-utilities/lib/classNames.js"));

var _button = _interopRequireDefault(__webpack_require__(/*! @ux/button */ "../../components/button/lib/index.js"));

var _fieldset = _interopRequireDefault(__webpack_require__(/*! @ux/fieldset */ "../../components/fieldset/lib/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _textual = _interopRequireDefault(__webpack_require__(/*! ./textual */ "../../legacy/form-element/lib/textual.js"));

var _element = _interopRequireDefault(__webpack_require__(/*! ./element */ "../../legacy/form-element/lib/element.js"));

var _flip = _interopRequireDefault(__webpack_require__(/*! ./flip */ "../../legacy/form-element/lib/flip.js"));

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      (0, _defineProperty2.default)(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}
/**
 * Render a form element.
 *
 * @constructor
 * @public
 */


class FormElement extends _element.default {
  /**
   * Optionally render controls to appear to the right of the label. This can include the button, href, navigation or combination
   *
   * @returns {React.DOM|Undefined} A React DOM structure if we're supplied controls
   * @private
   */
  _controls() {
    const controls = this.select('controls');
    let navigation = this.select('navigation');
    let button = this.select('button');
    let href = this.select('href');

    if (!controls && !navigation && !button) {
      return null;
    }

    if (typeof button === 'string') {
      if (!href) href = '#';
      button = /*#__PURE__*/_react.default.createElement(_button.default, {
        href: href,
        text: button,
        size: "small",
        design: "inline"
      });
    }

    if (typeof navigation === 'string') {
      if (!href) href = '#';
      navigation = /*#__PURE__*/_react.default.createElement(_button.default, {
        href: href,
        text: navigation,
        size: "small",
        design: "inline"
      });
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "form-element-controls",
      key: "button"
    }, controls || /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, navigation, button));
  }
  /**
   * Optionally render a * (required) indicator
   *
   * @returns {React.DOM|Undefined} A React DOM structure if we're supplied with a notice
   * @private
   */


  _required() {
    if (!this.select('required')) return;
    return /*#__PURE__*/_react.default.createElement("span", {
      className: "req",
      "aria-hidden": "true"
    }, "*");
  }
  /**
   * Generate an input element based on the generated data.
   *
   * @param {Object} data Input creation information.
   * @returns {React.DOM} The generated input element.
   * @private
   */


  _input(data) {
    data = data || this.attributes();
    this.ignoreProps.push('href');
    this.ignoreProps.push('merch');
    this.ignoreProps.push('action');
    this.ignoreProps.push('ariaLabels');
    this.ignoreProps.push('defaultValue');
    const spread = this.filter(data);
    const InputType = data.type !== 'textarea' ? 'input' : 'textarea';

    const input = /*#__PURE__*/_react.default.createElement(InputType, (0, _extends2.default)({}, spread, data, {
      ref: i => {
        this.elements.input = i;
      }
    }));

    return input;
  }
  /**
   * Optionally include a notice in the form element if provided through the
   * options.
   *
   * @returns {React.DOM|Undefined} A React DOM structure if we're supplied with a notice
   * @private
   */


  _notice() {
    if (!this.select('notice')) return;
    return /*#__PURE__*/_react.default.createElement("small", {
      className: "form-text",
      ref: notice => {
        this.elements.notice = notice;
      }
    }, this.select('notice'));
  }
  /**
   * Render an error message below an input.
   *
   * @returns {React.DOM|Undefined} A React DOM structure if we have an error msg.
   * @private
   */


  _error() {
    const {
      error,
      hadInput
    } = this.state;
    const {
      id
    } = this.attributes();
    if (!error || !hadInput) return;
    return /*#__PURE__*/_react.default.createElement("small", {
      className: "form-text form-error",
      role: "alert",
      id: `field-error-${id}`,
      "aria-describedby": id
    }, error);
  }
  /**
   * Generate all the attributes to be rendered on an input.
   *
   * @returns {Object} Required data to render an input.
   * @private
   */


  attributes() {
    const superAttrs = super.attributes();
    const {
      id
    } = superAttrs;
    const {
      error,
      isValid,
      hadInput
    } = this.state;
    return _objectSpread(_objectSpread({}, superAttrs), {}, {
      'aria-labelledby': id && `label-${id}`,
      'aria-disabled': this.select('disabled'),
      'aria-required': !!this.select('required'),
      'aria-describedby': error && hadInput && `field-error-${id}`,
      'aria-invalid': error && hadInput,
      'className': (0, _classNames.default)(this.select('className'), {
        'form-control': !this.isFlip,
        'custom-control-input': this.isFlip,
        'form-control-danger': hadInput && isValid === false,
        'form-control-lg': this.props.size === 'large',
        'form-control-sm': this.props.size === 'small',
        'form-control-merch': this.props.merch
      })
    });
  }

}
/**
 * PropType validation
 *
 * @type {Object}
 * @public
 */


exports.FormElement = FormElement;
FormElement.propTypes = _objectSpread(_objectSpread(_objectSpread({}, _enums.propTypes.element), _element.default.propTypes), {}, {
  /**
   * This only works if you've also set the button or navigation property.
   * Represents the href of the button (or navigation if provided). If the
   * associated property (i.e. button or navigation) is a string and href is not
   * provided it will default to #.
   */
  href: _propTypes.default.string
}); //
// Expose the main FormElement class. Also expose classes that could and are
// used externally.
//

var _default = FormElement;
exports["default"] = _default;

/***/ }),

/***/ "../../legacy/form-element/lib/password.js":
/*!*************************************************!*\
  !*** ../../legacy/form-element/lib/password.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.Password = void 0;

var _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../../node_modules/@babel/runtime/helpers/defineProperty.js"));

var _index = _interopRequireDefault(__webpack_require__(/*! ../lib/index.js */ "../../legacy/form-element/lib/index.js"));

var _button = _interopRequireDefault(__webpack_require__(/*! @ux/button */ "../../components/button/lib/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      (0, _defineProperty2.default)(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
} // eslint-disable-line no-unused-vars

/**
 * Component for rending a password element which can switch the password on and
 * off.
 *
 * @displayName Password
 * @class Password
 * @public
 */


class Password extends _index.default {
  constructor() {
    super(...arguments);
    const component = this; //
    // Conditionally ignore properties,
    //

    if (component.ignoreProps) {
      component.ignoreProps.push('show', 'hide');
    }

    component.type = 'password'; // Default input type.

    component._show = this.props.show || 'show'; // Label for when we're in password mode.

    component._hide = this.props.hide || 'hide'; // Label for when password is visible.
    //
    // By the time the component is processed, we already received and processed
    // the props so we can just correctly set the button so it's rendered as
    // intended.
    //

    component.button = component.props.button || /*#__PURE__*/_react.default.createElement(_button.default, {
      text: component.select('_show'),
      design: "inline",
      onClick: toggleHidden
    });
    /**
     * Switches the button state.
     *
     * @param {Event} ev DOM Event
     * @private
     */

    function toggleHidden(ev) {
      ev.preventDefault();
      const hidden = component.select('type') === 'password';

      const button = /*#__PURE__*/_react.default.createElement(_button.default, {
        text: hidden ? component.select('_hide') : component.select('_show'),
        design: "inline",
        onClick: toggleHidden
      });

      component.setState({
        button,
        type: hidden ? 'text' : 'password'
      });
    }

    component.action = toggleHidden;
  }

  render() {
    return super.render();
  }

}
/**
 * Allowed properties, show and hide are used as action.
 *
 * @type {Object}
 * @public
 */


exports.Password = Password;
Password.propTypes = _objectSpread(_objectSpread({}, _index.default.propTypes), {}, {
  /** Label that is displayed when the user can show his typed password. */
  show: _propTypes.default.node,

  /** Label that is shown when user can hide his showed password. */
  hide: _propTypes.default.node
});
var _default = Password;
exports["default"] = _default;

/***/ }),

/***/ "../../legacy/form-element/lib/quantityselector.js":
/*!*********************************************************!*\
  !*** ../../legacy/form-element/lib/quantityselector.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _id2 = _interopRequireDefault(__webpack_require__(/*! @ux/component-utilities/lib/id */ "../../utils/component-utilities/lib/id.js"));

var _classNames = _interopRequireDefault(__webpack_require__(/*! @ux/component-utilities/lib/classNames */ "../../utils/component-utilities/lib/classNames.js"));

var _button = _interopRequireDefault(__webpack_require__(/*! @ux/button */ "../../components/button/lib/index.js"));

var _plus = _interopRequireDefault(__webpack_require__(/*! @ux/icon/plus */ "../../components/icon/plus/index.js"));

var _minus = _interopRequireDefault(__webpack_require__(/*! @ux/icon/minus */ "../../components/icon/minus/index.js"));

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
} //
// Reusable regular expression for numeric validation.
//


const isNumber = /^(0|[1-9][0-9]*)$/;
/**
* Default aria-labels
*/

const DEFAULT_ARIA_LABELS = {
  increment: 'Add',
  decrement: 'Subtract',
  label: 'Choose how many'
};
/**
 * React component that renders the QuantitySelector. Expect a
 * minimum value, a maximum value and a default value.
 *
 * @displayName Quantity Selector
 * @class QuantitySelector
 *
 * @public
 */

class QuantitySelector extends _react.Component {
  constructor(props) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    super(props, ...args);
    this._onChange = this._onChange.bind(this);
    this._onKeydown = this._onKeydown.bind(this);
    this.getId = this.getId.bind(this);
    this.decrease = this.step.bind(this, -1);
    this.increase = this.step.bind(this, 1);
    this.state = {
      id: this.getId(),
      value: this._safeDefaultValue(props.defaultValue, props)
    };
  }
  /**
   * Sources the component id, first from the id prop, and then from the supplied label
   * component. If neither of those exist, an empty string is returned.
   *
   * @returns {string} computed id for the component
   *
   * @public
   */


  getId() {
    const {
      id,
      label
    } = this.props;
    if (id) return id;else if (label) {
      return /*#__PURE__*/_react.default.isValidElement(label) // If the label is a React element with an `id` prop...
      ? label.props.id // use its `id` prop; otherwise...
      : (0, _id2.default)('label', {
        props: this.props
      }); // generate an `id` from it
    }
    return '';
  }
  /**
   * Attempts to increase the quanity `by` the specified value. If
   * the current value is invalid or the empty string set the value to
   * min if attempting to decrease and max if attempting to increase.
   *
   * @param {number} by Amount to increase by
   * @returns {void}
   *
   * @public
   */


  step(by) {
    const {
      max,
      min
    } = this.props;
    const {
      isError,
      value
    } = this.state;
    const invalid = value > max || value < min || isError === true;
    let nextValue;

    if (value === '' || invalid) {
      nextValue = by === -1 ? min : max;
      return this._setValue(nextValue, true);
    }

    nextValue = value + by;
    if (nextValue < min) nextValue = min;
    if (nextValue > max) nextValue = max;

    this._setValue(nextValue, nextValue <= max && nextValue >= min && isError !== true);
  }
  /**
   * Handles the DOM change event from the text input on this instance.
   * we perform our own pattern matching here because we want the numeric
   * keypad when on mobile, but need the actual value change.
   *
   * @param {Event} evt DOM 'change' event.
   * @returns {void}
   *
   * @private
   */


  _onChange(evt) {
    if (evt && evt.target) {
      const value = evt.target.value;

      if (value === '') {
        return this._setValue(value, true);
      }

      if (isNumber.test(value)) {
        return this._checkRange(parseInt(value, 10));
      }

      this._setValue(value);
    }
  }
  /**
   * Handles the keyboard events to increment or decrement this instance.
   * @param {Event} e Keyboard input event from the browser.
   *
   * @private
   */


  _onKeydown(e) {
    if (e.key === 'ArrowUp' || e.key === 'ArrowDown') {
      e.preventDefault();
      e.stopPropagation();
      this.step(e.key === 'ArrowUp' ? 1 : -1);
    }
  }
  /**
   * Attempts to determine if the value if valid or invalid
   *
   * @param {number} value Desired next value for this component.
   * @returns {void}
   *
   * @private
   */


  _checkRange(value) {
    const {
      max,
      min
    } = this.props;
    return this._setValue(value, value <= max && value >= min);
  }
  /**
   * Returns the value to update the internal state for this instance based on
   * the given `defaultValue`.
   *
   * @param {number} defaultValue Next default value to set.
   * @param {Object} props Current props to set on this instance.
   * @returns {number} Range-safe defaultValue to be used in initial state or `setState`.
   *
   * @private
   */


  _safeDefaultValue(defaultValue, props) {
    const {
      max,
      min,
      onChange
    } = props;
    const noDefault = typeof defaultValue === 'undefined';
    let value = noDefault ? this.state && this.state.value || min : defaultValue; //
    // Remark (indexzero): should we police for negative min and/or max values?
    //

    if (typeof value === 'number') {
      if (value > max) value = max;
      if (value < min) value = min;
    }

    if (onChange && !noDefault) {
      onChange(value, true);
    }

    return value;
  }
  /**
   * Explicitly sets the value and removes any error state that might
   * exist. This method performs no validation and assumes the value
   * to be validated already.
   *
   * @param {number} value Next value for this component.
   * @param {boolean} isValid Value indicating if the value provided is valid.
   *
   * @private
   */


  _setValue(value, isValid) {
    const {
      onChange
    } = this.props;
    const nextState = {
      value,
      isError: true
    };

    if (isValid) {
      nextState.isError = null;
    }

    if (onChange) {
      onChange(value, isValid || false);
    }

    this.setState(nextState);
  }
  /**
   * Ensure that if a new `defaultValue` is provided update all state accordingly
   * @param  {Object} prevProps Previous set of properties set on this instance.
   */


  componentDidUpdate(prevProps) {
    if (this.props.defaultValue !== prevProps.defaultValue) {
      this.setState({
        value: this._safeDefaultValue(this.props.defaultValue, this.props)
      });
    }
  }
  /**
   * Render the QuantitySelector. Depending on the value the "-" and "+" buttons will
   * be disabled.
   *
   * @returns {ReactElement} QuantitySelector with appropriate value.
   *
   * @private
   */


  render() {
    // eslint-disable-line complexity
    const {
      max,
      min,
      errorMessage,
      disabled,
      label,
      ariaLabels
    } = this.props;
    const {
      id,
      value,
      isError
    } = this.state;
    const invalid = isError || value > max || value < min;
    const classname = (0, _classNames.default)('ux-quantity-selector', {
      'has-danger': isError
    });
    return /*#__PURE__*/_react.default.createElement("div", {
      className: classname
    }, label && /*#__PURE__*/_react.default.createElement("label", {
      htmlFor: id,
      id: `label-${id}`
    }, label), /*#__PURE__*/_react.default.createElement("div", {
      className: "input-group form-control",
      "aria-labelledby": label ? `label-${id}` : null,
      "aria-label": !label ? ariaLabels.label : null,
      role: "spinbutton",
      tabIndex: "-1",
      onKeyDown: this._onKeydown,
      "aria-valuemin": min,
      "aria-valuemax": max,
      "aria-valuenow": value
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      design: "control",
      icon: /*#__PURE__*/_react.default.createElement(_minus.default, null),
      onClick: this.decrease,
      disabled: disabled || value !== '' && !invalid && value <= min,
      "aria-label": ariaLabels.decrement
    }), /*#__PURE__*/_react.default.createElement("input", {
      id: id,
      type: "tel",
      disabled: disabled,
      value: value,
      onChange: this._onChange,
      className: "ux-quantity-selector-text form-control"
    }), /*#__PURE__*/_react.default.createElement(_button.default, {
      design: "control",
      icon: /*#__PURE__*/_react.default.createElement(_plus.default, null),
      onClick: this.increase,
      disabled: disabled || value !== '' && !invalid && value >= max,
      "aria-label": ariaLabels.increment
    })), isError && /*#__PURE__*/_react.default.createElement("div", {
      className: "form-text form-error",
      role: "alert"
    }, errorMessage));
  }

}
/**
 * Default property values.
 *
 * @type {Object}
 *
 * @public
 */


exports["default"] = QuantitySelector;
QuantitySelector.defaultProps = {
  disabled: false,
  min: 0,
  ariaLabels: DEFAULT_ARIA_LABELS
};
/**
 * Property validation.
 *
 * @type {Object}
 *
 * @public
 */

QuantitySelector.propTypes = {
  /** Id for input control to associate a label with */
  id: _propTypes.default.string,

  /** Label component associated with the quantity selector */
  label: _propTypes.default.node,

  /** Change the value of the input field */
  onChange: _propTypes.default.func,

  /** Message when error happens */
  errorMessage: _propTypes.default.string.isRequired,

  /** Maximum number the quantity can be selected up to */
  max: _propTypes.default.number.isRequired,

  /** Minimum number the quantity can be selected down to */
  min: _propTypes.default.number,

  /** Default value of the input field */
  defaultValue: _propTypes.default.number,

  /** Sets the disabled state of the button */
  disabled: _propTypes.default.bool,

  /** Screenreader labels for sub-elements */
  ariaLabels: _propTypes.default.shape({
    /** Screen reader label for "increment" double left chevron button */
    increment: _propTypes.default.string,

    /** Screen reader label for "decrement" double left chevron button */
    decrement: _propTypes.default.string,

    /** Screen reader label for the quantity selector as a whole */
    label: _propTypes.default.string
  })
};

/***/ }),

/***/ "../../legacy/form-element/lib/radio.js":
/*!**********************************************!*\
  !*** ../../legacy/form-element/lib/radio.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.Radio = void 0;

var _index = _interopRequireDefault(__webpack_require__(/*! ../lib/index.js */ "../../legacy/form-element/lib/index.js"));
/**
 * Interface for creating radio elements. Note: this code is also used by React Native to set the type
 * of the Form Element component.
 *
 * @displayName Radio
 * @class Radio
 * @public
 */


class Radio extends _index.default {
  constructor() {
    super(...arguments);
    this.type = 'radio';
    this.isFlip = true;
  }

  render() {
    return super.render();
  }

}

exports.Radio = Radio;
var _default = Radio;
exports["default"] = _default;

/***/ }),

/***/ "../../legacy/form-element/lib/search.js":
/*!***********************************************!*\
  !*** ../../legacy/form-element/lib/search.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.DefaultItem = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/objectWithoutProperties */ "../../../node_modules/@babel/runtime/helpers/objectWithoutProperties.js"));

var _extends2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ "../../../node_modules/@babel/runtime/helpers/extends.js"));

var _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../../node_modules/@babel/runtime/helpers/defineProperty.js"));

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _ripOut = _interopRequireDefault(__webpack_require__(/*! rip-out */ "../../../node_modules/rip-out/index.js"));

var _lodash = _interopRequireDefault(__webpack_require__(/*! lodash.escaperegexp */ "../../../node_modules/lodash.escaperegexp/index.js"));

var _debounce = _interopRequireDefault(__webpack_require__(/*! debounce */ "../../../node_modules/debounce/index.js"));

var _button = _interopRequireDefault(__webpack_require__(/*! @ux/button */ "../../components/button/lib/index.js"));

var _index = _interopRequireDefault(__webpack_require__(/*! ../lib/index.js */ "../../legacy/form-element/lib/index.js"));

var _search = _interopRequireDefault(__webpack_require__(/*! @ux/icon/search */ "../../components/icon/search/index.js"));

var _classNames = _interopRequireDefault(__webpack_require__(/*! @ux/component-utilities/lib/classNames */ "../../utils/component-utilities/lib/classNames.js"));

var _scrollIntoView = _interopRequireDefault(__webpack_require__(/*! @ux/component-utilities/lib/scroll-into-view */ "../../utils/component-utilities/lib/scroll-into-view.js"));

var _dropdown = __webpack_require__(/*! @ux/dropdown */ "../../components/dropdown/lib/index.js");

const _excluded = ["placeholder", "clearable", "className", "ariaLabels", "id"];

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      (0, _defineProperty2.default)(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

const has = Object.prototype.hasOwnProperty;

const DefaultItem = _ref => {
  let {
    item,
    onSelect,
    selected
  } = _ref;
  return /*#__PURE__*/_react.default.createElement(_dropdown.DropdownItem, {
    onClick: () => {
      onSelect(item);
      return true;
    },
    active: selected
  }, item);
};

exports.DefaultItem = DefaultItem;
DefaultItem.defaultProps = {
  onSelect: () => {}
};
DefaultItem.propTypes = {
  item: _propTypes.default.string.isRequired,
  onSelect: _propTypes.default.func,
  selected: _propTypes.default.bool
};
/**
* Default aria-labels
*/

const DEFAULT_ARIA_LABELS = {
  searchLabel: 'Search box',
  searchButton: 'Search button',
  label: 'Search'
};
/**
 * Define propTypes to prevent removal for PROD builds.
 *
 * @type {Object}
 * @private
 */

const propTypes = {
  /** AutoCapitalize setting for form element, 'off' means no autocapitalize */
  autoCapitalize: _propTypes.default.string,

  /** AutoComplete setting for the form element, only applicable if no data is present */
  autoComplete: _propTypes.default.string,

  /** AutoCorrect setting for form element, 'off' means no autocorrect */
  autoCorrect: _propTypes.default.string,

  /** Button will be included */
  button: _propTypes.default.bool,

  /** Text to include on button */
  buttonText: _propTypes.default.node,

  /** Sets button type, defaults to submit. */
  buttonType: _propTypes.default.oneOf(['submit', 'button']),

  /** passDownProps for the internal Button component. */
  buttonProps: _propTypes.default.object,

  /** Classes applied */
  className: _propTypes.default.string,

  /** When true, a clear button will be shown when there's content in the searchbox, when Func, the higher order component wrapping searchBox should manage state.value to clear content. */
  clearable: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.func]),

  /** The current filtered subset of props.data being displayed for any filter */
  data: _propTypes.default.array,

  /** Debounce your inputs for fast react */
  debounce: _propTypes.default.number,

  /** Determines the direction of typing, 'ltr' means left to right */
  dir: _propTypes.default.string,

  /** This flag determines if the results should be shown when the list has been truncated using the maxResults property. When true the flyout will remain hidden until the number of filtered results is less than equal to maxResults */
  hideTruncatedResults: _propTypes.default.bool,

  /** The active filter of the instance. This will only change after any potential debouncing has occurred.*/
  filter: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.func]),

  /** This indicates that a button has to be rendered on the right side of the searchbox and indicates the icon name that should be displayed */
  icon: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.elementType]),

  /** Unique id to pass to the FormElement Component */
  id: _propTypes.default.string,

  /** A max number of results to return. */
  maxResults: _propTypes.default.number,

  /** A change handler triggered whenever the input value changes. */
  onChange: _propTypes.default.func,

  /** Handles onchange event for the searchbox. Sets up states and decides filtered data. */
  onFilter: _propTypes.default.func,

  /** Callback function that is sent to each rendered item. It is triggered on-select of the item or if `onSearch` is not provided and search is triggered. */
  onSelect: _propTypes.default.func,

  /** An event handler triggered when the search is triggered. If not provided, `onSelect` is called. */
  onSearch: _propTypes.default.func,

  /** Placeholder text to be displayed in the searchbox */
  placeholder: _propTypes.default.string,

  /** If set, will be invoked to render each item in props.data. */
  renderItem: _propTypes.default.func,

  /** Allow the search to be cleared externally */
  reset: _propTypes.default.bool,

  /** Provide some results when query returns empty */
  resultsOnEmpty: _propTypes.default.bool,

  /** Size of the component */
  size: _propTypes.default.string,

  /** SpellCheck setting for form element, false means no spellcheck */
  spellCheck: _propTypes.default.bool,

  /** If data is an object, the value of this property determines the name of the property that holds the string to filter through */
  text: _propTypes.default.string,

  /** Function called on each piece of data to transform it into a string. */
  transform: _propTypes.default.func,

  /** The value for input. */
  value: _propTypes.default.string,

  /** Screenreader labels for search */
  ariaLabels: _propTypes.default.shape({
    /** Screen reader label for search input bar.  */
    searchLabel: _propTypes.default.string,

    /** Screen reader label for search button when it doesn't have text in it. Used when only icon is used */
    searchButton: _propTypes.default.string,

    /** Screen reader label for search component */
    label: _propTypes.default.string
  })
};
/**
 * Search control creates an input control that filters a provided list of objects.
 *
 * @displayName Search
 * @class Search
 * @public
 */

class Search extends _react.Component {
  constructor() {
    super(...arguments);
    this.onElementValueChange = this.onElementValueChange.bind(this);
    this.onFilterChange = this.onFilterChange.bind(this);
    this.onKeyDown = this.onKeyDown.bind(this);
    this.onSelect = this.onSelect.bind(this);
    this.onSelected = this.onSelected.bind(this);
    this.builtInFilter = this.builtInFilter.bind(this);
    this.builtInTransform = this.builtInTransform.bind(this);
    this.clear = this.clear.bind(this);
    this.onFocus = this.onFocus.bind(this);
    this.onBlur = this.onBlur.bind(this);
    this.setStateAndClose = this.setStateAndClose.bind(this);
    this.preventBlur = this.preventBlur.bind(this);
    this.calledWarn = false;

    if (this.props.debounce) {
      this.onFilterChange = (0, _debounce.default)(this.onFilterChange, this.props.debounce);
    } // initial state


    this.state = this.state || {};
    this.state = _objectSpread(_objectSpread({}, this.state), {}, {
      data: [],
      filter: '',
      keyboardSelectionIndex: -1,
      open: false,
      preventBlur: false,
      suggestion: '',
      suggestionEnabled: this.shouldEnableSuggestion(this.props),
      value: this.props.value
    });

    this._warn();
  }
  /**
   *  console warning about missing id for accessibility purposes
   */


  _warn() {
    if (false) {}

    if (!this.props.id && !this.calledWarn) {
      this.calledWarn = true;
      console.warn('Warning: <Search> requires an id prop to be fully accessible.');
      /* eslint-disable-line */
    }
  }
  /**
   * @returns {function} Transformation function that can be used to transform a datum to a string.
   */


  get transform() {
    return typeof this.props.transform === 'function' ? this.props.transform : this.builtInTransform;
  }
  /**
   * Apply filtering to data.
   *
   * @param {string} dataArray the data array to filter. It can be an array of string or an array of objects.
   * @param {string} value the string to filter data by. Uses state.filter by default
   * @returns {array} an array containing data that was not filtered out
   * @private
   */


  applyFilter(dataArray, value) {
    if (!value && !this.props.resultsOnEmpty) {
      return [];
    }

    const {
      transform
    } = this;
    const customFilter = typeof this.props.filter === 'function';
    const {
      maxResults,
      hideTruncatedResults
    } = this.props;
    const results = [];
    let numResults = 0;
    dataArray.every(data => {
      const includeItem = customFilter ? this.props.filter(data, value) : this.builtInFilter(transform(data), value);

      if (includeItem) {
        results.push(data);
        numResults++;
      }

      return hideTruncatedResults ? numResults <= maxResults // allow overrun by one to detect exceeding maxResults
      : numResults < maxResults;
    });
    return hideTruncatedResults && numResults > maxResults ? [] : results;
  }
  /**
   * Transform a datum into a string that can be used for rendering and filtering.
   *
   * @param {string|Object} datum The datum to transform.
   * @returns {string} A string representation of the datum, or undefined.
   * @private
   */


  builtInTransform(datum) {
    if (typeof datum === 'string') return datum;
    const key = this.props.text || null;

    if (has.call(datum, key)) {
      return datum[key].toString();
    }
  }
  /**
   * Performs the filter operation on `props.filter` taking into account the default
   * states (startsWith, endsWith, and includes).
   *
   * @param   {string} datum Item within `props.data` to potentially include in results
   * @param   {string} value Current search value
   * @returns {boolean} Value indicating if `datum` should be included in results.
   */


  builtInFilter(datum, value) {
    if (!datum) return false;
    const lowerDatum = datum.toLowerCase();
    const lowerValue = (value || '').toLowerCase();
    let {
      startsWith,
      endsWith,
      includes
    } = this.props.filter || {};

    if (!startsWith && !endsWith && !includes) {
      startsWith = true;
      endsWith = true;
    }

    const firstIndex = lowerDatum.indexOf(lowerValue);

    if (startsWith && firstIndex === 0 || includes && ~firstIndex) {
      return true;
    }

    const lastIndex = lowerDatum.lastIndexOf(lowerValue);

    if (endsWith && lastIndex !== -1 && lastIndex === lowerDatum.length - lowerValue.length) {
      return true;
    }

    return false;
  }
  /**
   * clears the control.
   *
   * @private
   */


  clear() {
    this.onFilterChange('');
  }
  /**
   * Returns suggestion based on passed in data and filter.
   *
   * @param {string} data the data array to suggest from
   * @param {string} value the string to filter data by. Uses state.filter by default
   * @returns {string} suggested text
   * @private
   */


  getSuggestion(data, value) {
    value = value || this.state.filter;

    if (this.state.keyboardSelectionIndex >= 0) {
      const item = data[this.state.keyboardSelectionIndex];
      return item ? this.transform(item) : '';
    }

    const transformedData = data.map(this.transform);
    const escapedValue = (0, _lodash.default)(value);
    const reg = new RegExp('\\b' + escapedValue + '\\w*\\b', 'gi');
    const lowerValue = value.toLowerCase();

    for (let i = 0; i < transformedData.length; i++) {
      if (!transformedData[i] || transformedData[i].toLowerCase() === lowerValue) continue;
      const matches = transformedData[i].match(reg);
      if (matches) return transformedData[i];
    }

    return '';
  }
  /**
   * Sets up states and decides filtered data.
   *
   * @param {string} value the string to filter data by. Defaults to state.filter
   * @returns {Array} filtered data
   * @private
   */


  filterBy(value) {
    let filteredData = [];
    value = value || value === '' ? value : this.state.filter;

    if (value || this.props.resultsOnEmpty) {
      filteredData = this.applyFilter(this.props.data, value.toLowerCase());
    }

    const suggestion = this.state.suggestionEnabled ? this.getSuggestion(filteredData, value) : '';
    this.setState({
      suggestion: suggestion,
      open: filteredData.length > 0,
      data: filteredData,
      filter: value,
      value
    });
    this.props.onFilter(value, filteredData);
    return filteredData;
  }
  /**
   * Prevents the component from triggering onBlur, ie: when you click on a list
   * item.
   *
   * @private
   */


  preventBlur() {
    this.setState({
      preventBlur: true
    });
  }
  /**
   * Invokes `setState` with the `extraState` provided along with the
   * necessary state to close this instance. Reduces duplication of these
   * properties throughout the code.
   *
   * @param {Object} extraState Additional state information to set with close.
   */


  setStateAndClose(extraState) {
    this.setState(_objectSpread(_objectSpread({}, extraState), {}, {
      open: false,
      preventBlur: false,
      suggestion: this.state.suggestion
    }));
  }
  /**
   * Checks if suggestions should be enabled.
   *
   * @param {Object} props Properties (this.props or nextProps) to determine if suggestion should be enabled.
   * @returns {bool} Returns true only if the filter is startsWith exclusively, otherwise false
   */


  shouldEnableSuggestion(props) {
    const {
      filter
    } = props;
    return filter && typeof filter === 'object' && filter.startsWith && !filter.includes && !filter.endsWith;
  }
  /**
   * Handles the arrows keyboard action.
   *
   * @param {object} e Event object sent from the browser
   * @private
   */


  onArrowUpDown(e) {
    if (!this.state.open) {
      return;
    }

    let {
      keyboardSelectionIndex
    } = this.state;
    const delta = e.key === 'ArrowDown' ? 1 : -1;

    if (keyboardSelectionIndex === -1 && e.key === 'ArrowUp') {
      keyboardSelectionIndex = 0;
    }

    keyboardSelectionIndex += delta; // Wraparound of keyboardSelectionIndex to be within [0..data.length-1] range

    const dataLength = this.state.data.length;
    keyboardSelectionIndex = (keyboardSelectionIndex + dataLength) % dataLength;
    this.setState({
      keyboardSelectionIndex,
      suggestion: keyboardSelectionIndex >= 0 ? this.transform(this.state.data[keyboardSelectionIndex]) : this.state.suggestion
    });

    if (this.listContainer && this.listContainer.childNodes[keyboardSelectionIndex]) {
      (0, _scrollIntoView.default)(this.listContainer.childNodes[keyboardSelectionIndex]);
    }

    e.preventDefault();
  }
  /**
   * A change handler triggered whenever the component blurs (is deselected).
   *
   * @private
   */


  onBlur() {
    setTimeout(() => {
      if (!this.state.preventBlur) {
        this.setStateAndClose({
          suggestion: '',
          keyboardSelectionIndex: -1
        });
      }
    }, 1);
  }
  /**
   * Handles onchange event for the searchbox. Gets the value from the event and calls
   * the actual (possibly debounced) handler onFilterChange()
   *
   * @param {object} ev the event object sent from the browser
   * @private
   */


  onElementValueChange(ev) {
    const value = ev.target.value;
    this.setState({
      value
    });
    this.onFilterChange(value);
  }
  /**
   * Handles onchange event for the searchbox. Sets up states and decides filtered data.
   *
   * @param {string} value new input field value
   * @private
   */


  onFilterChange(value) {
    const filteredData = this.filterBy(value);
    this.setState({
      keyboardSelectionIndex: -1
    });
    this.props.onChange(value, filteredData);
  }
  /**
   * Handles focus for the searchbox.
   *
   * @private
   */


  onFocus() {
    this.filterBy(this.state.value);
    this.setState({
      open: this.props.resultsOnEmpty || this.state.data.length > 0,
      preventBlur: false
    });
  }
  /**
   * Fill the textbox when the right arrow is clicked and a suggestion exists.
   *
   * @param {object} e Event object sent from the browser
   * @private
   */


  onKeyDown(e) {
    if (!this.formElement) return;
    const suggestion = this.state.suggestion;

    switch (e.key) {
      case 'ArrowRight':
        if (!this.state.suggestionEnabled || !this.state.suggestion) return;
        this.setState({
          suggestion: '',
          value: suggestion
        });
        this.filterBy(suggestion);
        break;

      case 'Enter':
        {
          const {
            keyboardSelectionIndex
          } = this.state;

          if (this.state.keyboardSelectionIndex >= 0) {
            const item = this.state.data[keyboardSelectionIndex];
            const value = this.transform(item);
            this.setStateAndClose({
              value,
              suggestion: ''
            });

            if (this.props.onSelect) {
              this.props.onSelect(value);
            }
          } else {
            this.onSelected();
          }

          break;
        }

      case 'ArrowDown':
      case 'ArrowUp':
        this.onArrowUpDown(e);
        break;

      default:
        break;
    }
  }
  /**
   * Callback function that is sent to each rendered item. It is triggered
   * on-select of the item.
   *
   * @param {string} value the string that was selected
   * @param {bool} isSearch determines whether to call the `onSearch` or `onSelect` callback
   * @private
   */


  onSelect(value) {
    let isSearch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    this.filterBy(value);
    this.setState({
      open: false,
      suggestion: ''
    });

    if (isSearch && this.props.onSearch) {
      this.props.onSearch(value);
    } else if (this.props.onSelect) {
      this.props.onSelect(value);
    }
  }
  /**
   * Called when the button is clicked. This action is equivalent to a selection.
   *
   * @private
   */


  onSelected() {
    this.onSelect(this.state.value, true);
  }
  /**
    * When props change check to see if suggestionEnabled needs to be changed.
    *
    * @param {Object} prevProps All props being set on this instance.
    * @private
    */


  componentDidUpdate(prevProps) {
    const nextState = {};
    let filter = this.state.value; // If the value prop changes and it's different from the internally tracked state, run a filter update

    if (this.props.value !== prevProps.value && this.props.value !== this.state.value) {
      filter = this.props.value;
      nextState.value = this.props.value;
    }

    if (prevProps.data !== this.props.data) {
      nextState.data = this.props.data;
    }

    if (prevProps.filter !== this.props.filter) {
      nextState.suggestionEnabled = this.shouldEnableSuggestion(this.props);
    }

    if (this.props.reset) {
      filter = '';
    }

    if (Object.keys(nextState).length) {
      this.setState(nextState, () => {
        if (nextState.data || this.props.reset) {
          this.filterBy(filter);
        }
      });
    } else if (this.props.reset && this.state.value) {
      this.filterBy(filter);
    }
  }
  /**
    * Only update on change to props if data, filter, open or reset changed.
    *
    * @param  {Object} nextProps All props being set on this instance.
    * @param  {Object} nextState All state properties for upcoming setState
    * @returns {bool} Returns true if data, filter, open or reset changed
    */


  shouldComponentUpdate(nextProps, nextState) {
    return nextProps.reset || this.props.data !== nextProps.data || this.props.filter !== nextProps.filter || this.state.data !== nextState.data || this.props.value !== nextProps.value || this.state.value !== nextState.value || this.state.open !== nextState.open || this.props.className !== nextProps.className || nextState.open && this.state.keyboardSelectionIndex !== nextState.keyboardSelectionIndex;
  }
  /**
   * Render a button when buttontext or button is defined.
   *
   * @returns {JSX} Button Searchbox button component
   * @private
   */


  renderButton() {
    let Icon;

    if (this.props.icon || this.props.button) {
      Icon = _search.default;

      if (typeof this.props.icon !== 'boolean') {
        Icon = this.props.icon;
      }
    }

    let size;

    if (this.props.size === 'small') {
      size = 'small';
    }

    return Icon && /*#__PURE__*/_react.default.createElement(_button.default, (0, _extends2.default)({}, this.props.buttonProps, {
      "aria-label": !this.props.buttonText ? this.props.ariaLabels.searchButton : null,
      design: "primary",
      icon: /*#__PURE__*/_react.default.createElement(Icon, null),
      type: this.props.buttonType,
      onClick: this.onSelected,
      size: size,
      text: this.props.buttonText,
      "aria-controls": this.props.id ? `${this.props.id}-input` : undefined
    }));
  }
  /**
   * Render the list items based.
   *
   * @returns {JSX} the list component
   */


  renderList() {
    if (this.state.open) {
      const {
        keyboardSelectionIndex
      } = this.state;
      const {
        transform
      } = this;
      return /*#__PURE__*/_react.default.createElement("div", {
        role: "listbox",
        tabIndex: "-1",
        className: "ux-search-list-container dropdown-menu",
        onMouseDown: this.preventBlur,
        id: this.props.id ? `${this.props.id}-listBox` : undefined,
        ref: c => {
          this.listContainer = c;
        }
      }, this.state.data.map((item, index) => {
        if (typeof this.props.renderItem === 'function') {
          return this.props.renderItem(transform(item), index, this.onSelect, item, index === keyboardSelectionIndex);
        }

        return /*#__PURE__*/_react.default.createElement(DefaultItem, {
          role: "option",
          key: index,
          item: transform(item),
          onSelect: this.onSelect,
          selected: index === keyboardSelectionIndex
        });
      }));
    }
  }
  /**
   * Get the suggestion div.
   *
   * @returns {JSX} the lookahead component
   * @private
   */


  renderLookAhead() {
    const filter = this.state.filter || '';
    const suggestion = this.state.suggestion;
    if (!suggestion) return '';
    const lookaheadWidth = this.formElement.elements.input.offsetWidth; // This is the width of the space between the end of the form-element
    // and the clearable with a bit of extra space to make it look nice.
    // This allows the lookahead text to not go underneath the clearable icon

    const clearableIconSpacing = 65;
    const finalSize = lookaheadWidth - clearableIconSpacing;
    const remainder = suggestion.substring(filter.length);
    return /*#__PURE__*/_react.default.createElement("div", {
      "aria-hidden": "true",
      tabIndex: "-1",
      onKeyDown: this.onKeyDown,
      onMouseDown: this.preventBlur,
      onClick: () => {
        if (this.formElement) this.formElement.elements.input.focus();
      },
      className: "ux-search-lookahead"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "ux-search-lookahead-filter",
      style: {
        visibility: 'hidden'
      }
    }, filter), /*#__PURE__*/_react.default.createElement("span", {
      className: "ux-search-lookahead-remainder",
      style: {
        width: finalSize
      }
    }, remainder));
  }

  render() {
    const _this$props = this.props,
          {
      placeholder,
      clearable,
      className,
      ariaLabels,
      id
    } = _this$props,
          props = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
    const {
      suggestion,
      suggestionEnabled,
      value,
      open
    } = this.state;
    const unknownProps = (0, _ripOut.default)(props, ...Object.keys(propTypes));
    const clsx = (0, _classNames.default)('input-group', 'ux-search', className, {
      open
    });
    const placeholderText = !suggestion.length || !suggestionEnabled ? placeholder : '';
    const autoComplete = props.autoComplete || (props.data && props.data.length ? 'off' : 'on');
    const dataLength = props.data && props.data.length;
    return /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({
      role: dataLength ? 'combobox' : 'search',
      "aria-haspopup": dataLength ? 'listbox' : null,
      "aria-expanded": open ? 'true' : 'false',
      "aria-owns": id ? `${id}-listbox` : undefined,
      className: clsx
    }, unknownProps, {
      "aria-label": ariaLabels.label,
      id: id ? `label-${id}` : undefined
    }), /*#__PURE__*/_react.default.createElement(_index.default, {
      "aria-label": ariaLabels.searchLabel,
      "aria-autocomplete": "list",
      label: "",
      id: id,
      value: value,
      name: "searchText",
      autoComplete: autoComplete,
      ref: c => {
        this.formElement = c;
      },
      className: "form-control",
      onChange: this.onElementValueChange,
      onKeyDown: this.onKeyDown,
      onFocus: this.onFocus,
      onBlur: this.onBlur,
      placeholder: placeholderText,
      size: this.props.size,
      clearable: clearable === true ? this.clear : clearable,
      autoCorrect: this.props.autoCorrect,
      autoCapitalize: this.props.autoCapitalize,
      dir: this.props.dir,
      spellCheck: this.props.spellCheck
    }), suggestionEnabled && this.renderLookAhead(), this.renderList(), /*#__PURE__*/_react.default.createElement("span", {
      className: "input-group-btn"
    }, this.renderButton()));
  }

}
/**
 * Property validation.
 *
 * @type {Object}
 * @public
 */


exports["default"] = Search;
Search.propTypes = propTypes;
/**
 * Default properties of the control
 *
 * @type {Object}
 * @public
 */

Search.defaultProps = {
  button: false,
  buttonText: '',
  buttonType: 'submit',
  buttonProps: {},
  className: '',
  clearable: true,
  data: [],
  debounce: 0,
  hideTruncatedResults: false,
  icon: _search.default,
  filter: {
    startsWith: true
  },
  maxResults: Infinity,
  onChange: function () {},
  onFilter: function () {},
  onSelect: function () {},
  placeholder: '',
  reset: false,
  renderItem: null,
  resultsOnEmpty: false,
  size: 'default',
  text: '',
  value: '',
  ariaLabels: DEFAULT_ARIA_LABELS
};

/***/ }),

/***/ "../../legacy/form-element/lib/telephone-input.js":
/*!********************************************************!*\
  !*** ../../legacy/form-element/lib/telephone-input.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _button = _interopRequireDefault(__webpack_require__(/*! @ux/button */ "../../components/button/lib/index.js"));

var _index = _interopRequireDefault(__webpack_require__(/*! ../lib/index.js */ "../../legacy/form-element/lib/index.js"));

var _classNames = _interopRequireDefault(__webpack_require__(/*! @ux/component-utilities/lib/classNames */ "../../utils/component-utilities/lib/classNames.js"));

var _useClickOutsideHoc = _interopRequireDefault(__webpack_require__(/*! @ux/component-utilities/lib/use-click-outside-hoc */ "../../utils/component-utilities/lib/use-click-outside-hoc.js"));

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}
/**
 * CountryDropdown renders the country selector dropdown for the TelephoneInput
 * @displayName CountryDropdown
 * @class CountryDropdown
 *
 */


class CountryDropdown extends _react.PureComponent {
  /**
   * Render the country dropdown
   *
   * @returns {React.DOM} rendered component
   * @private
   */
  render() {
    const {
      countryData,
      onCountrySelect,
      activeClassName
    } = this.props;
    const selected = this.props.selectedCountry;

    const onSelectedClick = event => onCountrySelect(event, selected);

    return /*#__PURE__*/_react.default.createElement("ul", {
      id: "phoneCountryList",
      className: "dropdown-menu dropdown-menu-items",
      role: "menu"
    }, /*#__PURE__*/_react.default.createElement("div", {
      id: selected.countryKey,
      key: selected.countryKey,
      role: "presentation",
      className: activeClassName,
      onClick: onSelectedClick
    }, /*#__PURE__*/_react.default.createElement("a", {
      role: "menuitem",
      href: '#' + selected.countryKey
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "country-id"
    }, selected.countryKey, " "), /*#__PURE__*/_react.default.createElement("span", {
      className: "country-name"
    }, selected.label, " "), /*#__PURE__*/_react.default.createElement("span", {
      className: "dial-code"
    }, '+' + selected.callingCode, " "))), countryData.map(country => {
      if (country.countryKey === selected.countryKey) {
        return;
      }

      const onClick = event => onCountrySelect(event, country);

      return /*#__PURE__*/_react.default.createElement("div", {
        id: country.countryKey,
        key: country.countryKey,
        role: "presentation",
        className: "dropdown-item",
        onClick: onClick
      }, /*#__PURE__*/_react.default.createElement("a", {
        role: "menuitem",
        href: '#' + country.countryKey
      }, /*#__PURE__*/_react.default.createElement("span", {
        className: "country-id"
      }, country.countryKey, " "), /*#__PURE__*/_react.default.createElement("span", {
        className: "country-name"
      }, country.label, " "), /*#__PURE__*/_react.default.createElement("span", {
        className: "dial-code"
      }, '+' + country.callingCode, " ")));
    }));
  }

}

CountryDropdown.propTypes = {
  /** An array of countries and their associated calling data. */
  countryData: _propTypes.default.array.isRequired,

  /** Selected country object which will render first in the dropdown list before the rest of countryData. */
  selectedCountry: _propTypes.default.object.isRequired,

  /** Styles applied for the active item */
  activeClassName: _propTypes.default.string.isRequired,

  /** Handle country selection, update the phone number with the calling code and notify the parent of the change */
  onCountrySelect: _propTypes.default.func.isRequired
};
const phoneRegEx = /^\+([0-9]){1,3}\.([0-9]){6,14}$/;
const maxLength = 17;
/**
 * TelephoneInput renders a component with country calling code selector
 *
 * @displayName TelephoneInput
 * @class TelephoneInput
 */

class TelephoneInput extends _react.Component {
  // eslint-disable-next-line max-statements
  constructor(props) {
    super(props);
    const {
      countryKey,
      phoneNumber,
      countryData,
      marketId,
      presorted
    } = props;
    const countryDataProps = Array.isArray(countryData) && countryData.length && this.sortCountryData(countryData, marketId, presorted) || [{
      countryKey: 'US',
      label: 'United States',
      callingCode: '1'
    }];
    const normalizedCountryData = this.normalizeCountryData(countryDataProps);
    const parsedPhoneNumber = this.parsePhoneNumber(phoneNumber);
    const phoneCountryKey = this.getCountryKeyFromCallingCode(parsedPhoneNumber.callingCode, countryKey, normalizedCountryData);
    const countryCallingCode = this.getCallingCodeFromCountryKey(countryKey, countryDataProps);
    this.state = {
      showCountryList: false,
      callingCode: parsedPhoneNumber.callingCode || countryCallingCode,
      lineNumber: parsedPhoneNumber.lineNumber,
      countryKey: phoneCountryKey || countryKey,
      countryData: countryDataProps,
      normalizedCountryData,
      hadInput: false,
      inputError: false
    };
    this.onInputBlur = this.onInputBlur.bind(this);
    this.onInputFocus = this.onInputFocus.bind(this);
    this.onInputChange = this.onInputChange.bind(this);
    this.onInputKeyDown = this.onInputKeyDown.bind(this);
    this.onOutsideClick = this.onOutsideClick.bind(this);
    this.onCountryClick = this.onCountryClick.bind(this);
    this.onCountrySelect = this.onCountrySelect.bind(this);
    this.phoneControl = /*#__PURE__*/_react.default.createRef();
  }
  /**
   * After component mounts, call the onChangeHandler for initial validation
   *
   * @returns {void}
   * @private
   */


  componentDidMount() {
    const {
      phoneNumber,
      countryKey
    } = this.props;
    const event = document.createEvent('Event');
    this.props.onChangeHandler(event, phoneNumber, this.validatePhoneNumber(phoneNumber), countryKey);
  }
  /**
   * Focus on input when callingCode change. On Android devices, check
   * to see if the boundary of the selection is less than the calling code
   * prefix. If it is then force cursor to the end.
   *
   * @param {Object} prevProps - previous props
   * @param {Object} prevState - previous state
   * @returns {void}
   * @private
   */

  /* eslint-disable-next-line max-statements, complexity */


  componentDidUpdate(prevProps, prevState) {
    const props = this.props;
    const updates = {};
    const {
      elements: {
        input
      }
    } = this.phoneInput;

    if (!prevState.callingCode && prevState.callingCode !== this.state.callingCode) {
      input.focus();
    } //
    // **ANDROID MOBILE ONLY FIX** Force the cursor to the end of the input
    // if the selectionStart is less than the calling code prefix.
    //


    const {
      lineNumber,
      callingCode
    } = this.state;

    if (lineNumber && callingCode && input.selectionStart < `+${callingCode}.`.length) {
      const phoneNumber = this.state.phoneNumber || this.buildPhoneNumber(callingCode, lineNumber) || '';
      input.selectionStart = input.selectionEnd = phoneNumber.length;
    }

    if (!lineNumber && props.countryKey !== prevProps.countryKey) {
      updates.countryKey = props.countryKey;
      updates.callingCode = this.getCallingCodeFromCountryKey(props.countryKey);
    }

    if (prevProps.phoneNumber !== props.phoneNumber) {
      const parsedNumber = this.parsePhoneNumber(props.phoneNumber);
      const phoneNumber = this.buildPhoneNumber(parsedNumber.callingCode, parsedNumber.lineNumber);
      updates.callingCode = parsedNumber.callingCode;
      updates.lineNumber = parsedNumber.lineNumber;
      updates.phoneNumber = phoneNumber;
    }

    if (props.countryData && props.countryData !== prevProps.countryData) {
      const marketId = props.marketId || prevProps.marketId;
      updates.countryData = this.sortCountryData(props.countryData, marketId, props.presorted);
    }

    if (prevProps.countryData !== props.countryData) {
      updates.normalizedCountryData = this.normalizeCountryData(updates.countryData);
    }

    if (Object.keys(updates).length) {
      this.setState(updates);
    }
  }
  /**
   * Sort the countries by label
   *
   * @param {array} data - data from api
   * @param {string=} marketId - BCP-47 language string to use as locale when comparing entries, defaults to 'en-US'
   * @param {bool=} presorted - indicates if data is already sorted, defaults to false
   * @returns {string} marketId
   * @public
   */


  sortCountryData(data) {
    let marketId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en-US';
    let presorted = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    if (presorted) {
      return data;
    }

    return data.slice().sort(function (a, b) {
      return a.label.localeCompare(b.label, marketId);
    });
  }
  /**
   * Compose a complete phone number from the calling code and line number
   *
   * @param {number} callingCode - Country callingCode
   * @param {string} lineNumber - Phone number
   * @returns {string} Complete phone number
   * @public
   */


  buildPhoneNumber(callingCode, lineNumber) {
    let phoneNumber = '';

    if (callingCode) {
      phoneNumber += '+' + callingCode + '.';
    }

    if (lineNumber) {
      phoneNumber += lineNumber;
    }

    return phoneNumber;
  }
  /**
   * Find the country by calling code
   *
   * @param {string} countryKey Country key
   * @param {array} dataset Optional dataset to use.
   * @returns {number} callingCode
   * @public
   */


  getCallingCodeFromCountryKey(countryKey, dataset) {
    const countryData = dataset || this.state.countryData || [];
    let callingCode = null;

    for (let i = countryData.length; i--;) {
      if (countryData[i].countryKey === countryKey) {
        callingCode = countryData[i].callingCode;
        break;
      }
    }

    return callingCode;
  }
  /**
   * Find the country by calling code.
   * FYI: If there are multiple countries with the same code,
   * it will return the first one.
   *
   * @param {number} callingCode Country callingCode
   * @param {string} countryKey Current country key
   * @param {array} normalizedCountryData Optional dataset to use.
   * @returns {string} countryKey
   * @public
   */


  getCountryKeyFromCallingCode(callingCode, countryKey, normalizedCountryData) {
    if (!countryKey) countryKey = this.state.countryKey;

    if (!normalizedCountryData) {
      normalizedCountryData = this.state.normalizedCountryData || this.normalizeCountryData();
    }

    if (callingCode && normalizedCountryData[callingCode]) {
      if (normalizedCountryData[callingCode].indexOf(countryKey) < 0) {
        countryKey = normalizedCountryData[callingCode][0];
      }
    }

    return countryKey;
  }
  /**
   * Normalize country data by calling code. Ensure US is first for calling
   * code 1.
   *
   * @param {Array} countryData Data to normalize
   * @returns {Object} Normalized country data by calling code
   * @private
   */


  normalizeCountryData(countryData) {
    countryData = countryData || this.state.countryData;
    const normalizedCountryData = {
      1: ['US']
    };

    if (Array.isArray(countryData)) {
      for (let i = countryData.length - 1; i >= 0; i--) {
        const country = countryData[i];

        if (country.countryKey !== 'US') {
          const callingCode = country.callingCode;

          if (!normalizedCountryData[callingCode]) {
            normalizedCountryData[callingCode] = [];
          }

          normalizedCountryData[callingCode].push(country.countryKey);
        }
      }
    }

    return normalizedCountryData;
  }
  /**
   * Handle the country dropdown click
   *
   * @returns {void}
   * @private
   */


  onCountryClick() {
    const show = this.state.showCountryList;
    this.setState({
      showCountryList: !show
    });
  }
  /**
   * Handle country selection, update the phone number with the calling code
   * and notify the parent of the change
   *
   * @param {Object} event - Event for click
   * @param {Object} country - Country object being clicked
   * @returns {void}
   */


  onCountrySelect(event, country) {
    // added to avoid issues with hash routing.
    event.preventDefault();
    const newNumber = this.buildPhoneNumber(country.callingCode, this.state.lineNumber);
    this.setState({
      phoneNumber: newNumber,
      countryKey: country.countryKey,
      callingCode: country.callingCode,
      showCountryList: false
    });
    this.props.onChangeHandler(event, newNumber, this.validatePhoneNumber(newNumber), country.countryKey);
  }
  /**
   * Handle clicking on the document to determine if the country list should be hidden
   *
   * @param {Object} event - Event for click
   * @param {Function} fn - listener for click event
   * @private
   */


  onOutsideClick(event, fn) {
    if (this.state.showCountryList) {
      this.setState({
        outsideListener: fn,
        showCountryList: false
      });
    }
  }
  /**
   * Handle keyboard input change, look up country, render the new phone number
   *
   * @param {Object} event - Event for KeyDown
   * @returns {void}
   * @private
   */


  onInputChange(event) {
    const newValue = event.target.value;
    const parsedPhoneNumber = this.parsePhoneNumber(newValue);
    const countryKey = this.getCountryKeyFromCallingCode(parsedPhoneNumber.callingCode);
    const callingCode = parsedPhoneNumber.callingCode || this.getCallingCodeFromCountryKey(countryKey);
    const newNumber = this.buildPhoneNumber(callingCode, parsedPhoneNumber.lineNumber);
    let hadInput = this.state.hadInput;

    if (this.props.required && !this.state.hadInput) {
      hadInput = true;
    }

    this.setState({
      lineNumber: parsedPhoneNumber.lineNumber,
      phoneNumber: newNumber,
      callingCode,
      countryKey,
      hadInput
    });
    this.props.onChangeHandler(event, newNumber, this.validatePhoneNumber(newNumber), countryKey);
  }
  /**
   * Handle input blur, remove calling code from input if no line number is provided
   *
   * @returns {void}
   * @private
   */


  onInputBlur() {
    const callingCode = this.buildPhoneNumber(this.state.callingCode);
    const phoneInput = this.phoneInput.elements.input.value || '';
    const inputError = this.props.required && this.state.hadInput && phoneInput === '';

    if (phoneInput === callingCode) {
      this.setState({
        lineNumber: null,
        inputError
      });
    }
  }
  /**
   * Handle input focus, hide the country list, populate calling code if empty
   *
   * @param {Object} event - Event for Focus
   * @returns {void}
   * @private
   */


  onInputFocus() {
    const updated = {
      showCountryList: false,
      inputError: false
    };

    if (this.phoneInput.elements.input.value === '') {
      updated.callingCode = this.getCallingCodeFromCountryKey(this.state.countryKey);
    }

    this.setState(updated);
  }
  /**
   * Handle input key down, if down arrow key, show country list
   *
   * @param {Object} event - Event for KeyDown
   * @returns {void}
   * @private
   */

  /* eslint-disable-next-line max-statements, complexity */


  onInputKeyDown(event) {
    let key = event.key;
    const safelistKeys = ['Backspace', 'ArrowLeft', 'ArrowRight', 'ArrowDown', 'Delete', 'Tab']; //
    // Safari@10.1 workaround (and perhaps others), which is lacking a `key` identifiers. This maps each number to
    // their actual value, keys from the safelist are properly identified.
    //

    if (key === 'Unidentified') key = event.keyCode - 48;
    const safeModifierKeys = event.ctrlKey || event.metaKey;

    if (!/^[0-9]$/.test(key) && !safeModifierKeys && !~safelistKeys.indexOf(key)) {
      event.preventDefault();
    } //
    // If key is backspace or delete handle the deletion of characters from index to left
    // and then items right of index and left
    //


    if (key === 'Backspace' || key === 'Delete') {
      const directionModifier = key === 'Delete';
      const {
        value,
        selectionStart,
        selectionEnd
      } = event.target;
      const selection = value.substring(selectionStart, selectionEnd);
      const firstPeriodPos = value.indexOf('.') + 1;

      if (firstPeriodPos) {
        const noSelectionBeforeDot = selectionStart + directionModifier <= firstPeriodPos && selectionStart === selectionEnd;
        const cursorBeforeDotNotFullSel = selectionStart + directionModifier < firstPeriodPos && selection !== value;
        const dotSelectedButNotFullSel = ~selection.indexOf('.') && selection !== value;

        if (noSelectionBeforeDot || cursorBeforeDotNotFullSel || dotSelectedButNotFullSel) {
          event.preventDefault();
        }
      }
    }

    if (!this.state.showCountryList && key === 'ArrowDown') {
      this.setState({
        showCountryList: true
      });
    }
  }
  /**
   * Parse the phone number to determine the calling code and line number
   *
   * @param {string} phoneNumber - Phone number to be parsed
   * @returns {Object} callingCode and lineNumber
   * @public
   */


  parsePhoneNumber(phoneNumber) {
    let callingCode = null;
    let lineNumber = phoneNumber;

    if (phoneNumber && phoneNumber[0] === '+') {
      phoneNumber = phoneNumber.replace('+', '');
      const dotIndex = phoneNumber.indexOf('.');

      if (dotIndex > 0) {
        callingCode = phoneNumber.substring(0, dotIndex);
        lineNumber = phoneNumber.substring(dotIndex + 1);
      }
    }

    return {
      callingCode: callingCode,
      lineNumber: lineNumber
    };
  }
  /**
   * Validate the phone number passes the is required check and regex check
   *
   * @param {string} phoneNumber - Phone number to be parsed
   * @returns {boolean} Does phone number pass regEx text
   * @public
   */


  validatePhoneNumber(phoneNumber) {
    let isValid = true;
    const {
      isRequired
    } = this.props;
    const isEmpty = !phoneNumber || phoneNumber.length === 0;

    if (isRequired) {
      isValid = !isEmpty;
    }

    if (isValid && (isRequired || !isRequired && !isEmpty)) {
      isValid = phoneRegEx.test(phoneNumber);
    }

    return isValid;
  }
  /**
   * Gets the countryData item that should be selected.
   * RIf countryKey is not in data, returns US data or first item in list
   * @returns {Object} countryData item that should be selected
   * @private
   */


  getSelectedCountry() {
    const {
      countryKey,
      countryData
    } = this.state;
    const selectedCountry = countryData.filter(country => country.countryKey === countryKey)[0];

    if (!selectedCountry) {
      if (!countryData.some(country => country.countryKey === 'US')) {
        return countryData[0];
      }

      return {
        callingCode: '1',
        countryKey: 'US',
        label: 'United States'
      };
    }

    return selectedCountry;
  }
  /**
   * Render the country list
   * @param {Object} selected The item that should render as selected
   * @param {string} selected.countryKey The selected item's country key
   * @param {string} selected.callingCode The selected item's calling code
   * @returns {ReactElement} rendered country menu list
   */


  renderCountryList(selected) {
    const {
      showCountryList,
      countryData
    } = this.state;
    const classes = (0, _classNames.default)('dropdown', 'ux-select-dropdown', 'ux-tel-container', {
      open: showCountryList
    });
    return /*#__PURE__*/_react.default.createElement("div", {
      style: {
        top: 'inherit'
      },
      className: classes
    }, /*#__PURE__*/_react.default.createElement(CountryDropdown, {
      selectedCountry: selected,
      activeClassName: "dropdown-item active",
      onCountrySelect: this.onCountrySelect,
      countryData: countryData
    }));
  }
  /**
   * Render the phone component
   *
   * @returns {React.DOM} rendered component
   * @private
   */


  render() {
    const {
      name,
      placeholderText,
      id
    } = this.props;
    const {
      callingCode,
      lineNumber
    } = this.state;
    const phoneNumber = lineNumber ? this.buildPhoneNumber(callingCode, lineNumber) : '';
    const selectedCountry = this.getSelectedCountry();
    const countryList = this.renderCountryList(selectedCountry);
    const keyCode = `${selectedCountry.countryKey} +${selectedCountry.callingCode}`;
    return /*#__PURE__*/_react.default.createElement(_useClickOutsideHoc.default, {
      targetRef: this.phoneControl,
      onClick: this.onOutsideClick
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "form-group",
      ref: this.phoneControl
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "ux-tel-container"
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      className: (0, _classNames.default)('ux-tel-btn', {
        'ux-tel-btn-danger': this.state.inputError
      }),
      id: "basic-addon1",
      onClick: this.onCountryClick,
      as: "select",
      text: keyCode
    }), /*#__PURE__*/_react.default.createElement(_index.default, {
      className: "form-control ctHidden ux-tel-input",
      name: name,
      id: id,
      maxLength: maxLength,
      onBlur: this.onInputBlur,
      onChange: this.onInputChange,
      onFocus: this.onInputFocus,
      onKeyDown: this.onInputKeyDown,
      placeholder: placeholderText,
      label: this.props.label,
      required: this.props.required,
      value: phoneNumber,
      ref: input => {
        this.phoneInput = input;
      },
      type: "tel"
    })), countryList));
  }

}

exports["default"] = TelephoneInput;
TelephoneInput.propTypes = {
  /** An array of countries and their associated calling data. */
  countryData: _propTypes.default.array.isRequired,

  /** The current country. Default is US */
  countryKey: _propTypes.default.string.isRequired,

  /** Id of the input field */
  id: _propTypes.default.string,

  /** If true, indicates a required field */
  isRequired: _propTypes.default.bool,

  /** The label for the Form element */
  label: _propTypes.default.node,

  /** The current market. Default is en-US */
  marketId: _propTypes.default.string.isRequired,

  /** name of the input, useful for form auto completion. Default is phone */
  name: _propTypes.default.string,

  /** Handles initial validation after component mounts, and handles input changes */
  onChangeHandler: _propTypes.default.func.isRequired,

  /** Current phone number with callingCode and lineNumber */
  phoneNumber: _propTypes.default.string,

  /** Text in form field before user input */
  placeholderText: _propTypes.default.string,

  /** If true, the component will not attempt to sort the countryData array. */
  presorted: _propTypes.default.bool,

  /**
   * A boolean or string to indicate if the input field is required. If
   * a string is provided, it will be used as the error message.
   */
  required: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.node])
};
TelephoneInput.defaultProps = {
  isRequired: false,
  name: 'phone',
  presorted: false
};

/***/ }),

/***/ "../../legacy/form-element/lib/textual.js":
/*!************************************************!*\
  !*** ../../legacy/form-element/lib/textual.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.Textual = void 0;

var _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../../node_modules/@babel/runtime/helpers/defineProperty.js"));

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _propTypes = __webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js");

var _classNames = _interopRequireDefault(__webpack_require__(/*! @ux/component-utilities/lib/classNames */ "../../utils/component-utilities/lib/classNames.js"));

var _button = _interopRequireDefault(__webpack_require__(/*! @ux/button */ "../../components/button/lib/index.js"));

var _fieldset = _interopRequireDefault(__webpack_require__(/*! @ux/fieldset */ "../../components/fieldset/lib/index.js"));

var _delete = _interopRequireDefault(__webpack_require__(/*! @ux/icon/delete */ "../../components/icon/delete/index.js"));

var _enums = __webpack_require__(/*! ./enums.js */ "../../legacy/form-element/lib/enums.js");

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      (0, _defineProperty2.default)(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}
/**
 * Renders an input element according to the design specifications.
 *
 * @displayName Textual Input (Web)
 *
 * @class Textual
 * @private
 */


class Textual extends _react.Component {
  /**
   * Render the actual component.
   *
   * @returns {React.DOM} The Component.
   * @private
   */
  render() {
    const props = this.props;
    const length = props.value.length;
    const className = (0, _classNames.default)(props.hideLabel && 'sr-only', 'form-control-label');
    const hasClassName = (0, _classNames.default)({
      'has-danger': props.hadInput && props.validates === false
    });

    const clearButton = props.clearable && !!length && /*#__PURE__*/_react.default.createElement(_button.default, {
      className: "form-element-clear",
      design: 'inline',
      icon: /*#__PURE__*/_react.default.createElement(_delete.default, null),
      "aria-label": props.ariaLabels.clear,
      onClick: props.clearable
    });

    const labelGridClass = (0, _classNames.default)('form-element-header', props.grid && props.grid.label);
    const inputGridClass = (0, _classNames.default)('form-element-textual', props.grid && props.grid.input);
    const hasLabel = props.label || props.required;
    const hasHeader = hasLabel || props.controls;
    return /*#__PURE__*/_react.default.createElement(_fieldset.default, {
      proxy: !!props.proxy,
      className: hasClassName
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "form-element-flex"
    }, hasHeader && /*#__PURE__*/_react.default.createElement("header", {
      className: labelGridClass
    }, hasLabel && /*#__PURE__*/_react.default.createElement("label", {
      htmlFor: props.id,
      ref: label => {
        props.elements.label = label;
      },
      className: className,
      id: `label-${props.id}`
    }, props.label, " ", props.required), props.controls), /*#__PURE__*/_react.default.createElement("div", {
      className: inputGridClass
    }, props.input, clearButton)), props.notice, props.error);
  }

}
/**
 * PropType validation and defaultProperties. Extend default set of properties with web-only input
 * properties.
 *
 * @type {Object}
 * @private
 */


exports.Textual = Textual;
Textual.defaultProps = _objectSpread(_objectSpread({}, _enums.defaultProps.input), {}, {
  ariaLabels: {
    clear: 'Clear field'
  }
});
Textual.propTypes = _objectSpread(_objectSpread({}, _enums.propTypes.input), {}, {
  /** Screenreader labels for sub-elements */
  ariaLabels: (0, _propTypes.shape)({
    /** Screen reader label for clear field button */
    clear: _propTypes.string
  })
});
var _default = Textual;
exports["default"] = _default;

/***/ }),

/***/ "../../legacy/pagination-legacy/lib/index.js":
/*!***************************************************!*\
  !*** ../../legacy/pagination-legacy/lib/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _button = _interopRequireDefault(__webpack_require__(/*! @ux/button */ "../../components/button/lib/index.js"));

var _dropdown = _interopRequireWildcard(__webpack_require__(/*! @ux/dropdown */ "../../components/dropdown/lib/index.js"));

var _ellipsis = _interopRequireDefault(__webpack_require__(/*! @ux/icon/ellipsis */ "../../components/icon/ellipsis/index.js"));

var _chevronDblLeft = _interopRequireDefault(__webpack_require__(/*! @ux/icon/chevron-dbl-left */ "../../components/icon/chevron-dbl-left/index.js"));

var _chevronDblRight = _interopRequireDefault(__webpack_require__(/*! @ux/icon/chevron-dbl-right */ "../../components/icon/chevron-dbl-right/index.js"));

var _chevronLeft = _interopRequireDefault(__webpack_require__(/*! @ux/icon/chevron-left */ "../../components/icon/chevron-left/index.js"));

var _chevronRight = _interopRequireDefault(__webpack_require__(/*! @ux/icon/chevron-right */ "../../components/icon/chevron-right/index.js"));

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}
/**
 * Generates and returns and array of numbers starting from start and up to end (not including), going in step increments
 *
 * @param {number} start=0 start for the range of numbers
 * @param {number} end=start end (not including) for the range
 * @param {number} step=1 increment to use while generating numbers
 * @returns {array} Array representing the range of numbers
 * @public
 */


function range() {
  let start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  let end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : start;
  let step = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
  return [...Array((end - start) / step)].map((v, i) => start + i * step);
}
/**
 * Ponyfill (not a Polyfill) for Number.isInteger. Returns a value indicating
 * if `num` is an integer.
 *
 * "While polyfills are naughty, ponyfills are pure, just like ponies."
 * - https://github.com/sindresorhus/ponyfill#pony-pureness-really
 *
 * @param   {Number}  num Value to check integer(ness) of.
 * @returns {Boolean} Returns a value indicating if `num` is an integer.
 * @public
 */


function isInteger(num) {
  return typeof num === 'number' && isFinite(num) && Math.floor(num) === num;
}
/**
 * The default page number that will be used as the starting page number.
 *
 * @type {number}
 * @public
 */


const FIRST_PAGE_NUMBER = 1;
/**
 * The default number of page links to be shown.
 *
 * @type {number}
 * @public
 */

const DEFAULT_NUM_PAGES_SHOWN = 4;
/**
* Default aria-labels
*/

const DEFAULT_ARIA_LABELS = {
  firstPage: 'Go to first page',
  lastPage: 'Go to last page',
  nextPage: 'Go to next page',
  prevPage: 'Go to previous page',
  morePages: 'More pages'
};
/**
 * The Pagination react component that is used to switch between content panes or pages.
 * Behavior of the pagination component is controlled by use of props.
 * The component displays links for pages in the current viewable range,
 * it displays forward and back navigation links and also a dropdown to choose
 * the number of items being displayed per page.

 * @displayName Pagination (web)
 * @class Pagination
 * @public
 */

class Pagination extends _react.default.Component {
  constructor(props) {
    super(props);
    this.state = {
      pageItems: props.pageItems,
      pageSelected: props.defaultSelected
    };
    this.calledWarn = false;

    this._warn();
  }
  /**
   *  console warning about missing id for accessibility purposes
   */


  _warn() {
    if (false) {}

    if (!this.props.id && !this.calledWarn && this._allowItemsPerPageSelection()) {
      this.calledWarn = true;
      console.warn('Warning: <Pagination> uses <Dropdown> which requires an id prop to be fully accessible.');
      /* eslint-disable-line */
    }
  }
  /**
   * Normalize provided values to prevent out of range errors when pages
   * are generated.
   *
   * @param {Object} props Current props.
   * @param {Object} state Current state.
   * @returns {Object} The normalized state.
   * @private
   */


  static getDerivedStateFromProps(props, state) {
    const total = Math.ceil(props.totalItems / state.pageItems);
    if (state.pageSelected >= total) state.pageSelected = total;
    return state;
  }
  /**
   * Get the total number of pages in the paginated result set
   *
   * @param {number} pageItems Number of items per page
   * @returns {number} The total number of pages in the paginated result set
   * @private
   */


  _totalPages(pageItems) {
    return Math.ceil(this.props.totalItems / pageItems);
  }
  /**
   * Returns a value indicating if the the pageItems Dropdown should be displayed?
   *
   * @returns {boolean} should the pageItems drop down be displayed
   * @private
   */


  _allowItemsPerPageSelection() {
    return this.props.pageItemsChoices.length > 0;
  }
  /**
   * Should the back links be enabled or disabled?
   *
   * @returns {boolean} should the back links be enabled or disabled?
   * @private
   */


  _enableBackLinks() {
    return this.state.pageSelected > FIRST_PAGE_NUMBER;
  }
  /**
   * Should the forward links be enabled or disabled?
   *
   * @returns {boolean} should the forward links be enabled or disabled?
   * @private
   */


  _enableForwardLinks() {
    return this.state.pageSelected < this._totalPages(this.state.pageItems);
  }
  /**
   * The page range (start and end) that is to be displayed
   *
   * @returns {Object} page range to display
   * @private
   */


  _pageRangeToShow() {
    //
    // The page range is chosen such that the current selected page is centered,
    // except in the case of the first and the last page.
    //
    const pageSelected = this.state.pageSelected;

    const totalPages = this._totalPages(this.state.pageItems, this.props.totalItems);

    const maxPageLinks = this.props.maxPageLinks;
    const pageRangeStart = Math.max(FIRST_PAGE_NUMBER, pageSelected - Math.floor(maxPageLinks / 2));
    const pageRangeEnd = Math.min(totalPages, pageRangeStart + maxPageLinks - 1);
    return {
      pageRangeStart,
      pageRangeEnd
    };
  }
  /**
   * JSX for the page link section
   *
   * @returns {ReactElement} page link section
   * @private
   */


  _pageLinksSection() {
    const {
      pageRangeStart,
      pageRangeEnd
    } = this._pageRangeToShow();

    return range(pageRangeStart, pageRangeEnd + 1).map(val => {
      const isSelected = this.state.pageSelected === val;
      const key = `page-links-${val}`;
      let design;

      if (!isSelected) {
        design = 'inline';
      }

      return /*#__PURE__*/_react.default.createElement("li", {
        className: "page-item page-number",
        key: key
      }, /*#__PURE__*/_react.default.createElement(_button.default, {
        design: design,
        active: isSelected,
        text: val,
        onClick: evt => this.onPageClick(evt, val)
      }));
    });
  }
  /**
   * JSX for the more section
   *
   * @returns {ReactElement} more link section
   * @private
   */


  _moreLinksSection() {
    return /*#__PURE__*/_react.default.createElement("li", {
      className: "page-item more"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "page-ellipsis"
    }, /*#__PURE__*/_react.default.createElement(_ellipsis.default, {
      "aria-label": this.props.ariaLabels.morePages
    })));
  }
  /**
   * JSX for the first link
   *
   * @returns {ReactElement} first link JSX
   * @private
   */


  _firstLinkSection() {
    const statusClass = this._enableBackLinks() ? '' : 'disabled';
    const hidden = this.props.showBookends ? '' : 'hidden-xs-up';
    const classes = `page-item bookend bookend-first ${statusClass} ${hidden}`;

    const onClick = evt => {
      if (statusClass === 'disabled') {
        evt.preventDefault();
        return;
      }

      this.onNavigationClick(evt, 'first');
    };

    return /*#__PURE__*/_react.default.createElement("li", {
      className: classes
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      design: "inline",
      disabled: statusClass === 'disabled',
      icon: /*#__PURE__*/_react.default.createElement(_chevronDblLeft.default, null),
      onClick: onClick,
      "aria-label": this.props.ariaLabels.firstPage,
      "aria-disabled": statusClass === 'disabled'
    }));
  }
  /**
   * JSX for the last link
   *
   * @returns {ReactElement} last link JSX
   * @private
   */


  _lastLinkSection() {
    const statusClass = this._enableForwardLinks() ? '' : 'disabled';
    const hidden = this.props.showBookends ? '' : 'hidden-xs-up';
    const classes = `page-item bookend bookend-last ${statusClass} ${hidden}`;

    const onClick = evt => {
      if (statusClass === 'disabled') {
        evt.preventDefault();
        return;
      }

      this.onNavigationClick(evt, 'last');
    };

    return /*#__PURE__*/_react.default.createElement("li", {
      className: classes
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      design: "inline",
      disabled: statusClass === 'disabled',
      icon: /*#__PURE__*/_react.default.createElement(_chevronDblRight.default, null),
      onClick: onClick,
      "aria-label": this.props.ariaLabels.lastPage,
      "aria-disabled": statusClass === 'disabled'
    }));
  }
  /**
   * JSX for the previous link
   *
   * @returns {ReactElement} previous link JSX
   * @private
   */


  _prevLinkSection() {
    const statusClass = this._enableBackLinks() ? '' : 'disabled';
    const classes = `page-item previous ${statusClass}`;

    const onClick = evt => {
      if (statusClass === 'disabled') {
        evt.preventDefault();
        return;
      }

      this.onNavigationClick(evt, 'prev');
    };

    return /*#__PURE__*/_react.default.createElement("li", {
      className: classes
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      design: "inline",
      disabled: statusClass === 'disabled',
      icon: /*#__PURE__*/_react.default.createElement(_chevronLeft.default, null),
      onClick: onClick,
      "aria-label": this.props.ariaLabels.prevPage,
      "aria-disabled": statusClass === 'disabled'
    }));
  }
  /**
   * JSX for the next link
   *
   * @returns {ReactElement} next link JSX
   * @private
   */


  _nextLinkSection() {
    const statusClass = this._enableForwardLinks() ? '' : 'disabled';
    const classes = `page-item next ${statusClass}`;

    const onClick = evt => {
      if (statusClass === 'disabled') {
        evt.preventDefault();
        return;
      }

      this.onNavigationClick(evt, 'next');
    };

    return /*#__PURE__*/_react.default.createElement("li", {
      className: classes
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      design: "inline",
      disabled: statusClass === 'disabled',
      icon: /*#__PURE__*/_react.default.createElement(_chevronRight.default, null),
      onClick: onClick,
      "aria-label": this.props.ariaLabels.nextPage,
      "aria-disabled": statusClass === 'disabled'
    }));
  }
  /**
   * JSX for the number items per page dropdown
   *
   * @returns {ReactElement} number items per page dropdown JSX
   * @private
   */


  _numberItemsSection() {
    const pageItemsChoices = this.props.pageItemsChoices;
    const defaultSelected = pageItemsChoices.indexOf(this.props.pageItems);
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "pagination-dropdown"
    }, /*#__PURE__*/_react.default.createElement(_dropdown.default, {
      type: "select",
      defaultSelected: [defaultSelected],
      onChange: this.onPageItemsChanged.bind(this)
      /* eslint-disable-next-line no-undefined */
      ,
      id: this.props.id ? `${this.props.id}-page-select` : undefined
    }, pageItemsChoices.map(a => {
      return /*#__PURE__*/_react.default.createElement(_dropdown.DropdownItem, {
        key: a,
        value: a
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "d-inline-flex"
      }, a));
    })));
  }
  /**
   * JSX for the pagination links section
   *
   * @returns {ReactElement|Null} pagination links section JSX
   * @private
   */


  _paginationSection() {
    const {
      pageRangeStart,
      pageRangeEnd
    } = this._pageRangeToShow();

    const paginationSizeClass = `pagination-${this.props.size}`;

    const totalPages = this._totalPages(this.state.pageItems, this.props.totalItems);

    const classes = `pagination ${paginationSizeClass}`;
    if (isNaN(pageRangeEnd)) return null;
    return /*#__PURE__*/_react.default.createElement("ul", {
      className: classes
    }, this._firstLinkSection(), this._prevLinkSection(), pageRangeStart > FIRST_PAGE_NUMBER && this._moreLinksSection(), this._pageLinksSection(), pageRangeEnd < totalPages && this._moreLinksSection(), this._nextLinkSection(), this._lastLinkSection());
  }
  /**
   * The event handler that gets invoked when the number of items per page changes
   *
   * @param {object} props The event props.
   * @returns {void}
   * @public
   */


  onPageItemsChanged(props) {
    const pageSelected = FIRST_PAGE_NUMBER;
    const pageItems = props.value;
    this.setState({
      pageItems,
      pageSelected
    });
    this.props.onChange(pageSelected, pageItems);
  }
  /**
   * The event handler that gets invoked when a page link is clicked
   *
   * @param {object} evt The event object
   * @param {number} pageSelected The value of the page selected
   * @returns {void}
   * @public
   */


  onPageClick(evt, pageSelected) {
    evt.preventDefault();
    this.setState({
      pageSelected
    });
    this.props.onChange(pageSelected, this.state.pageItems);
  }
  /**
   * The event handler that gets invoked when a navigation link is clicked
   *
   * @param {object} evt the event object
   * @param {string} navigationType The type of navigation link that was clicked
   * @returns {void}
   * @public
   */


  onNavigationClick(evt, navigationType) {
    evt.preventDefault();
    let pageSelected;

    const totalPages = this._totalPages(this.state.pageItems, this.props.totalItems);

    switch (navigationType) {
      case 'first':
        pageSelected = FIRST_PAGE_NUMBER;
        break;

      case 'last':
        pageSelected = totalPages;
        break;

      case 'prev':
        pageSelected = Math.max(FIRST_PAGE_NUMBER, this.state.pageSelected - 1);
        break;

      case 'next':
        pageSelected = Math.min(totalPages, this.state.pageSelected + 1);
        break;

      default:
        pageSelected = FIRST_PAGE_NUMBER;
        break;
    }

    this.setState({
      pageSelected
    });
    this.props.onChange(pageSelected, this.state.pageItems, navigationType);
  }
  /**
   * React life cycle method which is invoked before a mounted component receives new props
   *
   * @param {object} prevProps The previous properties
   * @private
   */


  componentDidUpdate(prevProps) {
    if (this.props.defaultSelected !== prevProps.defaultSelected) {
      // set the pageSelected if defaultSelected prop is changed
      this.setState({
        pageSelected: this.props.defaultSelected
      });
    }

    if (this.props.totalItems !== prevProps.totalItems) {
      // set the selected page to the defaultSelected page everytime the total number of pages change
      this.setState({
        pageSelected: this.props.defaultSelected
      });
    }

    if (this.props.pageItems !== prevProps.pageItems) {
      this.setState({
        pageItems: this.props.pageItems,
        pageSelected: this.props.defaultSelected
      });
    }
  }
  /**
   * React life cycle hook for rendering the component
   *
   * @returns {ReactElement} JSX for the entire Pagination component
   * @public
   */


  render() {
    const selection = this._paginationSection();

    if (!selection) return this.props.children || null;
    const wrapClass = `pagination-wrap pagination-size-${this.props.size}`;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: wrapClass,
      id: this.props.id
    }, selection, this._allowItemsPerPageSelection() && this._numberItemsSection());
  }

}
/**
 * Pagination components display name (typically used by a react Dev tool plug-in)
 *
 * @type {string}
 */


exports["default"] = Pagination;
Pagination.displayName = 'Pagination';
/**
 * Page item validation
 *
 * @param {object} props properties passed in
 * @param {string} propName name of prop to be validated
 * @returns {Error | void} Error if invalid
 * @public
 */

Pagination.pageItemValidation = function (props, propName) {
  const pageItems = props[propName];
  const pageItemsChoices = props.pageItemsChoices;

  if (!isInteger(pageItems) && !(pageItems > 0)) {
    return new Error(`pageItems should be positive integer`);
  }

  if (!!pageItemsChoices.length && pageItemsChoices.indexOf(pageItems) === -1) {
    return new Error(`Invalid value for prop pageItems`);
  }
};
/**
 * Pagination component propTypes
 * typically used for type checking
 *
 * @type {object}
 */


Pagination.propTypes = {
  children: _propTypes.default.node,

  /** The Default selected page */
  defaultSelected: _propTypes.default.number,

  /** The maximum number of page links that should be displayed. */
  maxPageLinks: _propTypes.default.number,

  /** The callback handler when a pagination selection changes i.e. either a page selection or the number
  of items per page selection. The callback gets passed three parameters the page
  currently selected, the current number of items per page value, and the navigation type selected (i.e. next, prev, first, last) */
  onChange: _propTypes.default.func.isRequired,

  /** The number of items that are being displayed per page. */
  pageItems: Pagination.pageItemValidation,

  /** The allowed choices for number of items that will be displayed per page. */
  pageItemsChoices: _propTypes.default.arrayOf(_propTypes.default.number),

  /** Set the size (sm | md | lg) */
  size: _propTypes.default.oneOf(['sm', 'md', 'lg']),

  /** Flag to show or hide the 'first' and 'last' page links. */
  showBookends: _propTypes.default.bool,

  /** The total number of items in the result set that is being paginated. */
  totalItems: _propTypes.default.number.isRequired,

  /** Screenreader labels for sub-elements */
  ariaLabels: _propTypes.default.shape({
    /** Screen reader label for "Go to first page" double left chevron button */
    firstPage: _propTypes.default.string,

    /** Screen reader label for "Go to last page" double right chevron button */
    lastPage: _propTypes.default.string,

    /** Screen reader label for "Go to next page" single right chevron button */
    nextPage: _propTypes.default.string,

    /** Screen reader label for "Go to previous page" single left chevron button */
    prevPage: _propTypes.default.string,

    /** Screen reader label for "More pages" ellipses icon */
    morePages: _propTypes.default.string
  }),

  /** ID attribute for the pagination to add it to dropdown  */
  id: _propTypes.default.string
};
/**
 * Pagination component default prop values
 *
 * @type {object}
 */

Pagination.defaultProps = {
  defaultSelected: FIRST_PAGE_NUMBER,
  maxPageLinks: DEFAULT_NUM_PAGES_SHOWN,
  pageItemsChoices: [],
  size: 'md',
  showBookends: true,
  ariaLabels: DEFAULT_ARIA_LABELS
};

/***/ }),

/***/ "../../legacy/tooltip-legacy/lib/index.js":
/*!************************************************!*\
  !*** ../../legacy/tooltip-legacy/lib/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.Tooltip = void 0;

var _extends2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ "../../../node_modules/@babel/runtime/helpers/extends.js"));

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _classNames = _interopRequireDefault(__webpack_require__(/*! @ux/component-utilities/lib/classNames */ "../../utils/component-utilities/lib/classNames.js"));

var _useClickOutsideHoc = _interopRequireDefault(__webpack_require__(/*! @ux/component-utilities/lib/use-click-outside-hoc */ "../../utils/component-utilities/lib/use-click-outside-hoc.js"));

var _tooltipClose = _interopRequireDefault(__webpack_require__(/*! ./tooltip-close */ "../../legacy/tooltip-legacy/lib/tooltip-close.js"));

var _tooltipContent = _interopRequireDefault(__webpack_require__(/*! ./tooltip-content */ "../../legacy/tooltip-legacy/lib/tooltip-content.js"));

var _tooltipTitle = _interopRequireDefault(__webpack_require__(/*! ./tooltip-title */ "../../legacy/tooltip-legacy/lib/tooltip-title.js"));

var _tooltipPortal = _interopRequireDefault(__webpack_require__(/*! ./tooltip-portal */ "../../legacy/tooltip-legacy/lib/tooltip-portal.js"));

var _help = _interopRequireDefault(__webpack_require__(/*! @ux/icon/help */ "../../components/icon/help/index.js"));

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}
/**
 * Display a Tooltip.
 *
 * @displayName Tooltip (Web)
 * @class Tooltip
 * @public
 */


class Tooltip extends _react.Component {
  constructor() {
    super(...arguments);
    this.state = {
      isOpen: false
    };
    this.anchorRef = /*#__PURE__*/_react.default.createRef();
    this.contentRef = /*#__PURE__*/_react.default.createRef();
    this.close = this.close.bind(this);
    this.onKeyDown = this.onKeyDown.bind(this);
    this.anchorMouseEnter = this.anchorMouseEnter.bind(this);
    this.anchorMouseLeave = this.anchorMouseLeave.bind(this);
    this.startAutoHideTimer = this.startAutoHideTimer.bind(this);
    this.stopAutoHideTimer = this.stopAutoHideTimer.bind(this);
    this.autoHideTime = 0;
    this.autoHideTimerHandle = null;
  }
  /**
   * Getter to return a handler to toggle the tooltip. If no tooltip instance
   * is available, it will be opened. Otherwise it will be closed.
   *
   * Propagation cannot be stopped here as other tooltips need to be closed with
   * the same click event.
   *
   * @param {React.SyntheticEvent} event React SyntheticClick event.
   * @public
   */


  get toggle() {
    return event => {
      event.preventDefault();
      this[this.state.isOpen ? 'close' : 'open'](event);
    };
  }
  /**
   * Getter to return a handler that closes the tooltip and calls the `onDismiss`
   * property.
   *
   * This function is supposed to be called only when the user clicks the
   * `close` button, representing that the user had a clear intent to close
   * the tooltip.
   *
   * @private
   */


  get dismiss() {
    return event => {
      event.preventDefault();
      this.close();
      this.props.onDismiss && this.props.onDismiss();
    };
  }
  /**
   * Check if the component needs to be re-rendered.
   * If `props.open` has changed, it will open or close the tooltip as needed.
   *
   * @param {Object} prevProps values before the component update.
   * @private
   */


  componentDidUpdate(prevProps) {
    const {
      open
    } = this.props;

    if (open !== prevProps.open) {
      if (open) {
        this.open();
      } else {
        this.close();
      }
    }
  }
  /**
   * Open the tooltip if `props.open` is true.
   *
   * @private
   */


  componentDidMount() {
    if (this.props.open) {
      this.open();
    }
  }
  /**
   * Remove the attached click event listener and close any remaining tooltips.
   *
   * @private
   */


  componentWillUnmount() {
    this.stopAutoHideTimer();
    this.close();
  }
  /**
   * Handles mouse enter event for the anchor element
   *
   * @param {Event} event React SyntheticMouseEnter event.
   * @private
   */


  anchorMouseEnter(event) {
    if (!this.props.openOnHover) {
      return;
    }

    this.open(event);
    this.stopAutoHideTimer();
  }
  /**
   * Handles mouse leave event for the anchor element
   *
   * @private
   */


  anchorMouseLeave() {
    this.startAutoHideTimer();
  }
  /**
   * Starts or restarts auto hide timer using `autoHideTimeout` prop
   *
   * @private
   */


  startAutoHideTimer() {
    if (!this.props.autoHideTimeout) {
      return;
    }

    this.stopAutoHideTimer();
    this.autoHideTimerHandle = window.setTimeout(this.close, this.props.autoHideTimeout);
  }
  /**
   * Stops (clears) auto hide timer
   *
   * @private
   */


  stopAutoHideTimer() {
    if (this.autoHideTimerHandle) {
      window.clearTimeout(this.autoHideTimerHandle);
    }
  }
  /**
   * Handle keyboard events for escape key on the tooltip, this can be
   * used to augment the default behavior if you want to have manual control
   * over closing of the tooltip.
   *
   * @param {Event} event Browser event.
   * @private
   */


  onKeyDown(event) {
    const key = event.key;

    if (key && key === ' ' || key === 'Enter' || key === 'Return') {
      event.preventDefault();
      this.toggle(event);
    }

    if (event.type === 'keydown' && key === 'Escape') {
      event.preventDefault();
      this.close(event);
    }
  }
  /**
   * Unmount and remove the Content Component. This methods is used as
   * event handler and therefore follows the getter pattern.
   *
   * @public
   */


  close() {
    if (!this.state.isOpen) return;
    this.setState({
      isOpen: false
    }, this.props.onClose);
  }
  /**
   * Close event handler specifically for when a close was triggered by clicking
   * outside of the tooltip
   *
   * @param {Event} event React SyntheticMouseEnter event.
   * @private
   */


  closeFromClickOutside(event) {
    // If the event that triggered the outside close was hitting the anchor, "ignore" the event
    // We ignore it because we're deferring the process of closing the tooltip to the anchor's
    // click handler chain.
    const composedPath = typeof event.composedPath === 'function' && !Array.from(event.composedPath()).includes(this.anchorRef.current);

    if (!composedPath || !this.anchorRef.current || this.anchorRef.current.contains(event.target)) {
      return;
    }

    this.close();
  }
  /**
   * This method is called from `toggle` to open the tooltip.
   *
   * @public
   */


  open() {
    if (this.state.isOpen) return;
    this.setState({
      isOpen: true
    }, this.props.onOpen);
  }
  /**
   * Render Tooltip component.
   *
   * @returns {ReactElement} div element with Tooltip.
   * @private
   */


  render() {
    const pointer = {
      cursor: 'pointer'
    };
    const props = this.props;
    const dataEid = props['data-eid'];
    const className = (0, _classNames.default)(props.text ? 'tooltip-over-text' : 'tooltip-help-icon');
    const onClick = !props.persistent ? this.toggle : null;
    const onKeyDown = !props.persistent ? this.onKeyDown : null;
    const onMouseEnter = props.openOnHover ? this.anchorMouseEnter : null;
    const onMouseLeave = props.autoHideTimeout ? this.anchorMouseLeave : null;

    if ( /*#__PURE__*/_react.default.isValidElement(props.children)) {
      const child = _react.default.Children.only(props.children);

      return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, this.state.isOpen && /*#__PURE__*/_react.default.createElement(_useClickOutsideHoc.default, {
        onClick: e => {
          if (props.persistent) return;
          this.closeFromClickOutside(e);
        },
        targetRef: this.contentRef
      }, /*#__PURE__*/_react.default.createElement(_tooltipPortal.default, (0, _extends2.default)({}, props, {
        contentRef: this.contentRef,
        anchor: this.anchorRef.current,
        root: props.root,
        hideClose: props.hideClose,
        openOnHover: props.openOnHover,
        close: this.close,
        open: this.open,
        dismiss: this.dismiss,
        onMouseEnter: this.stopAutoHideTimer,
        onMouseLeave: this.startAutoHideTimer
      })), " "), /*#__PURE__*/_react.default.cloneElement(child, {
        'style': Object.assign({}, child.props.style || {}, pointer),
        onClick,
        onMouseEnter,
        onMouseLeave,
        onKeyDown,
        'id': props.id,
        'ref': this.anchorRef,
        'tabIndex': props.tabIndex,
        'data-eid': dataEid,
        'aria-label': props.ariaLabels.tooltipClick
      }));
    }

    return /*#__PURE__*/_react.default.createElement("span", {
      id: props.id,
      onMouseEnter: onMouseEnter,
      onMouseLeave: onMouseLeave
    }, this.state.isOpen && /*#__PURE__*/_react.default.createElement(_useClickOutsideHoc.default, {
      onClick: e => {
        if (props.persistent) return;
        this.closeFromClickOutside(e);
      },
      targetRef: this.contentRef
    }, /*#__PURE__*/_react.default.createElement(_tooltipPortal.default, (0, _extends2.default)({}, props, {
      contentRef: this.contentRef,
      anchor: this.anchorRef.current,
      hideClose: props.hideClose,
      openOnHover: props.openOnHover,
      close: this.close,
      dismiss: this.dismiss,
      onMouseEnter: this.stopAutoHideTimer,
      onMouseLeave: this.startAutoHideTimer
    }))), props.children, /*#__PURE__*/_react.default.createElement("span", {
      role: "button",
      "aria-haspopup": "true",
      "aria-label": props.ariaLabels.tooltipClick,
      tabIndex: props.tabIndex,
      className: className,
      onClick: onClick,
      onKeyDown: onKeyDown,
      style: pointer,
      ref: this.anchorRef,
      "data-eid": dataEid
    }, props.text || /*#__PURE__*/_react.default.createElement(_help.default, {
      height: 16,
      width: 16,
      role: "presentation"
    })));
  }

}
/**
 * Default prop values.
 *
 * @enum {Object} defaultProps
 * @public
 */


exports.Tooltip = Tooltip;
Tooltip.defaultProps = {
  persistent: false,
  openOnHover: false,
  hideClose: false,
  open: false,
  tabIndex: 0,
  ariaLabels: {
    close: 'Close Tooltip',
    tooltipClick: 'Click here for more information'
  }
};
/**
 * Property types definition.
 *
 * @enum {Object} propTypes
 * @public
 */

Tooltip.propTypes = {
  /** HTML element id to use for the anchor element */
  'id': _propTypes.default.string,

  /** Flag for whether a tooltip is persistent */
  'persistent': _propTypes.default.bool,

  /** (Desktop/Mouse use only) Flag for whether the tooltip should open when the anchor is hovered */
  'openOnHover': _propTypes.default.bool,

  /** The number of milliseconds before a tooltip auto-hides */
  'autoHideTimeout': _propTypes.default.number,

  /** (Desktop/Mouse use only) Hides the close button for use as a hover only tooltip **/
  'hideClose': _propTypes.default.bool,

  /** className for styling */
  'className': _propTypes.default.string,

  /** Children to use as the tooltip anchor */
  'children': _propTypes.default.node,

  /** Tooltip message content */
  'message': _propTypes.default.node,

  /** The root document to attach the tooltip, defaults to document.documentElement. Used to support Shadow DOM */
  'root': _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.shape({
    current: _propTypes.default.object
  })]),

  /** Content for the tooltip title */
  'title': _propTypes.default.node,

  /** Text content for the tooltip anchor */
  'text': _propTypes.default.node,

  /** Flag for if the tooltip should open at start */
  'open': _propTypes.default.bool,

  /** Handler for when a tooltip is closed */
  'onClose': _propTypes.default.func,

  /** Handler for when a tooltip is opened */
  'onOpen': _propTypes.default.func,

  /** Handler for when a tooltip is closed explicitly by the user */
  'onDismiss': _propTypes.default.func,

  /** The accessibility tab index value */
  'tabIndex': _propTypes.default.number,

  /** The eid to identify click origin */
  'data-eid': _propTypes.default.string,

  /** The aria-label to identify the button */
  'ariaLabels': _propTypes.default.shape({
    /** Screen reader label for close button */
    close: _propTypes.default.string,

    /** Screen reader label for icon button */
    tooltipClick: _propTypes.default.string
  })
}; //
// Make importing easier by exposing the individual components to the Tooltip
// class.
//

Tooltip.Close = _tooltipClose.default;
Tooltip.Content = _tooltipContent.default;
Tooltip.Title = _tooltipTitle.default;
var _default = Tooltip;
exports["default"] = _default;

/***/ }),

/***/ "../../legacy/tooltip-legacy/lib/tooltip-close.js":
/*!********************************************************!*\
  !*** ../../legacy/tooltip-legacy/lib/tooltip-close.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = TooltipClose;

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _button = _interopRequireDefault(__webpack_require__(/*! @ux/button */ "../../components/button/lib/index.js"));

var _x = _interopRequireDefault(__webpack_require__(/*! @ux/icon/x */ "../../components/icon/x/index.js"));

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}
/**
 * Render the close button of the tooltip.
 *
 * @param {Object} props Component properties.
 * @returns {ReactElement} button
 * @private
 */


function TooltipClose(_ref) {
  let {
    close,
    className,
    ariaLabels
  } = _ref;
  let activeElement;
  (0, _react.useEffect)(() => {
    activeElement = document && document.activeElement;
    const button = document.querySelector(`.${className}`);
    if (button) button.focus();
    return () => {
      if (activeElement) activeElement.focus();
    };
  });
  return /*#__PURE__*/_react.default.createElement(_button.default, {
    "aria-label": ariaLabels.close,
    type: "button",
    className: className,
    onClick: close,
    design: 'stateless',
    icon: /*#__PURE__*/_react.default.createElement(_x.default, null)
  });
}

TooltipClose.defaultProps = {
  ariaLabels: {
    close: 'Close Tooltip'
  }
};
/**
 * Property types definition.
 *
 * @enum {Object} propTypes
 * @private
 */

TooltipClose.propTypes = {
  close: _propTypes.default.func.isRequired,
  className: _propTypes.default.string,
  ariaLabels: _propTypes.default.shape({
    close: _propTypes.default.string
  })
};

/***/ }),

/***/ "../../legacy/tooltip-legacy/lib/tooltip-content.js":
/*!**********************************************************!*\
  !*** ../../legacy/tooltip-legacy/lib/tooltip-content.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.TooltipContent = void 0;

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _classNames = _interopRequireDefault(__webpack_require__(/*! @ux/component-utilities/lib/classNames */ "../../utils/component-utilities/lib/classNames.js"));

var _offset = _interopRequireDefault(__webpack_require__(/*! @ux/component-utilities/lib/offset */ "../../utils/component-utilities/lib/offset.js"));

var _offsetRelative = _interopRequireDefault(__webpack_require__(/*! @ux/component-utilities/lib/offset-relative */ "../../utils/component-utilities/lib/offset-relative.js"));

var _tooltipClose = _interopRequireDefault(__webpack_require__(/*! ./tooltip-close */ "../../legacy/tooltip-legacy/lib/tooltip-close.js"));

var _tooltipTitle = _interopRequireDefault(__webpack_require__(/*! ./tooltip-title */ "../../legacy/tooltip-legacy/lib/tooltip-title.js"));

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}
/**
 * Render and position the tooltip content.
 *
 * @class TooltipContent
 * @private
 */


class TooltipContent extends _react.Component {
  constructor() {
    super(...arguments);
    this.state = {
      anchor: {
        height: 0,
        width: 0,
        top: 0,
        y: 0,
        x: 0
      }
    };
    this.element = /*#__PURE__*/_react.default.createRef();
  }
  /**
   * After the initial render the tooltip will need to be re-rendered for
   * correct positioning in the DOM.
   *
   * @private
   */


  componentDidMount() {
    document.addEventListener('resize', this.update);
    this.recalculateAnchor();
  }
  /**
   * Remove the attached click event listener.
   *
   * @private
   */


  componentWillUnmount() {
    document.removeEventListener('resize', this.update);
  }
  /**
   * Provide the position and dimensions of the anchor element each time the
   * component is about to update the DOM.
   *
   * @private
   */


  componentDidUpdate() {
    this.recalculateAnchor();
  }
  /**
   * Force an update of the component, usually required to update the position.
   *
   * @private
   */


  update() {
    this.forceUpdate();
  }

  anchorsDiffer(prevAnchor, newAnchor) {
    return JSON.stringify(prevAnchor) !== JSON.stringify(newAnchor);
  }

  recalculateAnchor() {
    const {
      anchor,
      root
    } = this.props;
    const {
      top: y,
      left: x
    } = (0, _offset.default)(anchor);
    const bounding = anchor.getBoundingClientRect();
    const recalculatedAnchor = {
      x,
      y,
      height: bounding.height,
      top: bounding.top,
      width: bounding.width
    };

    if (root) {
      const {
        left,
        top
      } = (0, _offsetRelative.default)(anchor, root);
      recalculatedAnchor.y = top;
      recalculatedAnchor.x = left;
    }

    const prevAnchor = this.state.anchor;

    if (this.anchorsDiffer(prevAnchor, recalculatedAnchor)) {
      this.setState({
        anchor: recalculatedAnchor
      });
    }
  }
  /**
   * Get top and left distances of the tooltip. Also return if the tooltip needs
   * to be rendered above or below the anchor.
   *
   * @returns {Array} positional values.
   * @private
   */
  // eslint-disable-next-line max-statements


  get position() {
    let left; //
    // Deliberately return to top left corner here so the tooltip will get the
    // maximum space to render. Having it elsewhere on the page might cause
    // the message to render with a different width causing errors in the
    // calculation afterwards.
    //

    if (!this.element.current) {
      return [{
        visibility: 'hidden'
      }];
    }

    const {
      anchor
    } = this.state;
    const viewportWidth = window.innerWidth;
    const tooltip = this.element.current.getBoundingClientRect();
    const height = tooltip.height;
    const width = tooltip.width;
    const above = height < anchor.top; //
    // Determine x position on the tooltip, attempt to place it centered above
    // the anchor at first.
    //

    left = Math.floor(anchor.x + anchor.width / 2 - width / 2);
    const delta = above ? height : -anchor.height;
    const overflow = left + width - viewportWidth;
    const arrowMargin = {
      marginLeft: this.arrowMarginLeft
    }; //
    // Move the tooltip further to the left if there is not enough space in
    // the viewport to the right side of the anchor. Also move the arrow the
    //

    if (overflow > 0) {
      arrowMargin.marginLeft += overflow;
      left -= overflow;
    } //
    // Do not allow for positioning left < 0, respect boundaries of the viewport.
    // Instead move the arrow with margin-left above the anchor.
    //


    if (left < 0) {
      arrowMargin.marginLeft += left;
      left = 0;
    }

    return [{
      top: Math.floor(anchor.y - delta),
      left: left
    }, arrowMargin, above];
  }
  /**
   * Render Tooltip content and store references to the wrapping div and the arrow.
   * Both are required for positional calculations and updates.
   *
   * @returns {ReactElement} div element with Tooltip content.
   * @private
   */


  render() {
    const props = this.props;
    const [style, arrowMargin, above] = this.position;
    const clsx = (0, _classNames.default)([props.className, 'tooltip', 'show', {
      'bs-tooltip-bottom': above,
      'bs-tooltip-top': !above
    }]); //
    // Get and store the arrow's original margin-left
    //

    const arrowMarginRef = r => {
      if (!this.arrowMarginLeft && r) {
        this.arrowMarginLeft = parseInt(window.getComputedStyle(r).getPropertyValue('margin-left'), 10) || 0;
      }
    };

    return /*#__PURE__*/_react.default.createElement("div", {
      className: 'spaced-group',
      ref: this.props.contentRef
    }, /*#__PURE__*/_react.default.createElement("div", {
      role: "tooltip",
      ref: this.element,
      className: clsx,
      style: style,
      onMouseEnter: props.onMouseEnter,
      onMouseLeave: props.onMouseLeave
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: 'tooltip-arrow',
      ref: arrowMarginRef,
      style: arrowMargin
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: 'tooltip-inner'
    }, props.hideClose || /*#__PURE__*/_react.default.createElement(_tooltipClose.default, {
      close: props.dismiss,
      ariaLabels: props.ariaLabels,
      className: 'tooltip-close'
    }), /*#__PURE__*/_react.default.createElement("span", {
      role: "status",
      "aria-live": "assertive"
    }, props.title && /*#__PURE__*/_react.default.createElement(_tooltipTitle.default, {
      className: 'tooltip-title'
    }, props.title), props.message))));
  }

}
/**
 * Define required and types of properties.
 *
 * @enum {Object} propTypes
 * @private
 */


exports.TooltipContent = TooltipContent;
TooltipContent.propTypes = {
  // @see https://stackoverflow.com/a/51127130
  contentRef: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.shape({
    current: _propTypes.default.any
  })]),
  anchor: _propTypes.default.object,
  root: _propTypes.default.object,
  message: _propTypes.default.node,
  title: _propTypes.default.node,
  close: _propTypes.default.func.isRequired,
  onMouseEnter: _propTypes.default.func,
  onMouseLeave: _propTypes.default.func,
  hideClose: _propTypes.default.bool,
  persistent: _propTypes.default.bool,
  dismiss: _propTypes.default.func,
  className: _propTypes.default.string,
  ariaLabels: _propTypes.default.shape({
    close: _propTypes.default.string
  })
};
var _default = TooltipContent;
exports["default"] = _default;

/***/ }),

/***/ "../../legacy/tooltip-legacy/lib/tooltip-portal.js":
/*!*********************************************************!*\
  !*** ../../legacy/tooltip-legacy/lib/tooltip-portal.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../../node_modules/@babel/runtime/helpers/defineProperty.js"));

var _extends2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ "../../../node_modules/@babel/runtime/helpers/extends.js"));

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));

var _reactDom = _interopRequireDefault(__webpack_require__(/*! react-dom */ "../../../node_modules/react-dom/index.js"));

var _tooltipContent = _interopRequireDefault(__webpack_require__(/*! ./tooltip-content */ "../../legacy/tooltip-legacy/lib/tooltip-content.js"));

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      (0, _defineProperty2.default)(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}
/**
 * Render the tooltip content in a portal.
 *
 * @param {Object} props Content properties.
 * @returns {ReactElement} Div containing title.
 * @private
 */


class TooltipPortal extends _react.Component {
  constructor(props) {
    super(props);
    this.state = {
      inDOM: false
    };
    this.tooltip = document.createElement('div');
    const {
      anchor,
      root
    } = props;
    const rootElement = root || anchor.getRootNode();
    this.attachmentElement = rootElement.querySelector('body') || rootElement;
  }

  componentDidMount() {
    // The portal element is inserted in the DOM tree after
    // the Modal's children are mounted, meaning that children
    // will be mounted on a detached DOM node. If a child
    // component requires to be attached to the DOM tree
    // immediately when mounted, for example to measure a
    // DOM node, or uses 'autoFocus' in a descendant, add
    // state to Modal and only render the children when Modal
    // is inserted in the DOM tree.
    this.attachmentElement.appendChild(this.tooltip);
    this.setState({
      inDOM: true
    });
  }

  componentWillUnmount() {
    this.attachmentElement.removeChild(this.tooltip);
  }

  render() {
    return this.state.inDOM && /*#__PURE__*/_reactDom.default.createPortal( /*#__PURE__*/_react.default.createElement(_tooltipContent.default, (0, _extends2.default)({}, this.props, {
      hideClose: this.props.openOnHover && this.props.hideClose
    })), this.tooltip);
  }

}
/**
 * Property types definition.
 *
 * @enum {Object} propTypes
 * @private
 */


exports["default"] = TooltipPortal;
TooltipPortal.propTypes = _objectSpread({}, _tooltipContent.default.propTypes);

/***/ }),

/***/ "../../legacy/tooltip-legacy/lib/tooltip-title.js":
/*!********************************************************!*\
  !*** ../../legacy/tooltip-legacy/lib/tooltip-title.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = TooltipTitle;

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "../../../node_modules/react/index.js"));
/**
 * Render the title of the tooltip.
 *
 * @param {Object} props Component properties.
 * @returns {ReactElement} Div containing title.
 * @private
 */


function TooltipTitle(_ref) {
  let {
    children,
    className
  } = _ref;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: className
  }, children);
}
/**
 * Property types definition.
 *
 * @enum {Object} propTypes
 * @private
 */


TooltipTitle.propTypes = {
  children: _propTypes.default.node,
  className: _propTypes.default.string
};

/***/ }),

/***/ "../../utils/component-utilities/lib/breakpoints-hoc.js":
/*!**************************************************************!*\
  !*** ../../utils/component-utilities/lib/breakpoints-hoc.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = Breakpoints;

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _useBreakpoints = _interopRequireDefault(__webpack_require__(/*! ./use-breakpoints */ "../../utils/component-utilities/lib/use-breakpoints.js"));

function Breakpoints(_ref) {
  let {
    children,
    breakpoints
  } = _ref;
  const {
    breakpoint
  } = (0, _useBreakpoints.default)(...breakpoints);
  return children({
    breakpoint
  });
}

Breakpoints.propTypes = {
  breapoints: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.arrayOf('string')]),

  /** remaining elements to render */
  children: _propTypes.default.any
};

/***/ }),

/***/ "../../utils/component-utilities/lib/breakpoints.js":
/*!**********************************************************!*\
  !*** ../../utils/component-utilities/lib/breakpoints.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _breakdancer = _interopRequireDefault(__webpack_require__(/*! breakdancer */ "../../../node_modules/breakdancer/lib/index.js"));
/**
 * Our breakpoint specifications. The key represents the name of the breakpoint
 * and the object specifies the specification in order to trigger the break
 * point. These breakpoints follow the design specification from our
 * invisionapp.
 *
 * Please note that the values in the breakdancer represent the minimum values
 * so need to + 1 the design specification in order to get an exact match.
 *
 * @type {Breakdancer}
 * @public
 */


const breakpoints = new _breakdancer.default([{
  name: 'mobile',
  width: 519 + 1
}, {
  name: 'phablet',
  width: 767 + 1
}, {
  name: 'tablet',
  width: 991 + 1
}, {
  name: 'desktop',
  width: 1199 + 1
}, {
  name: 'large',
  width: 1719 + 1
}, //
// Last capture all the things query.
//
{
  name: 'xlarge',
  width: Infinity
}]);
var _default = breakpoints;
exports["default"] = _default;

/***/ }),

/***/ "../../utils/component-utilities/lib/classNames.js":
/*!*********************************************************!*\
  !*** ../../utils/component-utilities/lib/classNames.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = classNames;
/**
  * Helper function to create and manage an array of classNames.
  *
  * @returns {String|Undefined} Concatenated result of classNames.
  * @public
  */

function classNames() {
  for (var _len = arguments.length, names = new Array(_len), _key = 0; _key < _len; _key++) {
    names[_key] = arguments[_key];
  }

  const result = names.filter(Boolean).reduce((memo, className) => {
    if (typeof className === 'string' && ~className.indexOf(' ')) {
      className = className.split(' ');
    }

    if (Array.isArray(className)) {
      Array.prototype.push.apply(memo, classNames(...className).split(' '));
    } else if (typeof className === 'object') {
      Object.keys(className).forEach(function each(key) {
        //
        // In object mode we want to optionally enable or disable classNames
        // based on boolean values for the keys. We're not going to be too
        // strict on true and false as we want things like `undefined` and
        // `null` to also trigger removal.
        //
        if (className[key]) {
          memo.push(key);
        } else if (~memo.indexOf(key)) {
          memo.splice(memo.indexOf(key), 1);
        }
      });
    } else {
      memo.push(className);
    }

    return memo;
  }, []).filter(function filter(item, i, all) {
    return Boolean(item) && all.indexOf(item) === i;
  }).join(' '); //
  // If we return an empty string and directly pass it in to the className
  // property of a React component we will add an empty attribute to the
  // element. Returning `undefined` ensures that no empty property is added.
  //
  // The undefined value is also still accepted as value for the `classNames`
  // method so the resulting className can still be manipulated afterwards.
  //
  // eslint-disable-next-line no-undefined

  return result ? result : undefined;
}

/***/ }),

/***/ "../../utils/component-utilities/lib/constants.js":
/*!********************************************************!*\
  !*** ../../utils/component-utilities/lib/constants.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.target = void 0;
const hasDOM = typeof document !== 'undefined';
const target = hasDOM ? window : {};
exports.target = target;

/***/ }),

/***/ "../../utils/component-utilities/lib/id.js":
/*!*************************************************!*\
  !*** ../../utils/component-utilities/lib/id.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = id;

var _fn = _interopRequireDefault(__webpack_require__(/*! fn.name */ "../../../node_modules/fn.name/index.js"));
/**
  * Generate a persistent id so it will be same every single time so it can
  * still be used to link to certain parts in the form. If there is already an
  * `id` provided it will fallback to that.
  *
  * We want to follow the HTML4 specification here to ensure that we generate
  * valid id attributes for every single doc type. HTML5 is less strict about
  * this as it only disallows spaces to be present in the attribute.
  *
  * @param {String} key Fallback key to retrieve from props.
  * @param {ReactElement} context react component from which this function is called
  * @returns {String} The persistent, but semi-unique id.
  * @public
  */


function id(key, context) {
  if (typeof context === 'undefined') {
    context = key; // eslint-disable-next-line no-undefined

    key = undefined;
  }

  const props = context.props;

  const _name = (0, _fn.default)(context).toLowerCase();

  let value = (props.id || props[key] || _name).toString().trim(); // If there are non-ASCII characters, use encodeURIComponent to deterministically replace them
  // eslint-disable-next-line no-control-regex


  value = value.replace(/[^\x00-\x7F]/g, char => {
    return encodeURIComponent(char).replace('%', ':');
  }); //
  // An id attribute must start with A-Za-z char. If this is not the case
  // we're going to prefix it. Just for clarity we prefix it with the word
  // `id-`
  //

  if (!/^[A-Za-z]/.test(value)) value = 'id-' + value; // eslint-disable-next-line no-useless-escape

  return value.replace(/[^A-Za-z\:\;\-\_0-9\.]+/g, '-');
}

/***/ }),

/***/ "../../utils/component-utilities/lib/is-browser.js":
/*!*********************************************************!*\
  !*** ../../utils/component-utilities/lib/is-browser.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = isBrowser;
/**
  * Check if we are running in a TRUE browser (i.e. **NOT** Node.js)
  * environment. This will only return true in REAL browser environments
  * (i.e. not `jsdom`). The navigator object will toString as '[object Navigator]'
  * instead of '[object Object]' if it was a leaked Node.js global.
  *
  * *NOTE:* This will return true in PhantomJS environments and other headless
  * browsers since those are, in fact, REAL browsers in the strict sense.
  *
  * @returns {Boolean} Is this a browser
  * @public
  */

function isBrowser() {
  return typeof navigator !== 'undefined' && Object.prototype.toString.call(navigator) === '[object Navigator]';
}

/***/ }),

/***/ "../../utils/component-utilities/lib/offset-relative.js":
/*!**************************************************************!*\
  !*** ../../utils/component-utilities/lib/offset-relative.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = offsetRelative;
/**
  * Calculate the component's offset relative to the target.
  *
  * @param {Node|ReactElement} ref Reference to a DOM Node or React Element.
  * @param {Node|ReactElement} target Reference to a DOM Node or React Element that is contains ref.
  * @returns {Object} left and top offsets.
  * @public
  */

function offsetRelative(ref, target) {
  let left = ref.offsetLeft;
  let top = ref.offsetTop;
  let parent = ref.offsetParent;

  while (parent && parent !== target && target.contains(ref)) {
    left += parent.offsetLeft;
    top += parent.offsetTop;
    parent = parent.offsetParent;
  }

  return {
    left,
    top
  };
}

/***/ }),

/***/ "../../utils/component-utilities/lib/offset.js":
/*!*****************************************************!*\
  !*** ../../utils/component-utilities/lib/offset.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = offset;

var _constants = __webpack_require__(/*! ./constants */ "../../utils/component-utilities/lib/constants.js");
/**
  * Calculate the component's offset relative to the window.
  *
  * @param {Node|ReactElement} ref Reference to a DOM Node or React Element.
  * @returns {Object} left and top offsets.
  * @public
  */


function offset(ref) {
  const rect = ref.getBoundingClientRect();
  return {
    left: rect.left + _constants.target.pageXOffset - _constants.target.document.documentElement.clientLeft,
    top: rect.top + _constants.target.pageYOffset - _constants.target.document.documentElement.clientTop
  };
}

/***/ }),

/***/ "../../utils/component-utilities/lib/out-of-viewport.js":
/*!**************************************************************!*\
  !*** ../../utils/component-utilities/lib/out-of-viewport.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = outOfViewport;
/**
 * Returns a value indicating that the specified `ref` is out of the viewport in
 * a given direction +ve or -ve pixels. If the `ref` is within the viewport then
 * returns 0.
 *
 * @param {Node|ReactElement} ref Reference to a DOM Node or React Element.
 * @returns {Number|undefined} Number of pixels document.body.scrollTop must be modified by
 * @public
 */

function outOfViewport(ref) {
  const rect = ref.getBoundingClientRect();

  if (rect.top < 0) {
    return rect.top;
  }

  const height = window.innerHeight || document.documentElement.clientHeight;

  if (rect.bottom > height) {
    return rect.bottom - height;
  }

  return 0;
}

/***/ }),

/***/ "../../utils/component-utilities/lib/scroll-into-view.js":
/*!***************************************************************!*\
  !*** ../../utils/component-utilities/lib/scroll-into-view.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = scrollIntoViewIfNeeded;

var _outOfViewport = _interopRequireDefault(__webpack_require__(/*! ./out-of-viewport */ "../../utils/component-utilities/lib/out-of-viewport.js"));

function isRef(obj) {
  return obj != null && typeof obj === 'object' && Object.prototype.hasOwnProperty.call(obj, 'current');
}
/**
  * Scroll the current element into the visible area of the browser window if not there.
  * If the element is already within the visible area of the browser window, then do not scroll.
  *
  * @param {Node|ReactElement} ref Reference to a DOM Node or React Element.
  * @throws Will throw an error if ref is not valid
  * @public
  */


function scrollIntoViewIfNeeded(ref) {
  if (!isRef(ref)) return;
  const {
    current
  } = ref;
  const outOf = (0, _outOfViewport.default)(current);
  if (!outOf) return; // WebKit & Blink have this native method.

  if (current.scrollIntoViewIfNeeded) {
    current.scrollIntoViewIfNeeded(false);
    return;
  } //
  // TODO (crobbins, jkeslin): do we still need this in this implementation?
  //
  // // If the menu itself is statically positioned, we need to take that into account
  // if (ref.offsetParent !== ref.parentNode) {
  //   top -= activeItem.parentNode.offsetTop;
  // }
  //
  // Remark (crobbins): MDN suggests checking if `typeof body.scrollTop === 'number'`
  // but based on empirical evidence that documentation is simply wrong. Other sources
  // around the Internetz suggest that when the value is 0 `document.body` should be used.
  // (see: https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect)
  //


  let body = document.documentElement || document.body.parentNode;

  if (body.scrollTop === 0) {
    body = document.body;
  }

  body.scrollTop = body.scrollTop + outOf;
}

/***/ }),

/***/ "../../utils/component-utilities/lib/use-breakpoints.js":
/*!**************************************************************!*\
  !*** ../../utils/component-utilities/lib/use-breakpoints.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = useBreakpoints;

var _breakpoints = _interopRequireDefault(__webpack_require__(/*! ./breakpoints */ "../../utils/component-utilities/lib/breakpoints.js"));

var _diagnostics = _interopRequireDefault(__webpack_require__(/*! diagnostics */ "../../../node_modules/diagnostics/browser/production.js"));

var _react = __webpack_require__(/*! react */ "../../../node_modules/react/index.js");

const currentWindow = typeof window === 'undefined' ? null : window;

if (currentWindow) {
  currentWindow.addEventListener('resize', () => {
    if (!_breakpoints.default.changed()) return;
    currentWindow.dispatchEvent(new CustomEvent('breakpoint:hook:changed', {
      detail: {
        breakpoint: _breakpoints.default.breakpoint
      }
    }));
  });
}
/**
 * @typedef {Object} Breakpoint
 * @prop {string} name The name of the breakpoint
 * @prop {number} width The minimum width of the breakpoint in pixels
 */

/**
 * @typedef {Object} Viewport
 * @prop {number} width The width of the viewport in pixels
 * @prop {number} height The height of the viewport in pixels
 */

/**
 * @typedef {Object} useBreakpointsState
 * @prop {Breakpoint} breakpoint The current breakpoint
 * @prop {Viewport} viewport The current viewport size
 */

/**
 * React hook to setup breakpoint handling with breakdancer
 *
 * @param  {...string} points List of breakpoint names to subscribe to
 * @returns {useBreakpointsState} State variables for current breakpoint and viewport
 */


function useBreakpoints() {
  for (var _len = arguments.length, points = new Array(_len), _key = 0; _key < _len; _key++) {
    points[_key] = arguments[_key];
  }

  const debug = (0, _diagnostics.default)('ux:use-breakpoints');
  const [breakpoint, setBreakpoint] = (0, _react.useState)(() => {
    /** @type {Breakpoint} */
    const currentBreakpoint = _breakpoints.default.breakpoint;
    return currentBreakpoint;
  });
  const [viewport, setViewport] = (0, _react.useState)(() => {
    /** @type {Viewport} */
    const currentViewport = _breakpoints.default.viewport();

    return currentViewport;
  });
  (0, _react.useEffect)(() => {
    const _resize = _ref => {
      let {
        detail: newBreakpoint
      } = _ref;
      if (!points || !points.length) return; //
      // Find the nearest registered point by minimal distance from the actual width.
      //

      if (!points.includes(newBreakpoint)) {
        const distances = points.map(point => Math.abs(_breakpoints.default.compare(point, 'width')));
        newBreakpoint = points[distances.indexOf(Math.min(...distances))];
      } //
      // Check if the breakpoint is actually different Breakpoint might have changed based on nearest algorithm.
      //


      if (breakpoint === newBreakpoint) return;
      debug('updating state as breakpoint changed to %s', newBreakpoint);
      setViewport(_breakpoints.default.viewport());
      setBreakpoint(newBreakpoint);
    };

    _resize({
      detail: _breakpoints.default.currently()
    }); // @ts-ignore


    if (currentWindow) currentWindow.addEventListener('breakpoint:hook:changed', _resize);
    return () => {
      // @ts-ignore
      if (currentWindow) currentWindow.removeEventListener('breakpoint:hook:changed', _resize);
    };
  }, [breakpoint, debug, points]);
  return {
    breakpoint,
    viewport
  };
}

/***/ }),

/***/ "../../utils/component-utilities/lib/use-click-outside-hoc.js":
/*!********************************************************************!*\
  !*** ../../utils/component-utilities/lib/use-click-outside-hoc.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = ClickOutside;

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../../node_modules/prop-types/index.js"));

var _useClickOutside = _interopRequireDefault(__webpack_require__(/*! ./use-click-outside */ "../../utils/component-utilities/lib/use-click-outside.js"));
/**
 * @param {Object} props props
 * @param {function} props.onclick outside handler
 * @param {object} props.targetRef parent ref
 * @returns {React.ReactComponent} HOC component for handling clicks outside
 */


function ClickOutside(_ref) {
  let {
    onClick,
    children,
    targetRef
  } = _ref;
  (0, _useClickOutside.default)(targetRef, onClick);
  return children;
}

ClickOutside.propTypes = {
  /** Event handler */
  onClick: _propTypes.default.func.isRequired,

  /** needs to be a React.createRef */
  targetRef: _propTypes.default.object.isRequired,

  /** remaining elements to render */
  children: _propTypes.default.node
};

/***/ }),

/***/ "../../utils/component-utilities/lib/use-click-outside.js":
/*!****************************************************************!*\
  !*** ../../utils/component-utilities/lib/use-click-outside.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = useOnClickOutside;

var _react = __webpack_require__(/*! react */ "../../../node_modules/react/index.js");

var _isBrowser = _interopRequireDefault(__webpack_require__(/*! ./is-browser */ "../../utils/component-utilities/lib/is-browser.js"));
/**
 * Assign an new event listener to the body element that only triggers if the
 * event target is outside the provided reference DOM Node.
 * Code is referenced from https://usehooks.com/useOnClickOutside/
 *
 * @param {Node|ReactElement} ref Reference to a DOM Node or React Element.
 * @param {Function} handler Completion callback function.
 * @public
 */


function useOnClickOutside(ref, handler) {
  /**
   * Trigger the listener if the clicked target does not contain the
   * HTML/Component reference.
   * @private
   */
  (0, _react.useEffect)(() => {
    if (!_isBrowser.default) return;

    const listener = event => {
      // Do nothing if clicking ref's element or descendent elements
      const composedPath = typeof event.composedPath === 'function' && !Array.from(event.composedPath()).includes(ref.current);

      if (!composedPath || !ref.current || ref.current.contains(event.target)) {
        return;
      }

      handler(event);
    };

    document.addEventListener('mousedown', listener);
    document.addEventListener('touchstart', listener);
    return () => {
      document.removeEventListener('mousedown', listener);
      document.removeEventListener('touchstart', listener);
    };
  }, [ref, handler]);
}

/***/ }),

/***/ "../../utils/intents/lib/feedback-expressions.js":
/*!*******************************************************!*\
  !*** ../../utils/intents/lib/feedback-expressions.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _default = {
  CRITICAL: 'Critical',
  SUCCESS: 'Success',
  WARNING: 'Warning',
  INFO: 'Info',
  HIGHLIGHT: 'Highlight',
  NEUTRAL: 'Neutral',
  INTERNAL: 'Internal',
  PASSIVE: 'Passive',
  PREMIUM: 'Premium'
};
exports["default"] = _default;

/***/ }),

/***/ "../../utils/util/lib/index.js":
/*!*************************************!*\
  !*** ../../utils/util/lib/index.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "URL", ({
  enumerable: true,
  get: function () {
    return _url.default;
  }
}));
exports.cookie = void 0;
Object.defineProperty(exports, "debug", ({
  enumerable: true,
  get: function () {
    return _diagnostics.default;
  }
}));
exports.json = void 0;
Object.defineProperty(exports, "registerKeyboardNavListener", ({
  enumerable: true,
  get: function () {
    return _registerKeyboardNav.registerKeyboardNavListener;
  }
}));
Object.defineProperty(exports, "request", ({
  enumerable: true,
  get: function () {
    return _request.default;
  }
}));
exports.storage = void 0;

var _request = _interopRequireDefault(__webpack_require__(/*! @godaddy/request */ "../../../node_modules/@godaddy/request/lib/index.js"));

var _diagnostics = _interopRequireDefault(__webpack_require__(/*! ./utils/diagnostics */ "../../utils/util/lib/utils/diagnostics.js"));

var json = _interopRequireWildcard(__webpack_require__(/*! ./utils/json */ "../../utils/util/lib/utils/json.js"));

exports.json = json;

var _url = _interopRequireDefault(__webpack_require__(/*! ./utils/url */ "../../utils/util/lib/utils/url.js"));

var _registerKeyboardNav = __webpack_require__(/*! ./utils/register-keyboard-nav */ "../../utils/util/lib/utils/register-keyboard-nav.js");

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

const cookie = __webpack_require__(/*! koekiemonster */ "../../../node_modules/koekiemonster/index.js")();

exports.cookie = cookie; //
// @deprecated
// We have moved on from `cookie-monster` as it is no longer maintained
// Polyfill to cookie-monster@0.1.1
// See: https://github.com/kahnjw/cookie-monster/compare/0.1.1...0.2.1
//

cookie.get = cookie.getItem;
cookie.set = cookie.setItem;
cookie.remove = cookie.removeItem;
cookie.clear = null; //
// @deprecated
// sessionStorage is now available on window in all browsers in our
// target support matrix. However, since it was previously exposed
// prior to this we must re-expose it in this fashion.
//

let storage;
exports.storage = storage;

if (typeof window !== 'undefined') {
  exports.storage = storage = window.sessionStorage;
}

/***/ }),

/***/ "../../utils/util/lib/utils/diagnostics.js":
/*!*************************************************!*\
  !*** ../../utils/util/lib/utils/diagnostics.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.loggers = exports["default"] = void 0;

var _diagnostics = _interopRequireDefault(__webpack_require__(/*! diagnostics */ "../../../node_modules/diagnostics/browser/production.js")); //
// Keep track of the entire logging stack.
//


const loggers = {};
/**
 * Setup diagnostic logger with `util` namespace.
 *
 * @param {String} name Scope of the logger.
 * @returns {Function} diagnostics instance.
 * @api public
 */

exports.loggers = loggers;

function debug(name) {
  const logger = loggers[name] = (0, _diagnostics.default)(`util:${name}`);
  return logger;
}

var _default = debug;
exports["default"] = _default;

/***/ }),

/***/ "../../utils/util/lib/utils/json.js":
/*!******************************************!*\
  !*** ../../utils/util/lib/utils/json.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.parse = parse;
exports.stringify = stringify;

var _diagnostics = _interopRequireDefault(__webpack_require__(/*! ./diagnostics */ "../../utils/util/lib/utils/diagnostics.js"));

const log = (0, _diagnostics.default)('json');
/**
 * Safely run JSON method.
 *
 * @param {String} name Function name.
 * @param {...[Mixed]} args Valid arguments
 * @returns {Mixed|undefined} Parsed or stringified object.
 * @api private
 */

function run(name) {
  try {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    return JSON[name](...args);
  } catch (error) {
    log(error.message);
  }
}
/**
 * Proxy to JSON.stringify.
 *
 * @returns {String|undefined} stringified representation of the provided arguments.
 * @api public
 */


function stringify() {
  return run('stringify', ...arguments);
}
/**
 * Proxy to JSON.parse.
 *
 * @returns {Object|undefined} parsed object or undefined.
 * @api public
 */


function parse() {
  return run('parse', ...arguments);
} //
// Export both functions.
//

/***/ }),

/***/ "../../utils/util/lib/utils/register-keyboard-nav.js":
/*!***********************************************************!*\
  !*** ../../utils/util/lib/utils/register-keyboard-nav.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.registerKeyboardNavListener = registerKeyboardNavListener;
const className = 'keyboard-navigation';
let assigned = false;
/**
 * Due to Safari lacking support for :focus-visible we need to add a temp script
 * that adds similar behavior. This script adds a class on the body and using
 * css variables we use :focus to do the same styles we would with
 * :focus-visible. Once Safari has adequate :focus-visible support this js code
 * will be removed and styles will switch from :focus to :focus-visible.
 *
 * @public
 */

function bindKeyboardListeners() {
  const classList = document.body.classList;
  window.addEventListener('keydown', function keydown(ev) {
    if (ev.key !== 'Tab' || classList.contains(className)) return;
    classList.add(className);
    window.addEventListener('click', function remove() {
      classList.remove(className);
    }, {
      once: true,
      passive: true
    });
  }, {
    passive: true
  });
}

function registerKeyboardNavListener() {
  const ssr = typeof window === 'undefined' || typeof window.addEventListener !== 'function';
  if (assigned || ssr) return;
  assigned = true;
  if (!document.body) return;

  if (!document.body.classList) {
    document.addEventListener('DOMContentLoaded', bindKeyboardListeners);
  } else {
    bindKeyboardListeners();
  }
}

/***/ }),

/***/ "../../utils/util/lib/utils/url.js":
/*!*****************************************!*\
  !*** ../../utils/util/lib/utils/url.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _urlParse = _interopRequireDefault(__webpack_require__(/*! url-parse */ "../../../node_modules/url-parse/index.js"));
/**
 * Construct new URL to parse, use current location if no address was provided.
 *
 * @param {String} address URL to parse.
 * @param {...[Mixed]} args Remainder of arguments.
 * @class URL
 * @api public
 */


function URL(address) {
  if (!address) {
    const target = typeof document !== 'undefined' ? window : {};
    address = (target.location || {}).href || '';
  }

  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  return new _urlParse.default(address, ...args);
}
/**
 * Get domain parts of hostname.
 *
 * @returns {Object} Domain parts.
 * @api public
 */


_urlParse.default.prototype.domains = function domains() {
  const hostname = this.hostname.split('.');
  return {
    top: hostname.pop(),
    sub: hostname
  };
};
/**
 * Return domain with configured number of subdomains (rtl). Defaults to 0,
 * e.g. all subdomains.
 *
 * @param {Number} sub Number of subdomains.
 * @returns {String} parsed domains.
 * @api public
 */


_urlParse.default.prototype.domain = function domain() {
  let sub = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  const domains = this.domains();
  return domains.sub.slice(-sub).concat(domains.top).join('.');
}; //
// Expose the URL parser and some additional properties that might be
// useful for others or testing.
//


URL.extractProtocol = _urlParse.default.extractProtocol;
URL.location = _urlParse.default.location;
URL.qs = _urlParse.default.qs;
var _default = URL;
exports["default"] = _default;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"uxcore2": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = globalThis["webpackChunkuxcore2WebpackJsonp"] = globalThis["webpackChunkuxcore2WebpackJsonp"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	__webpack_require__.O(undefined, ["vendor"], () => (__webpack_require__("./js/build.js")))
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["vendor"], () => (__webpack_require__("./js/vendor.js")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	umd = __webpack_exports__;
/******/ 	
/******/ })()
;
//# sourceMappingURL=uxcore2.js.map