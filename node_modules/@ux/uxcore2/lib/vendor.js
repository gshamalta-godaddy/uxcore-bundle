"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var ReactIntl = _interopRequireWildcard(require("react-intl"));

var ReactTransitionGroup = _interopRequireWildcard(require("react-transition-group"));

var ReactFocusLock = _interopRequireWildcard(require("react-focus-lock"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

window.ux = window.ux || {};
window.ux.React = window.React = _react.default;
window.ux.ReactDOM = window.ReactDOM = _reactDom.default;
window.ux.PropTypes = window.PropTypes = _propTypes.default;
window.ux.ReactTransitionGroup = window.ReactTransitionGroup = ReactTransitionGroup;
window.ux.ReactFocusLock = ReactFocusLock; //
// Expose React hook to Format.JS, requires React as global.
//

window.ux.intl = ReactIntl;