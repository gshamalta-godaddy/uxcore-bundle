/* eslint no-sync: 0, no-process-env: 0 */
const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;
const DuplicatePackageCheckerPlugin = require('duplicate-package-checker-webpack-plugin');
const config = require('@ux/webpack-config');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const webpack = require('webpack');
const path = require('path');
const { RTLMarkets } = require('@godaddy/markets');
const RTLPlugin = require('@godaddy/webpack-rtlcss-plugin');
const TerserPlugin = require('terser-webpack-plugin');
const pkg = require('./package.json');

const isRTLMarket = RTLMarkets.includes(config.variables['uxcore-market']);
const uxcore2Packages = Object.keys(config.externals)
  .filter(k => !config.vendorExternals[k])
  .map(k => k.replace('/', path.sep));

const { optimize, EnvironmentPlugin } = webpack;
const root = process.env.UXCORE_ROOT || __dirname; // eslint-disable-line no-process-env
const dist = path.join(root, 'dist');
const env = process.env.NODE_ENV || 'development';
const analyze = Boolean(process.env.ANALYZE);

// Enables built-in webpack optimization for prod builds
// @see: https://webpack.js.org/configuration/mode/
const mode = env === 'production' ? 'production' : 'development';

// Always enable source maps for JS and CSS
// @see: https://webpack.js.org/configuration/devtool/
const devtool = 'source-map';

/**
 * Config for the primary JavaScript bundle.
 *
 * This config separates uxcore2 components from "vendor" modules into separate
 * chunks. The reasoning is that ideally, dependencies rarely change, allowing
 * the vendor chunk to remain unchanged (no new download) between releases of
 * code changes to the uxcore2 components.
 *
 * This config also has a safety-check to ignore modules not intended for
 * runtime use in the browser. These include packages only used to construct
 * CSS, which we want to make sure do not creep into our runtime code.
 *
 * @type {object} webpack config
 */
const jsConfig = {
  name: 'JS',
  mode,
  devtool,
  entry: {
    uxcore2: [
      path.join(__dirname, 'js', 'build.js'),
      path.join(__dirname, 'js', 'vendor.js')
    ]
  },
  target: 'browserslist',
  output: {
    path: dist,
    filename: path.join('js', '[name].js'),
    sourceMapFilename: '[file].map',
    library: 'umd',
    uniqueName: 'uxcore2WebpackJsonp'
  },
  plugins: [
    analyze && new BundleAnalyzerPlugin(),
    new EnvironmentPlugin({
      NODE_ENV: env,
      BUNDLE_NAME: pkg.name.substr(1),
      BUNDLE_VERSION: pkg.version
    }),
    // Forcibly ignore packages not intended for runtime (i.e. styles related)
    // If ignored packages are found, the build will likely fail (intended)
    new webpack.IgnorePlugin({
      checkResource(resource, context) {
        const match = /^(@ux[\\/](stylevars)|polished|linaria)/.exec(resource);

        if (match) {
          const { red } = require('ansi-styles');
          // eslint-disable-next-line no-console
          console.error(`${ red.open }Ignoring ${ match[1] } found in ${ context }${ red.close }`);
          return true;
        }
      }
    }),
    !analyze && new optimize.ModuleConcatenationPlugin(),
    new DuplicatePackageCheckerPlugin({ verbose: true })
  ].filter(Boolean),
  resolve: {
    alias: {
      debug: 'diagnostics',
      diagnostics: require.resolve('diagnostics/browser/production.js')
    }
  },
  module: {
    rules: [{
      test: /\.jsx?$/,
      use: [{
        loader: 'babel-loader'
      }]
    }]
  },
  optimization: {
    minimize: env === 'production' || analyze,
    minimizer: [
      new TerserPlugin({
        terserOptions: {
          warnings: true
        }
      })
    ],
    splitChunks: {
      cacheGroups: {
        // Split all packages from node_modules to vendor chunk
        // @see: https://webpack.js.org/plugins/split-chunks-plugin/#root
        vendor: {
          name: () => {
            return 'vendor';
          },
          test: (module) => {
            const { resource } = module;

            if (/[\\/]node_modules[\\/]/.test(resource)) {
              return !uxcore2Packages.some(x => resource.includes(x));
            }

            return false;
          },
          chunks: 'all'
        }
      }
    }
  }
};

/**
 * Config for the uxcore2.css bundle.
 *
 * Some of our styles are authored in JavaScript with Linaria while some
 * may be authored with SCSS or CSS. This config will compile CSS from all sources.
 *
 * Even though JavaScript is loaded, the only output is a CSS file.
 *
 * @type {object} webpack config
 */
const cssConfig = {
  name: 'CSS',
  mode,
  devtool,
  entry: [
    path.join(__dirname, 'js', 'styles.js')
  ],
  output: {
    path: '/dev',
    filename: 'null'
  },
  plugins: [
    new MiniCssExtractPlugin({
      filename: path.join('..', dist, 'css', 'uxcore2.css')
    }),
    isRTLMarket && new RTLPlugin()
  ].filter(Boolean),
  resolve: config.cssResolve(),
  module: {
    rules: [{
      test: /\.s?css$/,
      use: [
        {
          loader: MiniCssExtractPlugin.loader
        },
        {
          loader: 'css-loader',
          options: {
            importLoaders: 1,
            sourceMap: true
          }
        },
        {
          loader: 'postcss-loader',
          options: {
            postcssOptions: {
              plugins: config.postcss
            },
            sourceMap: true
          }
        }
      ]
    }
    ].filter(Boolean)
  }
};

/**
 * Returns the JS and CSS assets needed for the bundle
 *
 * @type {object[]} configs
 */
module.exports = [jsConfig, cssConfig];
