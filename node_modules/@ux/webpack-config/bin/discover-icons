#!/usr/bin/env node
/* eslint-disable no-console, max-statements */

const globby = require('globby');
const path = require('path');
const fs = require('fs');

(async function main() {
  /**
   * The location of our components that have @ux/icon references
   *
   * @type {String}
   */
  const components = path.join(process.cwd(), '..', '..', 'components');

  /**
   * The matcher for the @ux/icon/<name> discovery process.
   *
   * @type {RegExp}
   */
  const matcher = /@ux\/icon\/([\w-\d]+)/gim;

  //
  // Discover which packages are allowed in our UXCore2 bundles so we know
  // which files with icons eventually end up in our bundle.
  //
  const uxcore2 = path.join(__dirname, '..', '..', '..', 'bundles/uxcore2/js/index.js');
  const bundle = await fs.promises.readFile(uxcore2, 'utf-8');
  const pkgs = await globby('*/package.json', { cwd: components });
  const allowed = pkgs.map(function filter(pkgjson) {
    return {
      name: require(path.join(components, pkgjson)).name,
      dir: path.dirname(pkgjson)
    };
  }).filter(({ name }) => {
    return bundle.includes(name);
  }).map(({ dir }) => dir);

  //
  // Discover which icons are included in the various components.
  //
  const src = await globby('*/src/*.js', { cwd: components });
  const files = src.filter((file) => {
    const dir = path.dirname(path.join(file, '..'));

    return allowed.includes(dir);
  }).map(file => path.join(components, file));

  const discovered = [];

  //
  // Iterate over all the src files to search for potential @ux/icon includes
  // so we can generate a list of which @ux/icon's are in our UXCore2 bundle.
  //
  for (let i = 0; i < files.length; i++) {
    const content = await fs.promises.readFile(files[i], 'utf-8');
    const results = content.match(matcher);

    // eslint-disable-next-line no-continue
    if (!results) continue;
    discovered.push(...results.map(str => str.split('/').pop()));
  }

  //
  // Clean up the result set by removing duplicates and make it usable format
  // for the plugin that is going to consume the result set.
  //
  const dedupe = discovered.filter((icon, index) => discovered.indexOf(icon) === index);
  const icons = JSON.stringify(dedupe);

  console.log(`Found ${dedupe.length} unique @ux/icon's in our components, writing file`);
  await fs.promises.writeFile(path.join(__dirname, '..', 'icon-externals.json'), icons);
}());
