/* eslint no-process-env: 0, no-sync: 0 */
const resolve = require('browser-resolve');
const fs = require('fs');
const mkdirp = require('mkdirp');
const camelCase = require('camelcase');
const predefinedExternals = require('./externals');
const tryRequire = require('try-require');
const ensure = require('./ensure');
const path = require('path');

//
// Get the locale from the environment variable and split it into it's two components
// as per the IETF language tag specification
//
function getLocale() {
  const locale = process.env.WRHS_LOCALE || process.env.LOCALE || 'en-US';
  const [lang, region] = locale.split('-');

  return {
    lang,
    region,
    locale
  };
}

//
// Read known environment variables.
//
const NODE_ENV = process.env.NODE_ENV || 'development';
const { lang, region } = getLocale();
const vars = {
  'uxcore-env': NODE_ENV,
  'uxcore-market': (process.env.UXCORE_LANG || lang || 'en').toLowerCase(),
  'uxcore-region': (process.env.UXCORE_REGION || region || 'US').toLowerCase(),
  'uxcore-label': process.env.UXCORE_LABEL || 'gd'
};

const vendorExternals = {
  'react': {
    root: 'React',
    commonjs: 'react',
    commonjs2: 'react',
    amd: 'react'
  },
  'react-intl': {
    root: ['ux', 'intl'],
    commonjs: ['react-intl', 'default'],
    commonjs2: ['react-intl', 'default'],
    amd: 'react-intl'
  },
  'react-dom': {
    root: 'ReactDOM',
    commonjs: 'react-dom',
    commonjs2: 'react-dom',
    amd: 'react-dom'
  },
  'react-focus-lock': {
    root: ['ux', 'ReactFocusLock'],
    commonjs: ['react-focus-lock', 'default'],
    commonjs2: ['react-focus-lock', 'default'],
    amd: 'react-focus-lock'
  },
  'react-transition-group': {
    root: ['ux', 'ReactTransitionGroup'],
    commonjs: ['react-transition-group', 'default'],
    commonjs2: ['react-transition-group', 'default'],
    amd: 'react-transition-group'
  },
  'prop-types': {
    root: 'PropTypes',
    commonjs: 'prop-types',
    commonjs2: 'prop-types',
    amd: 'prop-types'
  }
};

// This is a mapping of our NODE_ENV to webpack's mode (https://webpack.js.org/concepts/mode/)
// Mode only supports the values 'development' and 'production'.
// We assuming anything not listed here will get 'development' and
// that our test environment should get the 'development' settings
// (which is analogous to what we have today already)
const modes = {
  prod: 'production',
  production: 'production'
};

module.exports = {
  //
  // Variables that are required for the SASS build.
  //
  get variables() {
    return vars;
  },

  //
  // Return the locale from the environment variables.
  //
  get locale() {
    return getLocale().locale;
  },

  //
  // Which webpack@4 mode should be used
  //
  get mode() {
    return modes[NODE_ENV] || 'development';
  },

  //
  // Alias which refers to the bundled dist file. This is useful for local builds
  // that put UXCore2 in the `vendor` bundle.
  //
  alias(rootDir) {
    if (!rootDir) {
      throw new Error('argument rootDir must be a string');
    }

    return {
      '@ux/uxcore2': path.join(rootDir, 'node_modules', '@ux', 'uxcore2', 'dist', 'js', 'uxcore2.js')
    };
  },

  /**
   * In order to make UXCORE_* env variables available to linaria/loader,
   * we write them out to a JSON file and set an alias so that it is loaded.
   *
   * This can be removed once `@ux/stylevars` is replaced by Themes.
   *
   * @returns {object} resolve
   */
  cssResolve() {
    const envOverridesPath = path.join(__dirname, '.tmp', 'env-overrides.json');
    const envOverrides = Object.entries(vars).reduce((acc, [k, v]) => {
      acc[camelCase(k)] = v;
      return acc;
    }, {});

    mkdirp.sync(path.dirname(envOverridesPath));
    fs.writeFileSync(envOverridesPath, JSON.stringify(envOverrides), 'utf8');

    return {
      alias: {
        '../../overrides/env-overrides.json': envOverridesPath
      }
    };
  },

  resolve(resolveConfig) {
    let mainFields = resolveConfig.mainFields;
    const {
      rootDir,
      filter,
      target = 'web',
      ...config
    } = resolveConfig;
    if (!Array.isArray(mainFields) && typeof target !== 'string') {
      throw new Error([
        'Explicit resolve.mainFields or webpack target is required.',
        'Only string values are supported for target.',
        'see: https://webpack.js.org/configuration/target/'
      ].join('\n'));
    }

    if (!Array.isArray(mainFields)) {
      mainFields = ['web', 'webworker'].includes(target)
        ? ['browser', 'module', 'main']
        : ['module', 'main'];
    }

    return {
      ...config,
      alias: this.dedupe(rootDir, { filter, mainFields }),
      mainFields
    };
  },

  //
  // Force flatten major version mismatches between `@ux` dependencies, e.g. if:
  //
  // - `@ux/button` depends on `@ux/component@4.x.x`
  // - `@ux/dropdown` depends on `@ux/component@5.x.x`
  // - `@ux/uxcore2` depends on `@ux/component@6.x.x`
  //
  // then we want to force `@ux/component@6.x.x` to be **THE ONLY VERSION**
  // of `@ux/component` in the entire webpack bundle.
  //
  dedupe(rootDir, { filter, mainFields = ['browser', 'module', 'main'] } = {}) {
    const pkg = require(path.join(rootDir, 'package.json'));
    const [mainField, ...fields] = mainFields;
    // Default to deduping known GoDaddy-specific scopes.
    if (!filter) filter = (name) => /@ux/.test(name) || /@godaddy/.test(name);

    // TODO (mswaagman): when upgrading to Webpack@5, `eventemitter3` and `querystringify`
    // should be removed from this list. Assuming all upstream dependencies have been fixed by then.
    return [...Object.keys(pkg.dependencies), ...Object.keys(pkg.devDependencies)]
      .filter(filter)
      .reduce(function reduce(acc, name) {
        const resolved = acc[name] = resolve.sync(name, {
          basedir: rootDir,
          browser: mainField,
          packageFilter: (pkg) => {
            const remaining = fields.slice();
            while (!pkg[mainField] && remaining.length) {
              const field = remaining.shift();
              pkg[mainField] = pkg[field];
            }

            return pkg;
          }
        });

        acc[name] = resolved.replace(/index\.js$/, '');

        return acc;
      }, ['eventemitter3', 'querystringify'].reduce((acc, dep) => {
        const resolved = tryRequire.resolve(dep);
        if (resolved) acc[dep] = resolved;

        return acc;
      }, {
        debug: 'diagnostics',
        diagnostics: require.resolve('diagnostics/browser/production.js')
      }));
  },

  get vendorExternals() {
    return vendorExternals;
  },

  //
  // Externalize direct imports of @ux components, and all @ux/uxcore2 imports,
  // this works for statements like:
  //
  // `import { Dropdown } from '@ux/uxcore2'`
  // `import Dropdown from '@ux/dropdown'`
  //
  get externals() {
    return {
      '@ux/uxcore2': 'ux',
      ...predefinedExternals,
      ...vendorExternals
    };
  },

  //
  // Loaders required to transpile the JSX, ES6 and SCSS code of @ux/uxcore2.
  //
  get module() {
    //
    // Set of loaders for both JS and SCSS.
    //
    return {
      rules: [{
        test: /\.jsx?$/,
        use: [{
          loader: 'babel-loader',
          options: {
            presets: [
              '@babel/preset-env',
              '@babel/preset-react'
            ]
          }
        }]
      }, {
        test: /\.css$/,
        use: [{
          loader: 'style-loader'
        }, {
          loader: 'css-loader'
        }, {
          loader: 'postcss-loader'
        }]
      }, {
        test: /versions\.static\.js$/,
        use: require.resolve('./versions-loader')
      }]
    };
  },

  //
  // Removes duplicate icon CSS from bundles that are already included with
  // the @ux/uxcore2 css builds.
  //
  get dedupeIcons() {
    const icons = require('./icon-externals.json');
    ensure(['postcss-remove-declaration']);

    return require('postcss-remove-declaration')({
      remove: {
        '*': icons.map(name => `--uxp-icon-${name}`),
        ...(icons.reduce((name, memo) => {
          memo[`.uxicon-${name}:before`] = {
            content: `var(--uxp-icon-${name})`
          };
        }, {}))
      }
    });
  },

  //
  // Default set of PostCSS processors. The media query 4 shim is required by
  // twitter bootstrap, of which @ux/uxcore2 is derived.
  //
  get postcss() {
    ensure(['postcss-discard-duplicates', 'autoprefixer']);

    return () => [
      require('postcss-discard-duplicates'),
      require('autoprefixer')
    ].filter(Boolean);
  }
};
