const fs = require('fs');
const path = require('path');
const debug = require('diagnostics')('ux-webpack:read-versions');
const async = require('async');

/**
 * 1. Read all directories from the given scope in node_modules/
 * 2. Read versions from all packages
 * 3. Reduce and respond.
 * @param  {Object}   options configuration for which scope we're reading
 * @param  {String}   options.rootDir root directory for repo
 * @param  {String}   options.scope scope for the module that we're reading
 * @param  {Function} callback Continuation to respond to when complete
 */
function readVersions({ rootDir, scope }, callback) {
  const moduleDir = path.resolve(rootDir, 'node_modules', scope);

  debug('read node_modules', moduleDir);
  fs.readdir(moduleDir, (err, pkgs) => {
    if (err) return callback(err);

    callback(null, pkgs.reduce(function (acc, pkg) {
      const name = `${scope}/${pkg}`;
      const version = require(path.resolve(moduleDir, pkg, 'package')).version;

      debug('declare version', name, version);
      acc[name] = version;
      return acc;
    }, {}));
  });
}

/**
 * Reduces all versions in `node_modules/<scope>/<*>/package.json` asynchronously
 * into a single Object.
 * @param {Object} options set of options that we're looking at
 * @param {String} [options.output] where we're expect the write the versions file,
 * if no output is selected, we will pipe the version into `debug`
 * @param {String} [options.scopes = ['@ux']] what scopes we're looking at
 * @param {String} options.rootDir root that contains node_modules
 * @param {Boolean} [options.includeHost] `true` if the host package version should be included
 * @param {Function} [callback=() => {}] Continuation to respond to when complete
 */
module.exports = function ({ output, rootDir, scopes = ['@ux'], includeHost }, callback = () => {}) {
  const targets = scopes.map(scope => ({ rootDir, scope }));
  async.map(targets, readVersions, (err, versions) => {
    if (err) {
      return callback(err);
    }

    const result = versions.reduce((acc, packages) => {
      return { ...acc, ...packages };
    }, {});

    if (includeHost) {
      const hostPkg = require(path.resolve(rootDir, 'package'));
      debug('declare host', hostPkg.name, hostPkg.version);
      result[hostPkg.name] = hostPkg.version;
    }

    const code = [
      `/* auto-generated on ${new Date().toUTCString()} */`,
      `export default ${JSON.stringify(result, null, 2)};`
    ].join('\n\n');

    if (output) {
      fs.writeFile(output, code, function (error) {
        if (error) return callback(error);
        // eslint-disable-next-line no-console
        console.log(`Wrote ${output}`);
        callback(null, result);
      });
    } else {
      debug('accumulated versions', code);
      return callback(null, result);
    }
  });
};
