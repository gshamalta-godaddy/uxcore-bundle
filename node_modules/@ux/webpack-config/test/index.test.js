/* eslint no-undefined: 0, no-process-env: 0, max-statements: 0 */
const assume = require('assume');
const config = require('../');
const path = require('path');
const fs = require('fs');

describe('@ux/webpack-config', function () {
  describe('.vendorExternals', function () {
    it('includes react', function () {
      const externals = config.vendorExternals;
      assume(externals).to.be.an('object');
      assume(Object.keys(externals)).length(6);
      assume(externals.react).deep.equals({
        root: 'React',
        commonjs: 'react',
        commonjs2: 'react',
        amd: 'react'
      });
      assume(externals['react-dom']).deep.equals({
        root: 'ReactDOM',
        commonjs: 'react-dom',
        commonjs2: 'react-dom',
        amd: 'react-dom'
      });
    });

    it('includes react-intl', function () {
      const externals = config.vendorExternals;
      assume(externals).to.be.an('object');
      assume(externals['react-intl']).deep.equals({
        amd: 'react-intl',
        commonjs: ['react-intl', 'default'],
        commonjs2: ['react-intl', 'default'],
        root: ['ux', 'intl']
      });
    });

    it('does not include react-addons-transition-group', function () {
      const externals = config.vendorExternals;
      assume(externals).to.be.an('object');
      assume(externals['react-addons-transition-group']).does.not.exist();
    });

    it('does not include react-addons-css-transition-group', function () {
      const externals = config.vendorExternals;
      assume(externals).to.be.an('object');
      assume(externals['react-addons-css-transition-group']).does.not.exist();
    });

    it('includes react-transition-group', function () {
      const externals = config.vendorExternals;
      assume(externals).to.be.an('object');
      assume(externals['react-transition-group']).deep.equals({
        root: ['ux', 'ReactTransitionGroup'],
        commonjs: ['react-transition-group', 'default'],
        commonjs2: ['react-transition-group', 'default'],
        amd: 'react-transition-group'
      });
    });

    it('includes react-transition-group', function () {
      const externals = config.vendorExternals;
      assume(externals).to.be.an('object');
      assume(externals['react-focus-lock']).deep.equals({
        root: ['ux', 'ReactFocusLock'],
        commonjs: ['react-focus-lock', 'default'],
        commonjs2: ['react-focus-lock', 'default'],
        amd: 'react-focus-lock'
      });
    });
  });

  describe('.externals.json', function () {
    it('contains a list of generated externals', function () {
      const externals = require('../externals');
      assume(externals).to.be.an('object');
      ['Button', 'Dropdown', 'Table'].forEach(function each(ext) {
        const pkg = `@ux/${ext.toLowerCase()}`;
        assume(externals[pkg]).to.deep.equal({
          root: ['ux', ext],
          commonjs: [pkg, 'default'],
          commonjs2: [pkg, 'default'],
          amd: pkg
        });
      });
    });

    it('contains migrated form-element packages', function () {
      const externals = require('../externals');
      assume(externals).to.be.an('object');
      ['Checkbox', 'Radio', 'QuantitySelector', 'Password', 'Search', 'TelephoneInput'].forEach(function each(ext) {
        const pkgName = ext === 'TelephoneInput' ? 'telephone-input' : ext.toLowerCase();
        const pkg = `@ux/form-element/${pkgName}`;
        assume(externals[pkg]).to.deep.equal({
          root: ['ux', ext],
          commonjs: [pkg, 'default'],
          commonjs2: [pkg, 'default'],
          amd: pkg
        });
      });
    });
  });

  describe('.icon-externals.json', function () {
    before(function () {
      require('../bin/discover-icons');
    });

    it('contains a list of icon names', function () {
      const externals = require('../icon-externals.json');

      assume(externals).is.a('array');
      assume(externals.length).to.have.gte(10);

      //
      // This can change, but this seems to be most fail safe icon to always
      // be included in our builds so we can at least assert that it found this
      // specific icon name
      //
      assume(externals).includes('x');

      externals.forEach(function (name) {
        assume(name).is.a('string');
      });
    });
  });

  describe('.dedupeIcons', function () {
    it('returns a pre-configured function', function () {
      const dedupe = config.dedupeIcons;

      assume(dedupe).is.a('function');
    });
  });

  describe('.resolve', function () {
    // @TODO: investigate why this fails (possibly not needed anymore)
    it.skip('patches through additional webpack resolve configuration', function () {
      const resolve = config.resolve({
        rootDir: path.join(__dirname, '../../../bundles/uxcore2'),
        extensions: ['mjs', 'js'],
        symlinks: true,
        alias: {}
      });

      assume(resolve).is.an('object');
      assume(resolve.mainFields).deep.equals(['browser', 'module', 'main']);
      assume(resolve.symlinks).equals(true);
      assume(resolve.alias).not.deep.equals({});
    });

    it('throws with no mainFields and non-string target', function () {
      assume(() => {
        const resolve = config.resolve({ target: null });
        assume(resolve).is.an('object');
      }).throws(/Explicit resolve.mainFields or webpack target is required/);
    });

    // @TODO: investigate why this fails (possibly not needed anymore)
    it.skip('responds with a webpack `resolve` shape { target: web }', () => {
      const resolve = config.resolve({
        rootDir: path.join(__dirname, '../../../bundles/uxcore2'),
        target: 'web'
      });
      assume(resolve).is.an('object');
      assume(resolve.mainFields).deep.equals(['browser', 'module', 'main']);
      assume(resolve.alias).is.an('object');
      assume(resolve.alias['@ux/button']).to.include('node_modules/@ux/button/lib');
    });

    it('responds with a webpack `resolve` shape { target: node }', () => {
      const resolve = config.resolve({
        rootDir: path.join(__dirname, '../../../bundles/uxcore2'),
        target: 'node'
      });

      assume(resolve).is.an('object');
      assume(resolve.mainFields).deep.equals(['module', 'main']);
      assume(resolve.alias).is.an('object');
      assume(resolve.alias['@ux/button']).to.include('node_modules/@ux/button/src');
    });
  });

  describe('.dedupe', function () {
    it('returns list of modules that can be aliased based on dependencies', function () {
      const dedupe = config.dedupe(path.join(__dirname, '..'));

      assume(Object.keys(dedupe)).to.deep.equal(['debug', 'diagnostics', 'eventemitter3', 'querystringify']);
      assume(dedupe).to.have.property('debug', 'diagnostics', 'querystringify', 'eventemitter3');
    });

    it('points `diagnostics` to the browser build', function () {
      const { diagnostics } = config.dedupe(path.join(__dirname, '..'));

      assume(diagnostics).to.include('browser');
    });

    // @TODO: investigate why this fails (possibly not needed anymore)
    it.skip('.alias resolves to dir if index.js', function () {
      const dedupe = config.dedupe(path.join(__dirname, '../../../bundles/uxcore2'));
      assume(dedupe['@ux/button']).to.include('@ux/button');
    });
  });

  describe('.externals', function () {
    it('is a getter and returns an object', function () {
      const externals = config.externals;

      assume(externals).to.be.an('object');
      assume(externals['@ux/uxcore2']).equals('ux');
      assume(externals.react).deep.equals({
        root: 'React',
        commonjs: 'react',
        commonjs2: 'react',
        amd: 'react'
      });
      assume(externals['react-dom']).deep.equals({
        root: 'ReactDOM',
        commonjs: 'react-dom',
        commonjs2: 'react-dom',
        amd: 'react-dom'
      });
    });

    it('includes react-intl', function () {
      const externals = config.externals;
      assume(externals).to.be.an('object');
      assume(externals['react-intl']).deep.equals({
        amd: 'react-intl',
        commonjs: ['react-intl', 'default'],
        commonjs2: ['react-intl', 'default'],
        root: ['ux', 'intl']
      });
    });

    it('does not include react-addons-transition-group', function () {
      const externals = config.externals;
      assume(externals).to.be.an('object');
      assume(externals['react-addons-transition-group']).does.not.exist();
    });

    it('does not include react-addons-css-transition-group', function () {
      const externals = config.externals;

      assume(externals).to.be.an('object');
      assume(externals['react-addons-css-transition-group']).does.not.exist();
    });

    it('includes react-transition-group', function () {
      const externals = config.externals;
      assume(externals).to.be.an('object');
      assume(externals['react-transition-group']).deep.equals({
        root: ['ux', 'ReactTransitionGroup'],
        commonjs: ['react-transition-group', 'default'],
        commonjs2: ['react-transition-group', 'default'],
        amd: 'react-transition-group'
      });
    });

    it('includes @godaddy/request', function () {
      const externals = config.externals;
      assume(externals).to.be.an('object');
      assume(externals['@godaddy/request']).deep.equals({
        amd: '@godaddy/request',
        commonjs: ['@godaddy/request', 'default'],
        commonjs2: ['@godaddy/request', 'default'],
        root: ['ux', 'request']
      });
    });

    it('reads from generated externals.json', function () {
      const externals = config.externals;

      assume(externals).to.be.an('object');
      assume(externals['@ux/dropdown']).deep.equals({
        amd: '@ux/dropdown',
        commonjs: ['@ux/dropdown', 'default'],
        commonjs2: ['@ux/dropdown', 'default'],
        root: ['ux', 'Dropdown']
      });

      assume(externals['@ux/button']).deep.equals({
        amd: '@ux/button',
        commonjs: ['@ux/button', 'default'],
        commonjs2: ['@ux/button', 'default'],
        root: ['ux', 'Button']
      });
    });

    ['code'].forEach(dep => {
      it(`excludes @ux/${dep}`, function () {
        const externals = config.externals;

        assume(externals).to.be.an('object');
        assume(externals[`@ux/${dep}`]).does.not.exist();
      });
    });

    const reserved = {
      util: 'utils'
    };

    Object.keys(reserved).forEach(key => {
      const packageName = `@ux/${key}`;

      it(`properly maps ${packageName}`, function () {
        const externals = config.externals;

        assume(externals).to.be.an('object');
        assume(externals[packageName]).deep.equals({
          root: ['ux', reserved[key]],
          commonjs: [packageName, 'default'],
          commonjs2: [packageName, 'default'],
          amd: packageName
        });
      });
    });
  });

  it('.module.loaders provides default loaders', function () {
    assume(config.module).is.an('object');
    assume(Object.keys(config.module)).deep.equals(['rules']);
    assume(config.module.rules).is.an('array');
    assume(config.module.rules).length(3);

    assume(config.module.rules).deep.contains({
      test: /\.jsx?$/,
      use: [{
        loader: 'babel-loader',
        options: {
          presets: [
            '@babel/preset-env',
            '@babel/preset-react'
          ]
        }
      }]
    });

    assume(config.module.rules[1].test).to.deep.equal(/\.css$/);
    assume(config.module.rules[1].use).deep.contains({ loader: 'style-loader' });
    assume(config.module.rules[1].use).deep.contains({ loader: 'css-loader' });
    assume(config.module.rules[1].use).deep.contains({
      loader: 'postcss-loader'
    });

    assume(config.module.rules).deep.contains({
      test: /versions\.static\.js$/,
      use: require.resolve('../versions-loader')
    });
  });

  it('.alias() throws', function () {
    assume(function () {
      config.alias();
    }).throws('argument rootDir must be a string');
  });

  it('.alias(rootDir) has alias for vendor bundles', function () {
    const alias = config.alias(__dirname);
    assume(alias).to.be.an('object');
    assume(alias['@ux/uxcore2']).to.be.a('string');
    assume(alias['@ux/uxcore2']).to.include('dist/js/uxcore2.js');
  });

  it('.postcss provides PostCSS plugins', function () {
    assume(config.postcss).is.a('function');

    const result = config.postcss();
    assume(result).is.an('array');
    assume(result).length(2);
  });

  describe('.locale', function () {
    it('returns locale from environment', function () {
      assume(config.locale).to.equal('en-US');

      process.env.WRHS_LOCALE = 'nl-NL';
      assume(config.locale).to.equal('nl-NL');
      delete process.env.WRHS_LOCALE;

      process.env.LOCALE = 'en-GB';
      assume(config.locale).to.equal('en-GB');
      delete process.env.LOCALE;
    });
  });

  describe('.variables', function () {
    it('returns default variables for uxcore2 builds', function () {
      assume(config.variables).is.an('object');
      assume(config.variables).to.have.property('uxcore-env', 'development');
      assume(config.variables).to.have.property('uxcore-label', 'gd');
      assume(config.variables).to.have.property('uxcore-region', 'us');
      assume(config.variables).to.have.property('uxcore-market', 'en');
    });
  });

  describe('.cssResolve', function () {
    /* eslint-disable no-sync */
    const overrideFile = path.join(__dirname, '..', '.tmp', 'env-overrides.json');

    function safeClean() {
      try {
        fs.unlinkSync(overrideFile);
      } catch (e) {
        // ignore
      }
    }

    beforeEach(function () {
      safeClean();
    });

    after(function () {
      safeClean();
    });

    it('writes out temporary env override json file', function () {
      assume(fs.existsSync(overrideFile)).is.false();
      config.cssResolve();
      assume(fs.existsSync(overrideFile)).is.true();
    });

    it('writes out expected uxcore vars as JSON', function () {
      config.cssResolve();
      const contents = fs.readFileSync(overrideFile, 'utf8');
      const json = JSON.parse(contents);
      assume(json).deep.equals({
        uxcoreEnv: 'development',
        uxcoreMarket: 'en',
        uxcoreRegion: 'us',
        uxcoreLabel: 'gd'
      });
    });

    it('returns resolve.alias with env-overrides.json', function () {
      const resolve = config.cssResolve();
      assume(resolve).is.an('object');
      assume(resolve).property('alias');
      assume(resolve.alias).is.an('object');
      assume(resolve.alias).property('../../overrides/env-overrides.json');
      assume(resolve.alias['../../overrides/env-overrides.json']).includes(
        'webpack-config/.tmp/env-overrides.json'
      );
    });
  });
});
