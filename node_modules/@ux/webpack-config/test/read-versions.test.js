const path = require('path');
const assume = require('assume');
const readVersions = require('../read-versions');

describe('read-versions', function () {
  it('should error no `node_modules/@ux` exists', function (done) {
    const options = {
      rootDir: path.join(__dirname),
      scopes: ['@ux']
    };
    readVersions(options, function (err) {
      assume(err).not.equals(null);
      assume(err.code).equals('ENOENT');
      done();
    });
  });

  it('should read versions from node_modules/@ux', function (done) {
    const options = {
      rootDir: path.join(__dirname, '../../../../'),
      scopes: ['@ux']
    };

    readVersions(options, function (err, versions) {
      assume(err).equals(null);
      assume(versions).is.an('object');
      assume(Object.keys(versions).includes('@ux/button')).true();
      done();
    });
  });

  it('should read versions from every given scope', function (done) {
    const scopes = ['@ux', '@godaddy'];
    const found = new Set();
    const options = {
      rootDir: path.join(__dirname, '../../../../'),
      scopes
    };

    readVersions(options, function (err, versions) {
      assume(err).equals(null);
      assume(versions).is.an('object');

      Object.keys(versions).forEach(pkg => {
        const scope = pkg.split('/')[0];
        found.add(scope);
      });

      assume(found.size).equals(scopes.length);
      done();
    });
  });

  it('can include the host package version', function (done) {
    const options = {
      rootDir: path.join(__dirname, '../../../../'),
      scopes: ['@ux'],
      includeHost: true
    };

    readVersions(options, function (err, versions) {
      assume(err).equals(null);
      assume(versions).is.an('object');
      assume(Object.keys(versions).length).is.approximately(45, 50);
      assume(versions).to.have.property('@ux/webpack-config');
      done();
    });
  });
});
