/* eslint no-undefined: 0 */
const path = require('path');
const assume = require('assume');
const versionsLoader = require('../versions-loader');

/**
 * Assumes that the loader pitches the correct code to webpack
 * from a particular dirname. This tests our ability to search up
 * the directory structure.
 * @param {String} dirname Directory name for the resourcePath
 * @param {Function} assert Custom assertion function to execute
 * @returns {Function} Test function that pitches the dirname and executes the `assert`.
 */
function assumePitches(dirname, assert) {
  return function (done) {
    const context = {
      async() { return assumeCode; },
      cacheable() { this._cacheable = true; },
      resourcePath: path.join(dirname)
    };

    //
    // Webpack loaders call `this.async()` to get their callback function. It is not
    // passed to them as in Node.js.
    //
    function assumeCode(err, code) {
      //
      // If passed a custom assert function; execute it instead
      // of the default assumptions below;
      //
      if (assert) {
        assert(err, code);
        return done();
      }

      assume(err).equals(null);
      assume(context._cacheable).equals(true);
      assume(code).is.a('string');
      assume(code).to.match(/^module\.exports = {\n/);
      assume(code).to.include('"@ux/button": ');
      done();
    }

    versionsLoader.pitch.call(context);
  };
}

describe('versions-loader', function () {
  it('exposes the correct webpack loader api', function () {
    assume(versionsLoader).is.a('function');
    assume(versionsLoader.length).equals(0);
    assume(versionsLoader.pitch).is.a('function');
    assume(versionsLoader.pitch.length).equals(0);
  });

  it('"pitches" literal code to webpack based on resourcePath', assumePitches(path.join(__dirname, '../../../../')));
  it('searches for node_modules in the file system', assumePitches(path.join(__dirname, '../../../../')));
  it('searches for node_modules in the file system relative to a file', assumePitches(path.join(__dirname, '../../../../')));
  it('includes the relative directory on failure', assumePitches('/tmp', function (err, code) {
    assume(err).not.equal(null);
    assume(code).equals(undefined);
    assume(err.message).equals('Cannot find node_modules relative to /tmp');
  }));
});
