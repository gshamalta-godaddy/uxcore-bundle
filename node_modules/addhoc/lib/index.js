"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = addhoc;

var _react = _interopRequireDefault(require("react"));

var _hoistNonReactStatics = _interopRequireDefault(require("hoist-non-react-statics"));

var _excluded = ["forwardedRef"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * @typedef {Function} withHOC
 * Higher-Order Component function to provide some functionality.
 *
 * @param {React.Component} WrappedComponent The component to be augmented with additional functionality
 * @returns {React.Component} A wrapped component class that provides additional functionality
 */

/**
 * @callback getWrappedComponentFn
 * @param {Object} extraProps A set of extra props, if any, to add to the wrapped component
 * @returns {React.ReactElement} The component to wrap with your HOC
 */

/**
 * @callback renderFn
 * @param {getWrappedComponentFn} getWrappedComponent A function to get the component being wrapped
 * @param {...any} [extraHOCArgs] Any additional arguments that you passed into addhoc will be passed through
 * @returns {React.ReactElement} A React component tree that contains the wrapped component
 */

/**
 * Handy little helper to create proper HOC functions complete with hoisted statics and forwarded refs
 *
 * @param {renderFn} renderFn A function that renders your HOC with the wrapped component inside -- see examples
 * @param {String} [name] Optional name of the HOC, used to augment the displayName on the wrapped component
 * @param {...any} [extraHOCArgs] Any additional arguments that you want to be passed through to your render function
 * @returns {withHOC} A higher order component function that accepts a component and returns it wrapped in your HOC
 * @public
 */
function addhoc(renderFn) {
  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'WithHOC';

  for (var _len = arguments.length, extraHOCArgs = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    extraHOCArgs[_key - 2] = arguments[_key];
  }

  return function withHOC(WrappedComponent) {
    function WithHOC(props) {
      var forwardedRef = props.forwardedRef,
          rest = _objectWithoutProperties(props, _excluded);

      return renderFn.apply(void 0, [function (extraProps) {
        return /*#__PURE__*/_react["default"].createElement(WrappedComponent, _extends({
          ref: forwardedRef
        }, rest, extraProps));
      }].concat(extraHOCArgs));
    } // Wrap display name per
    // https://reactjs.org/docs/higher-order-components.html#convention-wrap-the-display-name-for-easy-debugging


    WithHOC.displayName = "".concat(name, "(").concat(getDisplayName(WrappedComponent), ")"); // Copy over non-react statics per
    // https://reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over

    (0, _hoistNonReactStatics["default"])(WithHOC, WrappedComponent); // Wrap namespaced component to forward refs per https://reactjs.org/docs/forwarding-refs.html

    var forwardRef = /*#__PURE__*/_react["default"].forwardRef(function (props, ref) {
      return /*#__PURE__*/_react["default"].createElement(WithHOC, _extends({}, props, {
        forwardedRef: ref
      }));
    }); // Also hoist statics onto forward ref for convenience


    (0, _hoistNonReactStatics["default"])(forwardRef, WrappedComponent); // Wrap display name per
    // https://reactjs.org/docs/forwarding-refs.html#displaying-a-custom-name-in-devtools

    forwardRef.displayName = "ForwardRef(".concat(name, "/").concat(getDisplayName(WrappedComponent), ")");
    return forwardRef;
  };
}
/**
 * Gets display name of a given component
 *
 * @param {React.ComponentType} WrappedComponent The component to retrieve a display name for
 * @returns {String} The display name of the given component, or `Component` by default
 * @private
 */


function getDisplayName(WrappedComponent) {
  return WrappedComponent.displayName || WrappedComponent.name || 'Component';
}