"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _breakdancer = _interopRequireDefault(require("./breakdancer"));

var _reactNative = require("react-native");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * Breakdancer is a simple breakpoint utility.
 *
 * @constructor
 * @param {Object} specification Different breakpoints we need to know.
 * @public
 */
var NativeDancer =
/*#__PURE__*/
function (_Breakdancer) {
  _inherits(NativeDancer, _Breakdancer);

  function NativeDancer(specification) {
    var _this;

    _classCallCheck(this, NativeDancer);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(NativeDancer).call(this, specification));
    _this.breakpoint = _this.currently();
    return _this;
  }
  /**
   * Return the current view port.
   *
   * @returns {Object} viewport
   * @public
   */


  _createClass(NativeDancer, [{
    key: "viewport",
    value: function viewport() {
      return _reactNative.Dimensions.get('window');
    }
    /**
     * Lookup the view port width.
     *
     * @returns {Number} Current width.
     * @public
     */

  }, {
    key: "width",
    value: function width() {
      return _reactNative.Dimensions.get('window').width;
    }
    /**
     * Lookup the view port height.
     *
     * @returns {Number} Current height.
     * @public
     */

  }, {
    key: "height",
    value: function height() {
      return _reactNative.Dimensions.get('window').height;
    }
  }]);

  return NativeDancer;
}(_breakdancer.default);

exports.default = NativeDancer;