"use strict";

var _index = _interopRequireDefault(require("./index"));

var _assume = _interopRequireDefault(require("assume"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

it('is exposed as a function', function () {
  (0, _assume.default)(_index.default).is.a('function');
});
describe('breakdancer', function () {
  var breakdancer;
  var specification = [{
    name: 'mobile',
    width: 400,
    height: 600
  }, {
    name: 'desktop',
    width: 1024
  }, {
    name: 'whatever',
    width: 1409
  }];
  beforeEach(function () {
    breakdancer = new _index.default(specification);
  });
  it('safely works without existing windows object', function () {
    breakdancer = new _index.default(specification, {});
    (0, _assume.default)(breakdancer.height()).equals(0);
    (0, _assume.default)(breakdancer.width()).equals(0);
  });
  describe('constructor', function () {
    it('stores the specification as arrays', function () {
      (0, _assume.default)(breakdancer.specification).is.a('array');
      (0, _assume.default)(breakdancer.specification[0].name).equals('mobile');
    });
    it('sets the current breakpoint', function () {
      (0, _assume.default)(breakdancer.breakpoint).is.a('string');
      (0, _assume.default)(breakdancer.breakpoint).is.either(['mobile', 'desktop', 'whatever']);
    });
    it('can be supplied with a custom window object', function () {
      var bd = new _index.default(specification, {
        innerHeight: 10,
        innerWidth: 10
      });
      (0, _assume.default)(bd.breakpoint).equals('mobile');
    });
  });
  describe('#height', function () {
    it('defaults to documentElement clientHeight on missing innerHeight', function () {
      var bd = new _index.default(specification, {
        document: {
          documentElement: {
            clientHeight: 1337,
            clientWidth: 1337
          }
        }
      });
      (0, _assume.default)(bd.height()).equals(1337);
    });
    it('defaults to innerHeight', function () {
      var bd = new _index.default(specification, {
        innerHeight: 10,
        innerWidth: 11,
        document: {
          documentElement: {
            clientHeight: 1337,
            clientWidth: 1338
          }
        }
      });
      (0, _assume.default)(bd.height()).equals(10);
    });
  });
  describe('#width', function () {
    it('defaults to documentElement clientHeight on missing innerWidth', function () {
      var bd = new _index.default(specification, {
        document: {
          documentElement: {
            clientHeight: 1337,
            clientWidth: 1338
          }
        }
      });
      (0, _assume.default)(bd.width()).equals(1338);
    });
    it('defaults to innerWidth', function () {
      var bd = new _index.default(specification, {
        innerHeight: 10,
        innerWidth: 11,
        document: {
          documentElement: {
            clientHeight: 1337,
            clientWidth: 1338
          }
        }
      });
      (0, _assume.default)(bd.width()).equals(11);
    });
  });
  describe('#changed', function () {
    it('returns a boolean if the breakpoint has changed', function () {
      (0, _assume.default)(breakdancer.changed()).is.false();
      (0, _assume.default)(breakdancer.changed()).is.false();
      (0, _assume.default)(breakdancer.changed()).is.false();
      var viewport = {
        width: 200,
        height: 500
      };
      (0, _assume.default)(breakdancer.changed(viewport)).is.true();
    });
    it('updates the .breakpoint', function () {
      var viewport = {
        width: 200,
        height: 500
      };
      (0, _assume.default)(breakdancer.breakpoint).does.not.equal('mobile');
      (0, _assume.default)(breakdancer.changed(viewport)).is.true();
      (0, _assume.default)(breakdancer.breakpoint).equals('mobile');
    });
  });
  describe('#currently', function () {
    it('matches as desktop', function () {
      var viewport = {
        width: 800,
        height: 600
      };
      (0, _assume.default)(breakdancer.currently(viewport)).equals('desktop');
    });
    it('matches as mobile', function () {
      var viewport = {
        width: 200,
        height: 500
      };
      (0, _assume.default)(breakdancer.currently(viewport)).equals('mobile');
    });
    it('matches unknown', function () {
      var viewport = {
        width: 1800,
        height: 1600
      };
      (0, _assume.default)(breakdancer.currently(viewport)).equals('unknown');
    });
  });
  describe('#viewport', function () {
    it('returns the width and height', function () {
      var viewport = breakdancer.viewport();
      (0, _assume.default)(viewport.width).is.above(0);
      (0, _assume.default)(viewport.width).equals(breakdancer.width());
      (0, _assume.default)(viewport.height).is.above(0);
      (0, _assume.default)(viewport.height).equals(breakdancer.height());
    });
  });
  describe('#compare', function () {
    var bd = new _index.default(specification, {
      innerWidth: 1234,
      innerHeight: 1000,
      document: {
        documentElement: {
          clientHeight: 1337,
          clientWidth: 1338
        }
      }
    });
    it('should throw an error when looking at an unspecified breakpoint', function () {
      (0, _assume.default)(bd.compare('hologram', 'width')).throws(TypeError);
    });
    it('should throw an error when the given dimension does not exist for the given breakpoint', function () {
      (0, _assume.default)(bd.compare('whatever', 'height')).throws(TypeError);
    });
    it('should return the difference in width between the current and specified breakpoint', function () {
      (0, _assume.default)(bd.compare('mobile', 'width')).equals(1234 - 400);
      (0, _assume.default)(bd.compare('mobile', 'height')).equals(1000 - 600);
    });
  });
});