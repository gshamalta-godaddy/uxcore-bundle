"use strict";

var _index = _interopRequireDefault(require("./index.native"));

var _assume = _interopRequireDefault(require("assume"));

var _reactNative = require("react-native");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

it('is exposed as a function', function () {
  (0, _assume.default)(_index.default).is.a('function');
});
describe('nativeDancer', function () {
  var nativeDancer;
  var specification = [{
    name: 'mobile',
    width: 400,
    height: 600
  }, {
    name: 'tablet',
    width: 1024
  }, {
    name: 'whatever',
    width: 1409
  }];
  beforeEach(function () {
    nativeDancer = new _index.default(specification);
  });
  describe('constructor', function () {
    it('stores the specification as arrays', function () {
      (0, _assume.default)(nativeDancer.specification).is.a('array');
      (0, _assume.default)(nativeDancer.specification[0].name).equals('mobile');
    });
    it('sets the current breakpoint', function () {
      (0, _assume.default)(nativeDancer.breakpoint).is.a('string');
      (0, _assume.default)(nativeDancer.breakpoint).is.either(['mobile', 'tablet', 'whatever']);
    });
  });
  describe('#height', function () {
    it('equals to device\'s height', function () {
      var bd = new _index.default(specification);
      (0, _assume.default)(bd.height()).equals(_reactNative.Dimensions.get('window').height);
    });
  });
  describe('#width', function () {
    it('equals to device\'s width', function () {
      var bd = new _index.default(specification);
      (0, _assume.default)(bd.width()).equals(_reactNative.Dimensions.get('window').width);
    });
  });
  describe('#changed', function () {
    it('returns a boolean if the breakpoint has changed', function () {
      (0, _assume.default)(nativeDancer.changed()).is.false();
      (0, _assume.default)(nativeDancer.changed()).is.false();
      (0, _assume.default)(nativeDancer.changed()).is.false();
      var viewport = {
        width: 200,
        height: 500
      };
      (0, _assume.default)(nativeDancer.changed(viewport)).is.true();
    });
    it('updates the .breakpoint', function () {
      var viewport = {
        width: 200,
        height: 500
      };
      (0, _assume.default)(nativeDancer.breakpoint).does.not.equal('mobile');
      (0, _assume.default)(nativeDancer.changed(viewport)).is.true();
      (0, _assume.default)(nativeDancer.breakpoint).equals('mobile');
    });
  });
  describe('#currently', function () {
    it('matches as tablet', function () {
      var viewport = {
        width: 800,
        height: 600
      };
      (0, _assume.default)(nativeDancer.currently(viewport)).equals('tablet');
    });
    it('matches as mobile', function () {
      var viewport = {
        width: 200,
        height: 500
      };
      (0, _assume.default)(nativeDancer.currently(viewport)).equals('mobile');
    });
    it('matches unknown', function () {
      var viewport = {
        width: 1800,
        height: 1600
      };
      (0, _assume.default)(nativeDancer.currently(viewport)).equals('unknown');
    });
  });
  describe('#viewport', function () {
    it('returns the width and height', function () {
      var viewport = nativeDancer.viewport();
      (0, _assume.default)(viewport.width).is.above(0);
      (0, _assume.default)(viewport.width).equals(nativeDancer.width());
      (0, _assume.default)(viewport.height).is.above(0);
      (0, _assume.default)(viewport.height).equals(nativeDancer.height());
    });
  });
});