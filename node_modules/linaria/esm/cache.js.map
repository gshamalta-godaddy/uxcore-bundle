{"version":3,"sources":["../src/cache.ts"],"names":["MemoryCache","Map","get","key","Promise","resolve","cache","set","value","memoryCache","getCacheInstance","cacheProvider","require","Error"],"mappings":";;AAKA;AAEA,MAAMA,WAAN,CAAoC;AAAA;AAAA,mCACG,IAAIC,GAAJ,EADH;AAAA;;AAG3BC,EAAAA,GAAP,CAAWC,GAAX,EAAyC;AACvC,WAAOC,OAAO,CAACC,OAAR,CAAgB,KAAKC,KAAL,CAAWJ,GAAX,CAAeC,GAAf,KAAuB,EAAvC,CAAP;AACD;;AAEMI,EAAAA,GAAP,CAAWJ,GAAX,EAAwBK,KAAxB,EAAsD;AACpD,SAAKF,KAAL,CAAWC,GAAX,CAAeJ,GAAf,EAAoBK,KAApB;AACA,WAAOJ,OAAO,CAACC,OAAR,EAAP;AACD;;AAViC;;AAapC,OAAO,MAAMI,WAAW,GAAG,IAAIT,WAAJ,EAApB;AAEP;;;;;;AAKA,OAAO,MAAMU,gBAAgB,GAAG,OAC9BC,aAD8B,KAEV;AACpB,MAAI,CAACA,aAAL,EAAoB;AAClB,WAAOF,WAAP;AACD;;AACD,MAAI,OAAOE,aAAP,KAAyB,QAA7B,EAAuC;AACrC,WAAOC,OAAO,CAACD,aAAD,CAAd;AACD;;AACD,MACE,OAAOA,aAAP,KAAyB,QAAzB,IACA,SAASA,aADT,IAEA,SAASA,aAHX,EAIE;AACA,WAAOA,aAAP;AACD;;AACD,QAAM,IAAIE,KAAJ,CAAW,2BAA0BF,aAAc,EAAnD,CAAN;AACD,CAjBM","sourcesContent":["export interface ICache {\n  get: (key: string) => Promise<string>;\n  set: (key: string, value: string) => Promise<void>;\n}\n\n// memory cache, which is the default cache implementation in Linaria\n\nclass MemoryCache implements ICache {\n  private cache: Map<string, string> = new Map();\n\n  public get(key: string): Promise<string> {\n    return Promise.resolve(this.cache.get(key) ?? '');\n  }\n\n  public set(key: string, value: string): Promise<void> {\n    this.cache.set(key, value);\n    return Promise.resolve();\n  }\n}\n\nexport const memoryCache = new MemoryCache();\n\n/**\n * return cache instance from `options.cacheProvider`\n * @param cacheProvider string | ICache | undefined\n * @returns ICache instance\n */\nexport const getCacheInstance = async (\n  cacheProvider: string | ICache | undefined\n): Promise<ICache> => {\n  if (!cacheProvider) {\n    return memoryCache;\n  }\n  if (typeof cacheProvider === 'string') {\n    return require(cacheProvider);\n  }\n  if (\n    typeof cacheProvider === 'object' &&\n    'get' in cacheProvider &&\n    'set' in cacheProvider\n  ) {\n    return cacheProvider;\n  }\n  throw new Error(`Invalid cache provider: ${cacheProvider}`);\n};\n"],"file":"cache.js"}