{"version":3,"sources":["../src/loader.ts"],"names":["outputCssLoader","require","resolve","loader","content","inputSourceMap","async","resourcePath","EvalCache","clearForFile","sourceMap","undefined","preprocessor","extension","cacheProvider","rest","loaderUtils","getOptions","outputFilename","replace","resolveOptions","extensions","resolveSync","enhancedResolve","create","sync","_compilation","options","alias","modules","result","originalResolveFilename","Module","_resolveFilename","id","filename","path","dirname","addDependency","relative","process","cwd","pluginOptions","cssText","Buffer","from","cssSourceMapText","toString","dependencies","length","forEach","dep","f","e","console","warn","then","cacheInstance","set","request","encodeURIComponent","stringifiedRequest","stringifyRequest","callback","code","catch","err"],"mappings":"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","sourcesContent":["/**\n * This file contains a Webpack loader for Linaria.\n * It uses the transform.ts function to generate class names from source code,\n * returns transformed code without template literals and attaches generated source maps\n */\n\nimport path from 'path';\nimport loaderUtils from 'loader-utils';\nimport enhancedResolve from 'enhanced-resolve';\nimport type { RawSourceMap } from 'source-map';\nimport * as EvalCache from './babel/eval-cache';\nimport Module from './babel/module';\nimport { debug } from './babel/utils/logger';\nimport transform from './transform';\nimport { getCacheInstance } from './cache';\nimport type { Result } from './types';\n\ntype LoaderContext = Parameters<typeof loaderUtils.getOptions>[0];\n\nconst outputCssLoader = require.resolve('./outputCssLoader');\n\nexport default function loader(\n  this: LoaderContext,\n  content: string,\n  inputSourceMap: RawSourceMap | null\n) {\n  // tell Webpack this loader is async\n  this.async();\n\n  debug('loader', this.resourcePath);\n\n  EvalCache.clearForFile(this.resourcePath);\n\n  const {\n    sourceMap = undefined,\n    preprocessor = undefined,\n    extension = '.linaria.css',\n    cacheProvider,\n    ...rest\n  } = loaderUtils.getOptions(this) || {};\n\n  const outputFilename = this.resourcePath.replace(/\\.[^.]+$/, extension);\n\n  const resolveOptions = {\n    extensions: ['.js', '.jsx', '.ts', '.tsx', '.json'],\n  };\n\n  const resolveSync = enhancedResolve.create.sync(\n    // this._compilation is a deprecated API\n    // However there seems to be no other way to access webpack's resolver\n    // There is this.resolve, but it's asynchronous\n    // Another option is to read the webpack.config.js, but it won't work for programmatic usage\n    // This API is used by many loaders/plugins, so hope we're safe for a while\n    this._compilation?.options.resolve\n      ? {\n          ...resolveOptions,\n          alias: this._compilation.options.resolve.alias,\n          modules: this._compilation.options.resolve.modules,\n        }\n      : resolveOptions\n  );\n\n  let result: Result;\n\n  const originalResolveFilename = Module._resolveFilename;\n\n  try {\n    // Use webpack's resolution when evaluating modules\n    Module._resolveFilename = (id, { filename }) => {\n      const result = resolveSync(path.dirname(filename), id);\n      this.addDependency(result);\n      return result;\n    };\n\n    result = transform(content, {\n      filename: path.relative(process.cwd(), this.resourcePath),\n      inputSourceMap: inputSourceMap ?? undefined,\n      pluginOptions: rest,\n      preprocessor,\n    });\n  } finally {\n    // Restore original behaviour\n    Module._resolveFilename = originalResolveFilename;\n  }\n\n  if (result.cssText) {\n    let { cssText } = result;\n\n    if (sourceMap) {\n      cssText += `/*# sourceMappingURL=data:application/json;base64,${Buffer.from(\n        result.cssSourceMapText || ''\n      ).toString('base64')}*/`;\n    }\n\n    if (result.dependencies?.length) {\n      result.dependencies.forEach((dep) => {\n        try {\n          const f = resolveSync(path.dirname(this.resourcePath), dep);\n\n          this.addDependency(f);\n        } catch (e) {\n          // eslint-disable-next-line no-console\n          console.warn(`[linaria] failed to add dependency for: ${dep}`, e);\n        }\n      });\n    }\n\n    getCacheInstance(cacheProvider)\n      .then((cacheInstance) => cacheInstance.set(this.resourcePath, cssText))\n      .then(() => {\n        const request = `${outputFilename}!=!${outputCssLoader}?cacheProvider=${encodeURIComponent(\n          cacheProvider ?? ''\n        )}!${this.resourcePath}`;\n        const stringifiedRequest = loaderUtils.stringifyRequest(this, request);\n\n        return this.callback(\n          null,\n          `${result.code}\\n\\nrequire(${stringifiedRequest});`,\n          result.sourceMap ?? undefined\n        );\n      })\n      .catch((err: Error) => this.callback(err));\n    return;\n  }\n\n  this.callback(null, result.code, result.sourceMap ?? undefined);\n}\n"],"file":"loader.js"}