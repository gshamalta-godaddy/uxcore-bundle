"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = validateComponents;

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Flatten an array of elements, probably React Components.
 *
 * @param {Array} array Entire or partial collection.
 * @returns {Array} Flattened result.
 * @api private
 */
function flatten(array) {
  if (!Array.isArray(array)) {
    array = [array];
  }

  return array.reduce(function (memo, component) {
    if (Array.isArray(component)) {
      Array.prototype.push.apply(memo, flatten(component));
    } else if ((typeof className === "undefined" ? "undefined" : _typeof(className)) === 'object') {
      Object.keys(component).forEach(function each(key) {
        if (Object.prototype.hasOwnProperty.call(component, key)) {
          memo.push(key);
        }
      });
    } else {
      memo.push(component);
    }

    return memo;
  }, []).filter(Boolean);
}
/**
 * Return Component name or the string identifier itself.
 *
 * @param {Component|String} component Instance or string reference.
 * @returns {String} Name of the component.
 * @api private
 */


function toString(component) {
  if (typeof component.type === 'function') {
    return component.type.name;
  }

  return component.name || component;
}
/**
 * Check if the Component is allowed.
 *
 * @param {Array} components Allowed components.
 * @param {Component} component React Component.
 * @returns {Boolean} Result of the check.
 * @api private
 */


function allowed(components) {
  return function (component) {
    return !!(~components.indexOf(component) || ~components.indexOf(component.type) || ~components.indexOf(toString(component)));
  };
}
/**
 * Create a new validator that allows the provided React Components.
 *
 * @param {Array} instances Collection of classes or strings.
 * @returns {null|error} Returns null if Component is allowed, otherwise an error.
 * @api public
 */


function validateComponents() {
  var components = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  if (!Array.isArray(components)) {
    components = [components];
  }

  return function allowComponents(props, propName, componentName) {
    var prop = flatten(props[propName]);

    if (prop.every(allowed(components))) {
      return null;
    }

    return new Error("".concat(componentName, " may only receive Components of type: ").concat(components.map(toString).join(', '), " on property ").concat(propName, "."));
  };
}