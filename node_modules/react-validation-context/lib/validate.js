"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _validates = _interopRequireDefault(require("./validates"));

var _context = require("./context");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * This library revolves around the idea of "validity". A component can have one of the following validities:
 *
 * - `undefined` - No validation state defined. This is the default.
 * - `null` - Validation is disabled.
 * - `true` - Validation passed.
 * - `false` - Validation failed.
 *
 * @typedef {(undefined|null|Boolean)} Validity
 */

/**
 * The `Validate` component is used to wrap a component which has descendants
 * that may be validated, and provides an interface for validating all of those
 * descendants. It extends `Validates` to provide the same interface for
 * listening for validation changes on the component itself.
 *
 * **NOTE**: This component is able to keep track of all conforming descendant
 * components (not just direct children) via the React `context` api.
 *
 * @public
 */
var Validate =
/*#__PURE__*/
function (_Validates) {
  _inherits(Validate, _Validates);

  function Validate() {
    var _this;

    _classCallCheck(this, Validate);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Validate).apply(this, arguments));
    _this.state = {
      //
      // Validity that results from calling the validate() function from props
      //
      validates: undefined,
      //
      // Set of validities for descendent components; key is component name,
      // value is validity.
      //
      valids: {}
    };
    _this.processValidChange = _this.processValidChange.bind(_assertThisInitialized(_this));
    return _this;
  }
  /**
   * Whether or not the component currently validates.
   *
   * @type {Validity}
   * @private
   */


  _createClass(Validate, [{
    key: "processValidChange",

    /**
     * Child validity change handler.
     *
     * @param {String} name Identifier for the field whose validity changed.
     * @param {Validity} isValid The field's current validity.
     * @private
     */
    value: function processValidChange(name, isValid) {
      var valids = this.state.valids;
      var validate = this.props.validate;

      if (isValid === undefined) {
        delete valids[name];
      } else {
        valids[name] = isValid;
      }

      this.setState({
        valids: valids,
        validates: validate(valids)
      });
    }
    /**
     * React lifecycle handler called immediately after the component's initial
     * render.
     *
     * @private
     */

  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      // Update the handlers with the initial state
      this.onValidChange(this.validates);
    }
    /**
     * React lifecycle handler called when a component finished updating.
     *
     * @param {Object} prevProps Component's previous props.
     * @param {Object} prevState Component's previous state.
     * @private
     */

  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      var _this2 = this;

      var executeOnValidChange = function executeOnValidChange() {
        var isValid = _this2.validates; // Prefer props over state.

        var _prevProps$validates = prevProps.validates,
            wasValid = _prevProps$validates === void 0 ? prevState.validates : _prevProps$validates,
            prevName = prevProps.name;

        _this2.onValidChange(isValid, wasValid, prevName);
      };

      if (this.props.validate !== prevProps.validate) {
        this.setState({
          validates: this.props.validate(this.state.valids)
        }, executeOnValidChange);
      } else {
        executeOnValidChange();
      }
    }
    /**
     * React lifecycle handler called when component is about to be unmounted.
     *
     * @public
     */

  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      //
      // Update the handlers with `isValid=undefined` to notify them that the
      // component no longer is being validated
      //
      this.onValidChange(undefined, this.validates);
    }
    /**
     * Renders the component.
     *
     * @returns {Context.Provider} Rendered component.
     * @public
     */

  }, {
    key: "render",
    value: function render() {
      return _react.default.createElement(_context.Context.Provider, {
        value: {
          onValidChange: this.processValidChange
        }
      }, this.props.children);
    }
  }, {
    key: "validates",
    get: function get() {
      return this.props.validates || this.state.validates;
    }
  }]);

  return Validate;
}(_validates.default);

Validate.defaultProps = {
  validate: function validate() {} // by default, no validation defined.

};
/**
 * Specify the PropTypes for validation purposes.
 *
 * @type {Object}
 */

Validate.propTypes = {
  validate: _propTypes.default.func.isRequired // validation function

}; // Inherit all propTypes from Validate. In production propTypes are stripped
// so be sure to check for their existence before copying them over.

if (_validates.default.propTypes) {
  Object.keys(_validates.default.propTypes).forEach(function each(key) {
    Validate.propTypes[key] = _validates.default.propTypes[key];
  });
} //
// Expose the interface.
//


var _default = Validate;
exports.default = _default;