"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = require("react");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function noop() {}
/**
 * This library revolves around the idea of "validity". A component can have one of the following validities:
 *
 * - `undefined` - No validation state defined. This is the default.
 * - `null` - Validation is disabled.
 * - `true` - Validation passed.
 * - `false` - Validation failed.
 *
 * @typedef {(undefined|null|Boolean)} Validity
 */

/**
 * It is useful to know when a component's validity changes. As such, this library attempts to provide a uniform API for
 * validation change handlers. In general, a validity change handler has the following API:
 *
 * @callback onValidChange
 * @param {String} name - The unique identifier for the component whose validity changed.
 * @param {Validity} isValid - The current validity of the component.
 * @param {Validity} wasValid - The previous validity of the component.
 */

/**
 * The `Validates` component is used to wrap a component that can be validated,
 * providing the logic for validation change handlers.
 *
 * @class {Validates}
 * @public
 */


var Validates =
/*#__PURE__*/
function (_Component) {
  _inherits(Validates, _Component);

  function Validates() {
    _classCallCheck(this, Validates);

    return _possibleConstructorReturn(this, _getPrototypeOf(Validates).apply(this, arguments));
  }

  _createClass(Validates, [{
    key: "onValidChange",

    /**
     * If `isValid !== wasValid` or `prevName !== this.props.name`, calls the
     * onValidChange handlers in props and context with the specified arguments.
     *
     * @protected
     * @param {Validity} isValid The current validity.
     * @param {Validity} wasValid The previous validity.
     * @param {Object} [prevName] The previous name that the component was using.
     * If it is different than the current name, the props and context handlers
     * will be called first with `undefined` to indicate the previous name no
     * longer has validation.
     */
    value: function onValidChange(isValid, wasValid, prevName) {
      var _this$props = this.props,
          _this$props$onValidCh = _this$props.onValidChange,
          propsHandler = _this$props$onValidCh === void 0 ? noop : _this$props$onValidCh,
          name = _this$props.name,
          context = _this$props.context;
      var _context$onValidChang = context.onValidChange,
          ctxHandler = _context$onValidChang === void 0 ? noop : _context$onValidChang;
      var nameChanged = prevName && prevName !== name;
      var validChanged = isValid !== wasValid;

      if (nameChanged && undefined !== wasValid) {
        propsHandler(prevName, undefined, wasValid);
        ctxHandler(prevName, undefined, wasValid);
      }

      if (nameChanged || validChanged) {
        propsHandler(name, isValid, wasValid);
        ctxHandler(name, isValid, wasValid);
      }
    }
    /**
     * React lifecycle handler called immediately after the component's initial
     * render.
     *
     * @private
     */

  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.onValidChange(this.props.validates);
    }
    /**
     * React lifecycle handler called when a component finished updating.
     *
     * @param {Object} prevProps Component's previous props.
     * @private
     */

  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var wasValid = prevProps.validates,
          prevName = prevProps.name;
      var isValid = this.props.validates;
      this.onValidChange(isValid, wasValid, prevName);
    }
    /**
     * Update the handlers with `isValid=undefined` to notify them that the
     * component no longer is being validated.
     *
     * @private
     */

  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.onValidChange(undefined, this.props.validates);
    }
    /**
     * Renders the component.
     *
     * @returns {Component|Null} Rendered component.
     * @public
     */

  }, {
    key: "render",
    value: function render() {
      return this.props.children || null;
    }
  }]);

  return Validates;
}(_react.Component);
/**
 * Specify the PropTypes for validation purposes.
 *
 * @type {Object}
 */


Validates.propTypes = {
  validates: _propTypes.default.oneOf([true, false, null]),
  onValidChange: _propTypes.default.func,
  name: _propTypes.default.string.isRequired,
  children: _propTypes.default.node,
  context: _propTypes.default.object
}; //
// Expose the interface.
//

var _default = Validates;
exports.default = _default;