"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toggle = toggle;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Provides a default implementation to toggle a property. Many UI actions revolve
 * around toggling state.
 *
 * @param {Object} scope Scope of the method to work on.
 * @param {String} property Property that keeps the dropdown state.
 * @param {Function} callback Optional callback to use for both toggle states.
 * @returns {Function} event handler that switched state.
 * @api private
 */
function toggle(scope) {
  var property = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'dropdown';
  var callback = arguments.length > 2 ? arguments[2] : undefined;

  if (arguments.length === 2 && typeof property === 'function') {
    callback = property;
    property = 'dropdown';
  }

  return function (event, done) {
    var state = scope.state || {};
    done = done || callback;

    if (typeof done !== 'function') {
      done = null;
    }

    scope.setState(_defineProperty({}, property, !state[property]), done);
  };
}