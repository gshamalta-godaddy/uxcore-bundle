import assume from 'assume';
import { toggle } from './';

function noop() {}

describe('Toggle mixin', function () {
  let mockComponent;
  let toggler;
  let state;
  let e;

  beforeEach(function () {
    state = {};

    e = {};
    e.preventDefault = e.stopPropagation = noop;

    mockComponent = {
      setState: function (obj, cb) {
        state = obj;
        if (cb) return cb();
      }
    };

    toggler = toggle(mockComponent);
  });

  afterEach(function () {
    state = toggler = null;
  });

  describe('#toggle', function () {
    it('is a function', function () {
      assume(toggler).is.a('function');
    });

    it('defaults to property dropdown', function () {
      toggler();
      assume(state).to.have.property('dropdown', true);
    });

    it('toggles the state of the property', function () {
      toggle(mockComponent, 'someProp')();

      assume(state).to.have.property('someProp', true);
    });

    it('defaults to property dropdown', function () {
      toggler(e);
      assume(state).to.have.property('dropdown', true);
    });

    it('has support for an optional callback', function (done) {
      toggler(e, done);
    });

    it('has support for a default callback', function (done) {
      toggler = toggle(mockComponent, function () {
        assume(state).to.have.property('dropdown', true);
        done();
      });

      toggler(e);
    });

    it('has support for custom property with default callback', function (done) {
      toggler = toggle(mockComponent, 'open', function () {
        assume(state).to.have.property('open', true);
        done();
      });

      toggler(e);

    });

    it('prefers the optional callback to the default callback', function (done) {
      toggler = toggle(mockComponent, function () {
        assume(state).to.have.property('dropdown', true);
      });

      toggler(e);
      toggler(e, () => {
        assume(state).to.have.property('dropdown', true);
        done();
      });
    });

    it('will no-op the callback if it is not a function', function () {
      function run() {
        toggler(e, 'something');
      }

      assume(run).not.throws('String is not a constructor');
    });

    it('will not call event propagation events if unavailable', function () {
      function run() {
        toggler({});
      }

      assume(run).not.throws('undefined is not a constructor');
    });
  });
});
